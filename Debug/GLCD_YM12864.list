
GLCD_YM12864.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005004  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000da0  080051a0  080051a0  000151a0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005f40  08005f40  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  08005f40  08005f40  00015f40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005f48  08005f48  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005f48  08005f48  00015f48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005f4c  08005f4c  00015f4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  08005f50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004b8  20000014  08005f64  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200004cc  08005f64  000204cc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b8fe  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e0c  00000000  00000000  0002b942  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bc8  00000000  00000000  0002d750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ac8  00000000  00000000  0002e318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017d0f  00000000  00000000  0002ede0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d971  00000000  00000000  00046aef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000975b9  00000000  00000000  00054460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eba19  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034b0  00000000  00000000  000eba6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000014 	.word	0x20000014
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08005184 	.word	0x08005184

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000018 	.word	0x20000018
 80001d4:	08005184 	.word	0x08005184

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_d2iz>:
 8000a84:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a88:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a8c:	d215      	bcs.n	8000aba <__aeabi_d2iz+0x36>
 8000a8e:	d511      	bpl.n	8000ab4 <__aeabi_d2iz+0x30>
 8000a90:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a94:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a98:	d912      	bls.n	8000ac0 <__aeabi_d2iz+0x3c>
 8000a9a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aa6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	bf18      	it	ne
 8000ab0:	4240      	negne	r0, r0
 8000ab2:	4770      	bx	lr
 8000ab4:	f04f 0000 	mov.w	r0, #0
 8000ab8:	4770      	bx	lr
 8000aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000abe:	d105      	bne.n	8000acc <__aeabi_d2iz+0x48>
 8000ac0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ac4:	bf08      	it	eq
 8000ac6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop

08000ad4 <__aeabi_d2f>:
 8000ad4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000adc:	bf24      	itt	cs
 8000ade:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ae2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ae6:	d90d      	bls.n	8000b04 <__aeabi_d2f+0x30>
 8000ae8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000aec:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000af0:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000af4:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000af8:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000afc:	bf08      	it	eq
 8000afe:	f020 0001 	biceq.w	r0, r0, #1
 8000b02:	4770      	bx	lr
 8000b04:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b08:	d121      	bne.n	8000b4e <__aeabi_d2f+0x7a>
 8000b0a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b0e:	bfbc      	itt	lt
 8000b10:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b14:	4770      	bxlt	lr
 8000b16:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b1a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b1e:	f1c2 0218 	rsb	r2, r2, #24
 8000b22:	f1c2 0c20 	rsb	ip, r2, #32
 8000b26:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b2a:	fa20 f002 	lsr.w	r0, r0, r2
 8000b2e:	bf18      	it	ne
 8000b30:	f040 0001 	orrne.w	r0, r0, #1
 8000b34:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b38:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b3c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b40:	ea40 000c 	orr.w	r0, r0, ip
 8000b44:	fa23 f302 	lsr.w	r3, r3, r2
 8000b48:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b4c:	e7cc      	b.n	8000ae8 <__aeabi_d2f+0x14>
 8000b4e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b52:	d107      	bne.n	8000b64 <__aeabi_d2f+0x90>
 8000b54:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b58:	bf1e      	ittt	ne
 8000b5a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b5e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b62:	4770      	bxne	lr
 8000b64:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b68:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop

08000b74 <__aeabi_uldivmod>:
 8000b74:	b953      	cbnz	r3, 8000b8c <__aeabi_uldivmod+0x18>
 8000b76:	b94a      	cbnz	r2, 8000b8c <__aeabi_uldivmod+0x18>
 8000b78:	2900      	cmp	r1, #0
 8000b7a:	bf08      	it	eq
 8000b7c:	2800      	cmpeq	r0, #0
 8000b7e:	bf1c      	itt	ne
 8000b80:	f04f 31ff 	movne.w	r1, #4294967295
 8000b84:	f04f 30ff 	movne.w	r0, #4294967295
 8000b88:	f000 b974 	b.w	8000e74 <__aeabi_idiv0>
 8000b8c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b90:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b94:	f000 f806 	bl	8000ba4 <__udivmoddi4>
 8000b98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ba0:	b004      	add	sp, #16
 8000ba2:	4770      	bx	lr

08000ba4 <__udivmoddi4>:
 8000ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ba8:	9d08      	ldr	r5, [sp, #32]
 8000baa:	4604      	mov	r4, r0
 8000bac:	468e      	mov	lr, r1
 8000bae:	2b00      	cmp	r3, #0
 8000bb0:	d14d      	bne.n	8000c4e <__udivmoddi4+0xaa>
 8000bb2:	428a      	cmp	r2, r1
 8000bb4:	4694      	mov	ip, r2
 8000bb6:	d969      	bls.n	8000c8c <__udivmoddi4+0xe8>
 8000bb8:	fab2 f282 	clz	r2, r2
 8000bbc:	b152      	cbz	r2, 8000bd4 <__udivmoddi4+0x30>
 8000bbe:	fa01 f302 	lsl.w	r3, r1, r2
 8000bc2:	f1c2 0120 	rsb	r1, r2, #32
 8000bc6:	fa20 f101 	lsr.w	r1, r0, r1
 8000bca:	fa0c fc02 	lsl.w	ip, ip, r2
 8000bce:	ea41 0e03 	orr.w	lr, r1, r3
 8000bd2:	4094      	lsls	r4, r2
 8000bd4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000bd8:	0c21      	lsrs	r1, r4, #16
 8000bda:	fbbe f6f8 	udiv	r6, lr, r8
 8000bde:	fa1f f78c 	uxth.w	r7, ip
 8000be2:	fb08 e316 	mls	r3, r8, r6, lr
 8000be6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000bea:	fb06 f107 	mul.w	r1, r6, r7
 8000bee:	4299      	cmp	r1, r3
 8000bf0:	d90a      	bls.n	8000c08 <__udivmoddi4+0x64>
 8000bf2:	eb1c 0303 	adds.w	r3, ip, r3
 8000bf6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bfa:	f080 811f 	bcs.w	8000e3c <__udivmoddi4+0x298>
 8000bfe:	4299      	cmp	r1, r3
 8000c00:	f240 811c 	bls.w	8000e3c <__udivmoddi4+0x298>
 8000c04:	3e02      	subs	r6, #2
 8000c06:	4463      	add	r3, ip
 8000c08:	1a5b      	subs	r3, r3, r1
 8000c0a:	b2a4      	uxth	r4, r4
 8000c0c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c10:	fb08 3310 	mls	r3, r8, r0, r3
 8000c14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c18:	fb00 f707 	mul.w	r7, r0, r7
 8000c1c:	42a7      	cmp	r7, r4
 8000c1e:	d90a      	bls.n	8000c36 <__udivmoddi4+0x92>
 8000c20:	eb1c 0404 	adds.w	r4, ip, r4
 8000c24:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c28:	f080 810a 	bcs.w	8000e40 <__udivmoddi4+0x29c>
 8000c2c:	42a7      	cmp	r7, r4
 8000c2e:	f240 8107 	bls.w	8000e40 <__udivmoddi4+0x29c>
 8000c32:	4464      	add	r4, ip
 8000c34:	3802      	subs	r0, #2
 8000c36:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c3a:	1be4      	subs	r4, r4, r7
 8000c3c:	2600      	movs	r6, #0
 8000c3e:	b11d      	cbz	r5, 8000c48 <__udivmoddi4+0xa4>
 8000c40:	40d4      	lsrs	r4, r2
 8000c42:	2300      	movs	r3, #0
 8000c44:	e9c5 4300 	strd	r4, r3, [r5]
 8000c48:	4631      	mov	r1, r6
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	428b      	cmp	r3, r1
 8000c50:	d909      	bls.n	8000c66 <__udivmoddi4+0xc2>
 8000c52:	2d00      	cmp	r5, #0
 8000c54:	f000 80ef 	beq.w	8000e36 <__udivmoddi4+0x292>
 8000c58:	2600      	movs	r6, #0
 8000c5a:	e9c5 0100 	strd	r0, r1, [r5]
 8000c5e:	4630      	mov	r0, r6
 8000c60:	4631      	mov	r1, r6
 8000c62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c66:	fab3 f683 	clz	r6, r3
 8000c6a:	2e00      	cmp	r6, #0
 8000c6c:	d14a      	bne.n	8000d04 <__udivmoddi4+0x160>
 8000c6e:	428b      	cmp	r3, r1
 8000c70:	d302      	bcc.n	8000c78 <__udivmoddi4+0xd4>
 8000c72:	4282      	cmp	r2, r0
 8000c74:	f200 80f9 	bhi.w	8000e6a <__udivmoddi4+0x2c6>
 8000c78:	1a84      	subs	r4, r0, r2
 8000c7a:	eb61 0303 	sbc.w	r3, r1, r3
 8000c7e:	2001      	movs	r0, #1
 8000c80:	469e      	mov	lr, r3
 8000c82:	2d00      	cmp	r5, #0
 8000c84:	d0e0      	beq.n	8000c48 <__udivmoddi4+0xa4>
 8000c86:	e9c5 4e00 	strd	r4, lr, [r5]
 8000c8a:	e7dd      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000c8c:	b902      	cbnz	r2, 8000c90 <__udivmoddi4+0xec>
 8000c8e:	deff      	udf	#255	; 0xff
 8000c90:	fab2 f282 	clz	r2, r2
 8000c94:	2a00      	cmp	r2, #0
 8000c96:	f040 8092 	bne.w	8000dbe <__udivmoddi4+0x21a>
 8000c9a:	eba1 010c 	sub.w	r1, r1, ip
 8000c9e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ca2:	fa1f fe8c 	uxth.w	lr, ip
 8000ca6:	2601      	movs	r6, #1
 8000ca8:	0c20      	lsrs	r0, r4, #16
 8000caa:	fbb1 f3f7 	udiv	r3, r1, r7
 8000cae:	fb07 1113 	mls	r1, r7, r3, r1
 8000cb2:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cb6:	fb0e f003 	mul.w	r0, lr, r3
 8000cba:	4288      	cmp	r0, r1
 8000cbc:	d908      	bls.n	8000cd0 <__udivmoddi4+0x12c>
 8000cbe:	eb1c 0101 	adds.w	r1, ip, r1
 8000cc2:	f103 38ff 	add.w	r8, r3, #4294967295
 8000cc6:	d202      	bcs.n	8000cce <__udivmoddi4+0x12a>
 8000cc8:	4288      	cmp	r0, r1
 8000cca:	f200 80cb 	bhi.w	8000e64 <__udivmoddi4+0x2c0>
 8000cce:	4643      	mov	r3, r8
 8000cd0:	1a09      	subs	r1, r1, r0
 8000cd2:	b2a4      	uxth	r4, r4
 8000cd4:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cd8:	fb07 1110 	mls	r1, r7, r0, r1
 8000cdc:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ce0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ce4:	45a6      	cmp	lr, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x156>
 8000ce8:	eb1c 0404 	adds.w	r4, ip, r4
 8000cec:	f100 31ff 	add.w	r1, r0, #4294967295
 8000cf0:	d202      	bcs.n	8000cf8 <__udivmoddi4+0x154>
 8000cf2:	45a6      	cmp	lr, r4
 8000cf4:	f200 80bb 	bhi.w	8000e6e <__udivmoddi4+0x2ca>
 8000cf8:	4608      	mov	r0, r1
 8000cfa:	eba4 040e 	sub.w	r4, r4, lr
 8000cfe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d02:	e79c      	b.n	8000c3e <__udivmoddi4+0x9a>
 8000d04:	f1c6 0720 	rsb	r7, r6, #32
 8000d08:	40b3      	lsls	r3, r6
 8000d0a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d0e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d12:	fa20 f407 	lsr.w	r4, r0, r7
 8000d16:	fa01 f306 	lsl.w	r3, r1, r6
 8000d1a:	431c      	orrs	r4, r3
 8000d1c:	40f9      	lsrs	r1, r7
 8000d1e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d22:	fa00 f306 	lsl.w	r3, r0, r6
 8000d26:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d2a:	0c20      	lsrs	r0, r4, #16
 8000d2c:	fa1f fe8c 	uxth.w	lr, ip
 8000d30:	fb09 1118 	mls	r1, r9, r8, r1
 8000d34:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d38:	fb08 f00e 	mul.w	r0, r8, lr
 8000d3c:	4288      	cmp	r0, r1
 8000d3e:	fa02 f206 	lsl.w	r2, r2, r6
 8000d42:	d90b      	bls.n	8000d5c <__udivmoddi4+0x1b8>
 8000d44:	eb1c 0101 	adds.w	r1, ip, r1
 8000d48:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d4c:	f080 8088 	bcs.w	8000e60 <__udivmoddi4+0x2bc>
 8000d50:	4288      	cmp	r0, r1
 8000d52:	f240 8085 	bls.w	8000e60 <__udivmoddi4+0x2bc>
 8000d56:	f1a8 0802 	sub.w	r8, r8, #2
 8000d5a:	4461      	add	r1, ip
 8000d5c:	1a09      	subs	r1, r1, r0
 8000d5e:	b2a4      	uxth	r4, r4
 8000d60:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d64:	fb09 1110 	mls	r1, r9, r0, r1
 8000d68:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000d6c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000d70:	458e      	cmp	lr, r1
 8000d72:	d908      	bls.n	8000d86 <__udivmoddi4+0x1e2>
 8000d74:	eb1c 0101 	adds.w	r1, ip, r1
 8000d78:	f100 34ff 	add.w	r4, r0, #4294967295
 8000d7c:	d26c      	bcs.n	8000e58 <__udivmoddi4+0x2b4>
 8000d7e:	458e      	cmp	lr, r1
 8000d80:	d96a      	bls.n	8000e58 <__udivmoddi4+0x2b4>
 8000d82:	3802      	subs	r0, #2
 8000d84:	4461      	add	r1, ip
 8000d86:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000d8a:	fba0 9402 	umull	r9, r4, r0, r2
 8000d8e:	eba1 010e 	sub.w	r1, r1, lr
 8000d92:	42a1      	cmp	r1, r4
 8000d94:	46c8      	mov	r8, r9
 8000d96:	46a6      	mov	lr, r4
 8000d98:	d356      	bcc.n	8000e48 <__udivmoddi4+0x2a4>
 8000d9a:	d053      	beq.n	8000e44 <__udivmoddi4+0x2a0>
 8000d9c:	b15d      	cbz	r5, 8000db6 <__udivmoddi4+0x212>
 8000d9e:	ebb3 0208 	subs.w	r2, r3, r8
 8000da2:	eb61 010e 	sbc.w	r1, r1, lr
 8000da6:	fa01 f707 	lsl.w	r7, r1, r7
 8000daa:	fa22 f306 	lsr.w	r3, r2, r6
 8000dae:	40f1      	lsrs	r1, r6
 8000db0:	431f      	orrs	r7, r3
 8000db2:	e9c5 7100 	strd	r7, r1, [r5]
 8000db6:	2600      	movs	r6, #0
 8000db8:	4631      	mov	r1, r6
 8000dba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dbe:	f1c2 0320 	rsb	r3, r2, #32
 8000dc2:	40d8      	lsrs	r0, r3
 8000dc4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dc8:	fa21 f303 	lsr.w	r3, r1, r3
 8000dcc:	4091      	lsls	r1, r2
 8000dce:	4301      	orrs	r1, r0
 8000dd0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dd4:	fa1f fe8c 	uxth.w	lr, ip
 8000dd8:	fbb3 f0f7 	udiv	r0, r3, r7
 8000ddc:	fb07 3610 	mls	r6, r7, r0, r3
 8000de0:	0c0b      	lsrs	r3, r1, #16
 8000de2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000de6:	fb00 f60e 	mul.w	r6, r0, lr
 8000dea:	429e      	cmp	r6, r3
 8000dec:	fa04 f402 	lsl.w	r4, r4, r2
 8000df0:	d908      	bls.n	8000e04 <__udivmoddi4+0x260>
 8000df2:	eb1c 0303 	adds.w	r3, ip, r3
 8000df6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000dfa:	d22f      	bcs.n	8000e5c <__udivmoddi4+0x2b8>
 8000dfc:	429e      	cmp	r6, r3
 8000dfe:	d92d      	bls.n	8000e5c <__udivmoddi4+0x2b8>
 8000e00:	3802      	subs	r0, #2
 8000e02:	4463      	add	r3, ip
 8000e04:	1b9b      	subs	r3, r3, r6
 8000e06:	b289      	uxth	r1, r1
 8000e08:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e0c:	fb07 3316 	mls	r3, r7, r6, r3
 8000e10:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e14:	fb06 f30e 	mul.w	r3, r6, lr
 8000e18:	428b      	cmp	r3, r1
 8000e1a:	d908      	bls.n	8000e2e <__udivmoddi4+0x28a>
 8000e1c:	eb1c 0101 	adds.w	r1, ip, r1
 8000e20:	f106 38ff 	add.w	r8, r6, #4294967295
 8000e24:	d216      	bcs.n	8000e54 <__udivmoddi4+0x2b0>
 8000e26:	428b      	cmp	r3, r1
 8000e28:	d914      	bls.n	8000e54 <__udivmoddi4+0x2b0>
 8000e2a:	3e02      	subs	r6, #2
 8000e2c:	4461      	add	r1, ip
 8000e2e:	1ac9      	subs	r1, r1, r3
 8000e30:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e34:	e738      	b.n	8000ca8 <__udivmoddi4+0x104>
 8000e36:	462e      	mov	r6, r5
 8000e38:	4628      	mov	r0, r5
 8000e3a:	e705      	b.n	8000c48 <__udivmoddi4+0xa4>
 8000e3c:	4606      	mov	r6, r0
 8000e3e:	e6e3      	b.n	8000c08 <__udivmoddi4+0x64>
 8000e40:	4618      	mov	r0, r3
 8000e42:	e6f8      	b.n	8000c36 <__udivmoddi4+0x92>
 8000e44:	454b      	cmp	r3, r9
 8000e46:	d2a9      	bcs.n	8000d9c <__udivmoddi4+0x1f8>
 8000e48:	ebb9 0802 	subs.w	r8, r9, r2
 8000e4c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e50:	3801      	subs	r0, #1
 8000e52:	e7a3      	b.n	8000d9c <__udivmoddi4+0x1f8>
 8000e54:	4646      	mov	r6, r8
 8000e56:	e7ea      	b.n	8000e2e <__udivmoddi4+0x28a>
 8000e58:	4620      	mov	r0, r4
 8000e5a:	e794      	b.n	8000d86 <__udivmoddi4+0x1e2>
 8000e5c:	4640      	mov	r0, r8
 8000e5e:	e7d1      	b.n	8000e04 <__udivmoddi4+0x260>
 8000e60:	46d0      	mov	r8, sl
 8000e62:	e77b      	b.n	8000d5c <__udivmoddi4+0x1b8>
 8000e64:	3b02      	subs	r3, #2
 8000e66:	4461      	add	r1, ip
 8000e68:	e732      	b.n	8000cd0 <__udivmoddi4+0x12c>
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	e709      	b.n	8000c82 <__udivmoddi4+0xde>
 8000e6e:	4464      	add	r4, ip
 8000e70:	3802      	subs	r0, #2
 8000e72:	e742      	b.n	8000cfa <__udivmoddi4+0x156>

08000e74 <__aeabi_idiv0>:
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop

08000e78 <delay_init>:

extern TIM_HandleTypeDef htim1;


void delay_init ()
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start(&htim1);  // change this according to ur setup
 8000e7c:	4802      	ldr	r0, [pc, #8]	; (8000e88 <delay_init+0x10>)
 8000e7e:	f002 fe0d 	bl	8003a9c <HAL_TIM_Base_Start>
}
 8000e82:	bf00      	nop
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	20000480 	.word	0x20000480

08000e8c <delay_us>:

void delay_us (uint16_t delay)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	b083      	sub	sp, #12
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);  // reset the counter
 8000e96:	4b09      	ldr	r3, [pc, #36]	; (8000ebc <delay_us+0x30>)
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	2200      	movs	r2, #0
 8000e9c:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim1))<delay);  // wait for the delay to complete
 8000e9e:	bf00      	nop
 8000ea0:	4b06      	ldr	r3, [pc, #24]	; (8000ebc <delay_us+0x30>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000ea6:	88fb      	ldrh	r3, [r7, #6]
 8000ea8:	429a      	cmp	r2, r3
 8000eaa:	d3f9      	bcc.n	8000ea0 <delay_us+0x14>
}
 8000eac:	bf00      	nop
 8000eae:	bf00      	nop
 8000eb0:	370c      	adds	r7, #12
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb8:	4770      	bx	lr
 8000eba:	bf00      	nop
 8000ebc:	20000480 	.word	0x20000480

08000ec0 <glcd_init>:
// Screen object
static glcd_t glcd;



void glcd_init(void){
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
    glcd_Reset();
 8000ec4:	f000 f990 	bl	80011e8 <glcd_Reset>

    // init display 1 (CS1)
    //glcd_send(DISPLAYOFF, COMMAND_TYPE, DISPLAY1);

    glcd_send(DISPLAYON, COMMAND_TYPE, DISPLAY1);
 8000ec8:	2201      	movs	r2, #1
 8000eca:	2100      	movs	r1, #0
 8000ecc:	203f      	movs	r0, #63	; 0x3f
 8000ece:	f000 f8ab 	bl	8001028 <glcd_send>
    glcd_send(DISPLAY_START_LINE, COMMAND_TYPE, DISPLAY1); // start line 0
 8000ed2:	2201      	movs	r2, #1
 8000ed4:	2100      	movs	r1, #0
 8000ed6:	20c0      	movs	r0, #192	; 0xc0
 8000ed8:	f000 f8a6 	bl	8001028 <glcd_send>
    glcd_send((SET_PAGE_X), COMMAND_TYPE, DISPLAY1); // set page X = 0
 8000edc:	2201      	movs	r2, #1
 8000ede:	2100      	movs	r1, #0
 8000ee0:	20b8      	movs	r0, #184	; 0xb8
 8000ee2:	f000 f8a1 	bl	8001028 <glcd_send>
    glcd_send((SET_ADDRESS_Y), COMMAND_TYPE, DISPLAY1); // set address Y = 0
 8000ee6:	2201      	movs	r2, #1
 8000ee8:	2100      	movs	r1, #0
 8000eea:	2040      	movs	r0, #64	; 0x40
 8000eec:	f000 f89c 	bl	8001028 <glcd_send>

    // init display 2 (CS2)
    //glcd_send(DISPLAYOFF, COMMAND_TYPE, DISPLAY2);

    glcd_send(DISPLAYON, COMMAND_TYPE, DISPLAY2);
 8000ef0:	2202      	movs	r2, #2
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	203f      	movs	r0, #63	; 0x3f
 8000ef6:	f000 f897 	bl	8001028 <glcd_send>
    glcd_send(DISPLAY_START_LINE, COMMAND_TYPE, DISPLAY2); // start line 0
 8000efa:	2202      	movs	r2, #2
 8000efc:	2100      	movs	r1, #0
 8000efe:	20c0      	movs	r0, #192	; 0xc0
 8000f00:	f000 f892 	bl	8001028 <glcd_send>
    glcd_send((SET_PAGE_X), COMMAND_TYPE, DISPLAY2); // set page X = 0
 8000f04:	2202      	movs	r2, #2
 8000f06:	2100      	movs	r1, #0
 8000f08:	20b8      	movs	r0, #184	; 0xb8
 8000f0a:	f000 f88d 	bl	8001028 <glcd_send>
    glcd_send((SET_ADDRESS_Y), COMMAND_TYPE, DISPLAY2); // set address Y = 0
 8000f0e:	2202      	movs	r2, #2
 8000f10:	2100      	movs	r1, #0
 8000f12:	2040      	movs	r0, #64	; 0x40
 8000f14:	f000 f888 	bl	8001028 <glcd_send>
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <glcd_DrawPixel>:

//    Draw one pixel in the screenbuffer
//    X => X Coordinate (uint8_t)
//    Y => Y Coordinate (uint8_t)
//    color => Pixel color-> enum {BLACK , WHITE}
void glcd_DrawPixel(uint8_t x, uint8_t y, LCD_COLOR color) {
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	4603      	mov	r3, r0
 8000f24:	71fb      	strb	r3, [r7, #7]
 8000f26:	460b      	mov	r3, r1
 8000f28:	71bb      	strb	r3, [r7, #6]
 8000f2a:	4613      	mov	r3, r2
 8000f2c:	717b      	strb	r3, [r7, #5]
	uint8_t page = y/8;
 8000f2e:	79bb      	ldrb	r3, [r7, #6]
 8000f30:	08db      	lsrs	r3, r3, #3
 8000f32:	73fb      	strb	r3, [r7, #15]
    if(x >= LCD_WIDTH || y >= LCD_HEIGHT) {// Don't write outside the buffer
 8000f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	db3d      	blt.n	8000fb8 <glcd_DrawPixel+0x9c>
 8000f3c:	79bb      	ldrb	r3, [r7, #6]
 8000f3e:	2b3f      	cmp	r3, #63	; 0x3f
 8000f40:	d83a      	bhi.n	8000fb8 <glcd_DrawPixel+0x9c>
        return;
    }

    // Draw in the right color    
    if(color == WHITE) {
 8000f42:	797b      	ldrb	r3, [r7, #5]
 8000f44:	2b01      	cmp	r3, #1
 8000f46:	d11a      	bne.n	8000f7e <glcd_DrawPixel+0x62>
		lcdBuffer[x][page] |= 1 << (y % 8);
 8000f48:	79fa      	ldrb	r2, [r7, #7]
 8000f4a:	7bfb      	ldrb	r3, [r7, #15]
 8000f4c:	491d      	ldr	r1, [pc, #116]	; (8000fc4 <glcd_DrawPixel+0xa8>)
 8000f4e:	00d2      	lsls	r2, r2, #3
 8000f50:	440a      	add	r2, r1
 8000f52:	4413      	add	r3, r2
 8000f54:	781b      	ldrb	r3, [r3, #0]
 8000f56:	b25a      	sxtb	r2, r3
 8000f58:	79bb      	ldrb	r3, [r7, #6]
 8000f5a:	f003 0307 	and.w	r3, r3, #7
 8000f5e:	2101      	movs	r1, #1
 8000f60:	fa01 f303 	lsl.w	r3, r1, r3
 8000f64:	b25b      	sxtb	r3, r3
 8000f66:	4313      	orrs	r3, r2
 8000f68:	b259      	sxtb	r1, r3
 8000f6a:	79fa      	ldrb	r2, [r7, #7]
 8000f6c:	7bfb      	ldrb	r3, [r7, #15]
 8000f6e:	b2c8      	uxtb	r0, r1
 8000f70:	4914      	ldr	r1, [pc, #80]	; (8000fc4 <glcd_DrawPixel+0xa8>)
 8000f72:	00d2      	lsls	r2, r2, #3
 8000f74:	440a      	add	r2, r1
 8000f76:	4413      	add	r3, r2
 8000f78:	4602      	mov	r2, r0
 8000f7a:	701a      	strb	r2, [r3, #0]
 8000f7c:	e01d      	b.n	8000fba <glcd_DrawPixel+0x9e>
    } else { 
		lcdBuffer[x][page] &= ~(1 << (y % 8));
 8000f7e:	79fa      	ldrb	r2, [r7, #7]
 8000f80:	7bfb      	ldrb	r3, [r7, #15]
 8000f82:	4910      	ldr	r1, [pc, #64]	; (8000fc4 <glcd_DrawPixel+0xa8>)
 8000f84:	00d2      	lsls	r2, r2, #3
 8000f86:	440a      	add	r2, r1
 8000f88:	4413      	add	r3, r2
 8000f8a:	781b      	ldrb	r3, [r3, #0]
 8000f8c:	b25a      	sxtb	r2, r3
 8000f8e:	79bb      	ldrb	r3, [r7, #6]
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	2101      	movs	r1, #1
 8000f96:	fa01 f303 	lsl.w	r3, r1, r3
 8000f9a:	b25b      	sxtb	r3, r3
 8000f9c:	43db      	mvns	r3, r3
 8000f9e:	b25b      	sxtb	r3, r3
 8000fa0:	4013      	ands	r3, r2
 8000fa2:	b259      	sxtb	r1, r3
 8000fa4:	79fa      	ldrb	r2, [r7, #7]
 8000fa6:	7bfb      	ldrb	r3, [r7, #15]
 8000fa8:	b2c8      	uxtb	r0, r1
 8000faa:	4906      	ldr	r1, [pc, #24]	; (8000fc4 <glcd_DrawPixel+0xa8>)
 8000fac:	00d2      	lsls	r2, r2, #3
 8000fae:	440a      	add	r2, r1
 8000fb0:	4413      	add	r3, r2
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	701a      	strb	r2, [r3, #0]
 8000fb6:	e000      	b.n	8000fba <glcd_DrawPixel+0x9e>
        return;
 8000fb8:	bf00      	nop
    }
}
 8000fba:	3714      	adds	r7, #20
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc2:	4770      	bx	lr
 8000fc4:	20000030 	.word	0x20000030

08000fc8 <glcd_Fill>:


// Fill the whole screen with the given color
// color => Pixel color-> enum {BLACK , WHITE}
void glcd_Fill(LCD_COLOR color) {
 8000fc8:	b480      	push	{r7}
 8000fca:	b087      	sub	sp, #28
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	71fb      	strb	r3, [r7, #7]
    uint32_t i, j;
    uint8_t newColor = (color == BLACK) ? 0x00 : 0xFF;
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d101      	bne.n	8000fdc <glcd_Fill+0x14>
 8000fd8:	2300      	movs	r3, #0
 8000fda:	e000      	b.n	8000fde <glcd_Fill+0x16>
 8000fdc:	23ff      	movs	r3, #255	; 0xff
 8000fde:	73fb      	strb	r3, [r7, #15]

    for(i = 0; i < NUM_PAGES; i++) {
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	617b      	str	r3, [r7, #20]
 8000fe4:	e013      	b.n	800100e <glcd_Fill+0x46>
		for(j = 0; j < LCD_WIDTH; j++){
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	613b      	str	r3, [r7, #16]
 8000fea:	e00a      	b.n	8001002 <glcd_Fill+0x3a>
			lcdBuffer[j][i] = newColor;
 8000fec:	4a0d      	ldr	r2, [pc, #52]	; (8001024 <glcd_Fill+0x5c>)
 8000fee:	693b      	ldr	r3, [r7, #16]
 8000ff0:	00db      	lsls	r3, r3, #3
 8000ff2:	441a      	add	r2, r3
 8000ff4:	697b      	ldr	r3, [r7, #20]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	7bfa      	ldrb	r2, [r7, #15]
 8000ffa:	701a      	strb	r2, [r3, #0]
		for(j = 0; j < LCD_WIDTH; j++){
 8000ffc:	693b      	ldr	r3, [r7, #16]
 8000ffe:	3301      	adds	r3, #1
 8001000:	613b      	str	r3, [r7, #16]
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	2b7f      	cmp	r3, #127	; 0x7f
 8001006:	d9f1      	bls.n	8000fec <glcd_Fill+0x24>
    for(i = 0; i < NUM_PAGES; i++) {
 8001008:	697b      	ldr	r3, [r7, #20]
 800100a:	3301      	adds	r3, #1
 800100c:	617b      	str	r3, [r7, #20]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	2b07      	cmp	r3, #7
 8001012:	d9e8      	bls.n	8000fe6 <glcd_Fill+0x1e>
		}        
    }
} 
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	371c      	adds	r7, #28
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
 8001022:	bf00      	nop
 8001024:	20000030 	.word	0x20000030

08001028 <glcd_send>:

// write data to GLCD using parallel port
// data => Data/command to write to GLCD (uint8_t)
// cmd_data_sel => Pin Data/Instruction to GLCD (uint8_t), #defines => {COMMAND_TYPE = 1, DATA_TYPE = 0}
// CSsel => Pines CS1, CS2 to GLCD (uint8_t), select wich display to write, #defines => {DISPLAY1 = 1, DISPLAY2 = 2}
void glcd_send(uint8_t data, uint8_t cmd_data_sel, uint8_t CSsel){
 8001028:	b580      	push	{r7, lr}
 800102a:	b082      	sub	sp, #8
 800102c:	af00      	add	r7, sp, #0
 800102e:	4603      	mov	r3, r0
 8001030:	71fb      	strb	r3, [r7, #7]
 8001032:	460b      	mov	r3, r1
 8001034:	71bb      	strb	r3, [r7, #6]
 8001036:	4613      	mov	r3, r2
 8001038:	717b      	strb	r3, [r7, #5]
	// check busy flag
	//uint8_t status_glcd = glcd_busyCheck(CSsel);
	HAL_GPIO_WritePin(LCD_E_Port, LCD_E_Pin, GPIO_PIN_RESET);// E = 0
 800103a:	2200      	movs	r2, #0
 800103c:	2140      	movs	r1, #64	; 0x40
 800103e:	4837      	ldr	r0, [pc, #220]	; (800111c <glcd_send+0xf4>)
 8001040:	f002 f884 	bl	800314c <HAL_GPIO_WritePin>
	delay_us(1);
 8001044:	2001      	movs	r0, #1
 8001046:	f7ff ff21 	bl	8000e8c <delay_us>
	//chip select 1 or 2
	if(CSsel == DISPLAY1){
 800104a:	797b      	ldrb	r3, [r7, #5]
 800104c:	2b01      	cmp	r3, #1
 800104e:	d10a      	bne.n	8001066 <glcd_send+0x3e>
		HAL_GPIO_WritePin(LCD_CS1_Port, LCD_CS1_Pin, GPIO_PIN_RESET);
 8001050:	2200      	movs	r2, #0
 8001052:	2110      	movs	r1, #16
 8001054:	4831      	ldr	r0, [pc, #196]	; (800111c <glcd_send+0xf4>)
 8001056:	f002 f879 	bl	800314c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS2_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 800105a:	2201      	movs	r2, #1
 800105c:	2120      	movs	r1, #32
 800105e:	482f      	ldr	r0, [pc, #188]	; (800111c <glcd_send+0xf4>)
 8001060:	f002 f874 	bl	800314c <HAL_GPIO_WritePin>
 8001064:	e009      	b.n	800107a <glcd_send+0x52>
	} else {
		HAL_GPIO_WritePin(LCD_CS1_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 8001066:	2201      	movs	r2, #1
 8001068:	2110      	movs	r1, #16
 800106a:	482c      	ldr	r0, [pc, #176]	; (800111c <glcd_send+0xf4>)
 800106c:	f002 f86e 	bl	800314c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(LCD_CS2_Port, LCD_CS2_Pin, GPIO_PIN_RESET);
 8001070:	2200      	movs	r2, #0
 8001072:	2120      	movs	r1, #32
 8001074:	4829      	ldr	r0, [pc, #164]	; (800111c <glcd_send+0xf4>)
 8001076:	f002 f869 	bl	800314c <HAL_GPIO_WritePin>
	}
	HAL_GPIO_WritePin(LCD_RW_Port, LCD_RW_Pin, GPIO_PIN_RESET);// RW = 0
 800107a:	2200      	movs	r2, #0
 800107c:	2108      	movs	r1, #8
 800107e:	4827      	ldr	r0, [pc, #156]	; (800111c <glcd_send+0xf4>)
 8001080:	f002 f864 	bl	800314c <HAL_GPIO_WritePin>
	//Command or data pin
	if(cmd_data_sel == COMMAND_TYPE){
 8001084:	79bb      	ldrb	r3, [r7, #6]
 8001086:	2b00      	cmp	r3, #0
 8001088:	d105      	bne.n	8001096 <glcd_send+0x6e>
		HAL_GPIO_WritePin(LCD_DI_Port, LCD_DI_Pin, GPIO_PIN_RESET);//COMMAND
 800108a:	2200      	movs	r2, #0
 800108c:	2104      	movs	r1, #4
 800108e:	4823      	ldr	r0, [pc, #140]	; (800111c <glcd_send+0xf4>)
 8001090:	f002 f85c 	bl	800314c <HAL_GPIO_WritePin>
 8001094:	e004      	b.n	80010a0 <glcd_send+0x78>
	} else {
		HAL_GPIO_WritePin(LCD_DI_Port, LCD_DI_Pin, GPIO_PIN_SET);//DATA
 8001096:	2201      	movs	r2, #1
 8001098:	2104      	movs	r1, #4
 800109a:	4820      	ldr	r0, [pc, #128]	; (800111c <glcd_send+0xf4>)
 800109c:	f002 f856 	bl	800314c <HAL_GPIO_WritePin>
	}
	delay_us(1);
 80010a0:	2001      	movs	r0, #1
 80010a2:	f7ff fef3 	bl	8000e8c <delay_us>
	delay_us(1);
 80010a6:	2001      	movs	r0, #1
 80010a8:	f7ff fef0 	bl	8000e8c <delay_us>
	HAL_GPIO_WritePin(LCD_E_Port, LCD_E_Pin, GPIO_PIN_SET);// E = 1
 80010ac:	2201      	movs	r2, #1
 80010ae:	2140      	movs	r1, #64	; 0x40
 80010b0:	481a      	ldr	r0, [pc, #104]	; (800111c <glcd_send+0xf4>)
 80010b2:	f002 f84b 	bl	800314c <HAL_GPIO_WritePin>
	delay_us(1);
 80010b6:	2001      	movs	r0, #1
 80010b8:	f7ff fee8 	bl	8000e8c <delay_us>
	
	//write lcd
	GPIOB->ODR &= 0xffffff00; //clear data pins
 80010bc:	4b18      	ldr	r3, [pc, #96]	; (8001120 <glcd_send+0xf8>)
 80010be:	695b      	ldr	r3, [r3, #20]
 80010c0:	4a17      	ldr	r2, [pc, #92]	; (8001120 <glcd_send+0xf8>)
 80010c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80010c6:	6153      	str	r3, [r2, #20]
	GPIOB->ODR |= data;       //write data to data pins
 80010c8:	4b15      	ldr	r3, [pc, #84]	; (8001120 <glcd_send+0xf8>)
 80010ca:	695a      	ldr	r2, [r3, #20]
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4914      	ldr	r1, [pc, #80]	; (8001120 <glcd_send+0xf8>)
 80010d0:	4313      	orrs	r3, r2
 80010d2:	614b      	str	r3, [r1, #20]
	
	//pulse E = Enable pin
	delay_us(1);
 80010d4:	2001      	movs	r0, #1
 80010d6:	f7ff fed9 	bl	8000e8c <delay_us>
	HAL_GPIO_WritePin(LCD_E_Port, LCD_E_Pin, GPIO_PIN_RESET);// E = 0 , data latch on E falling
 80010da:	2200      	movs	r2, #0
 80010dc:	2140      	movs	r1, #64	; 0x40
 80010de:	480f      	ldr	r0, [pc, #60]	; (800111c <glcd_send+0xf4>)
 80010e0:	f002 f834 	bl	800314c <HAL_GPIO_WritePin>
	delay_us(1);
 80010e4:	2001      	movs	r0, #1
 80010e6:	f7ff fed1 	bl	8000e8c <delay_us>

	// DESELECT CHIPS
	HAL_GPIO_WritePin(LCD_CS1_Port, LCD_CS1_Pin, GPIO_PIN_SET);
 80010ea:	2201      	movs	r2, #1
 80010ec:	2110      	movs	r1, #16
 80010ee:	480b      	ldr	r0, [pc, #44]	; (800111c <glcd_send+0xf4>)
 80010f0:	f002 f82c 	bl	800314c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(LCD_CS2_Port, LCD_CS2_Pin, GPIO_PIN_SET);
 80010f4:	2201      	movs	r2, #1
 80010f6:	2120      	movs	r1, #32
 80010f8:	4808      	ldr	r0, [pc, #32]	; (800111c <glcd_send+0xf4>)
 80010fa:	f002 f827 	bl	800314c <HAL_GPIO_WritePin>
	delay_us(1);
 80010fe:	2001      	movs	r0, #1
 8001100:	f7ff fec4 	bl	8000e8c <delay_us>
	HAL_GPIO_WritePin(LCD_RW_Port, LCD_RW_Pin, GPIO_PIN_SET);// RW = 1
 8001104:	2201      	movs	r2, #1
 8001106:	2108      	movs	r1, #8
 8001108:	4804      	ldr	r0, [pc, #16]	; (800111c <glcd_send+0xf4>)
 800110a:	f002 f81f 	bl	800314c <HAL_GPIO_WritePin>
	delay_us(1);
 800110e:	2001      	movs	r0, #1
 8001110:	f7ff febc 	bl	8000e8c <delay_us>

}
 8001114:	bf00      	nop
 8001116:	3708      	adds	r7, #8
 8001118:	46bd      	mov	sp, r7
 800111a:	bd80      	pop	{r7, pc}
 800111c:	40020000 	.word	0x40020000
 8001120:	40020400 	.word	0x40020400

08001124 <glcd_UpdateScreen>:


// Write the screenbuffer with changes to the screen/GLCD
void glcd_UpdateScreen(void) {
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
	uint8_t counter, i;
    for(i = 0; i < NUM_PAGES; i++) { // pages, y
 800112a:	2300      	movs	r3, #0
 800112c:	71bb      	strb	r3, [r7, #6]
 800112e:	e024      	b.n	800117a <glcd_UpdateScreen+0x56>
    	glcd_send((SET_PAGE_X+i), COMMAND_TYPE, DISPLAY2);//set X address, page
 8001130:	79bb      	ldrb	r3, [r7, #6]
 8001132:	3b48      	subs	r3, #72	; 0x48
 8001134:	b2db      	uxtb	r3, r3
 8001136:	2202      	movs	r2, #2
 8001138:	2100      	movs	r1, #0
 800113a:	4618      	mov	r0, r3
 800113c:	f7ff ff74 	bl	8001028 <glcd_send>
    	glcd_send(SET_ADDRESS_Y, COMMAND_TYPE, DISPLAY2);//Y address = 0
 8001140:	2202      	movs	r2, #2
 8001142:	2100      	movs	r1, #0
 8001144:	2040      	movs	r0, #64	; 0x40
 8001146:	f7ff ff6f 	bl	8001028 <glcd_send>
		for(counter = 0; counter<64 ; counter++){
 800114a:	2300      	movs	r3, #0
 800114c:	71fb      	strb	r3, [r7, #7]
 800114e:	e00e      	b.n	800116e <glcd_UpdateScreen+0x4a>
			glcd_send(lcdBuffer[counter][i], DATA_TYPE, DISPLAY2);//Y addres increment automatically after every write
 8001150:	79fa      	ldrb	r2, [r7, #7]
 8001152:	79bb      	ldrb	r3, [r7, #6]
 8001154:	4923      	ldr	r1, [pc, #140]	; (80011e4 <glcd_UpdateScreen+0xc0>)
 8001156:	00d2      	lsls	r2, r2, #3
 8001158:	440a      	add	r2, r1
 800115a:	4413      	add	r3, r2
 800115c:	781b      	ldrb	r3, [r3, #0]
 800115e:	2202      	movs	r2, #2
 8001160:	2101      	movs	r1, #1
 8001162:	4618      	mov	r0, r3
 8001164:	f7ff ff60 	bl	8001028 <glcd_send>
		for(counter = 0; counter<64 ; counter++){
 8001168:	79fb      	ldrb	r3, [r7, #7]
 800116a:	3301      	adds	r3, #1
 800116c:	71fb      	strb	r3, [r7, #7]
 800116e:	79fb      	ldrb	r3, [r7, #7]
 8001170:	2b3f      	cmp	r3, #63	; 0x3f
 8001172:	d9ed      	bls.n	8001150 <glcd_UpdateScreen+0x2c>
    for(i = 0; i < NUM_PAGES; i++) { // pages, y
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	3301      	adds	r3, #1
 8001178:	71bb      	strb	r3, [r7, #6]
 800117a:	79bb      	ldrb	r3, [r7, #6]
 800117c:	2b07      	cmp	r3, #7
 800117e:	d9d7      	bls.n	8001130 <glcd_UpdateScreen+0xc>
		}
    }
    for(i = 0; i < NUM_PAGES; i++) { // pages, y
 8001180:	2300      	movs	r3, #0
 8001182:	71bb      	strb	r3, [r7, #6]
 8001184:	e025      	b.n	80011d2 <glcd_UpdateScreen+0xae>
		glcd_send((SET_PAGE_X+i), COMMAND_TYPE, DISPLAY1);
 8001186:	79bb      	ldrb	r3, [r7, #6]
 8001188:	3b48      	subs	r3, #72	; 0x48
 800118a:	b2db      	uxtb	r3, r3
 800118c:	2201      	movs	r2, #1
 800118e:	2100      	movs	r1, #0
 8001190:	4618      	mov	r0, r3
 8001192:	f7ff ff49 	bl	8001028 <glcd_send>
		glcd_send(SET_ADDRESS_Y, COMMAND_TYPE, DISPLAY1);
 8001196:	2201      	movs	r2, #1
 8001198:	2100      	movs	r1, #0
 800119a:	2040      	movs	r0, #64	; 0x40
 800119c:	f7ff ff44 	bl	8001028 <glcd_send>
		for(counter = 64; counter<128 ; counter++){
 80011a0:	2340      	movs	r3, #64	; 0x40
 80011a2:	71fb      	strb	r3, [r7, #7]
 80011a4:	e00e      	b.n	80011c4 <glcd_UpdateScreen+0xa0>
			glcd_send(lcdBuffer[counter][i], DATA_TYPE, DISPLAY1);
 80011a6:	79fa      	ldrb	r2, [r7, #7]
 80011a8:	79bb      	ldrb	r3, [r7, #6]
 80011aa:	490e      	ldr	r1, [pc, #56]	; (80011e4 <glcd_UpdateScreen+0xc0>)
 80011ac:	00d2      	lsls	r2, r2, #3
 80011ae:	440a      	add	r2, r1
 80011b0:	4413      	add	r3, r2
 80011b2:	781b      	ldrb	r3, [r3, #0]
 80011b4:	2201      	movs	r2, #1
 80011b6:	2101      	movs	r1, #1
 80011b8:	4618      	mov	r0, r3
 80011ba:	f7ff ff35 	bl	8001028 <glcd_send>
		for(counter = 64; counter<128 ; counter++){
 80011be:	79fb      	ldrb	r3, [r7, #7]
 80011c0:	3301      	adds	r3, #1
 80011c2:	71fb      	strb	r3, [r7, #7]
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	daec      	bge.n	80011a6 <glcd_UpdateScreen+0x82>
    for(i = 0; i < NUM_PAGES; i++) { // pages, y
 80011cc:	79bb      	ldrb	r3, [r7, #6]
 80011ce:	3301      	adds	r3, #1
 80011d0:	71bb      	strb	r3, [r7, #6]
 80011d2:	79bb      	ldrb	r3, [r7, #6]
 80011d4:	2b07      	cmp	r3, #7
 80011d6:	d9d6      	bls.n	8001186 <glcd_UpdateScreen+0x62>
		}
	}
}
 80011d8:	bf00      	nop
 80011da:	bf00      	nop
 80011dc:	3708      	adds	r7, #8
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	20000030 	.word	0x20000030

080011e8 <glcd_Reset>:


//Function to reset the display pulsing RST pin
void glcd_Reset(void) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LCD_RST_Port, LCD_RST_Pin, GPIO_PIN_RESET);
 80011ec:	2200      	movs	r2, #0
 80011ee:	2180      	movs	r1, #128	; 0x80
 80011f0:	4807      	ldr	r0, [pc, #28]	; (8001210 <glcd_Reset+0x28>)
 80011f2:	f001 ffab 	bl	800314c <HAL_GPIO_WritePin>
	delay_us(10);
 80011f6:	200a      	movs	r0, #10
 80011f8:	f7ff fe48 	bl	8000e8c <delay_us>
	HAL_GPIO_WritePin(LCD_RST_Port, LCD_RST_Pin, GPIO_PIN_SET);
 80011fc:	2201      	movs	r2, #1
 80011fe:	2180      	movs	r1, #128	; 0x80
 8001200:	4803      	ldr	r0, [pc, #12]	; (8001210 <glcd_Reset+0x28>)
 8001202:	f001 ffa3 	bl	800314c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 8001206:	2064      	movs	r0, #100	; 0x64
 8001208:	f001 fab0 	bl	800276c <HAL_Delay>
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	40020000 	.word	0x40020000

08001214 <glcd_WriteChar>:

// Draw 1 char to the screen buffer
// ch       => Character to draw (char)
// Font     => Font to use (FontDef)
// color    => Pixel color -> enum {BLACK , WHITE}
char glcd_WriteChar(char ch, FontDef Font, LCD_COLOR color) {
 8001214:	b490      	push	{r4, r7}
 8001216:	b086      	sub	sp, #24
 8001218:	af00      	add	r7, sp, #0
 800121a:	4604      	mov	r4, r0
 800121c:	1d38      	adds	r0, r7, #4
 800121e:	e880 0006 	stmia.w	r0, {r1, r2}
 8001222:	461a      	mov	r2, r3
 8001224:	4623      	mov	r3, r4
 8001226:	73fb      	strb	r3, [r7, #15]
 8001228:	4613      	mov	r3, r2
 800122a:	73bb      	strb	r3, [r7, #14]
    uint8_t i, b, page;
    uint16_t index;

    // Check if character is valid
    if (ch < 32 || ch > 126)
 800122c:	7bfb      	ldrb	r3, [r7, #15]
 800122e:	2b1f      	cmp	r3, #31
 8001230:	d902      	bls.n	8001238 <glcd_WriteChar+0x24>
 8001232:	7bfb      	ldrb	r3, [r7, #15]
 8001234:	2b7e      	cmp	r3, #126	; 0x7e
 8001236:	d901      	bls.n	800123c <glcd_WriteChar+0x28>
        return 0;
 8001238:	2300      	movs	r3, #0
 800123a:	e044      	b.n	80012c6 <glcd_WriteChar+0xb2>
    
    // Check remaining space on current line
    if (LCD_WIDTH < (glcd.CurrentX + Font.FontWidth) ||
 800123c:	4b24      	ldr	r3, [pc, #144]	; (80012d0 <glcd_WriteChar+0xbc>)
 800123e:	881b      	ldrh	r3, [r3, #0]
 8001240:	461a      	mov	r2, r3
 8001242:	793b      	ldrb	r3, [r7, #4]
 8001244:	4413      	add	r3, r2
 8001246:	2b80      	cmp	r3, #128	; 0x80
 8001248:	dc06      	bgt.n	8001258 <glcd_WriteChar+0x44>
        LCD_HEIGHT < (glcd.CurrentY + Font.FontHeight))
 800124a:	4b21      	ldr	r3, [pc, #132]	; (80012d0 <glcd_WriteChar+0xbc>)
 800124c:	885b      	ldrh	r3, [r3, #2]
 800124e:	461a      	mov	r2, r3
 8001250:	797b      	ldrb	r3, [r7, #5]
 8001252:	4413      	add	r3, r2
    if (LCD_WIDTH < (glcd.CurrentX + Font.FontWidth) ||
 8001254:	2b40      	cmp	r3, #64	; 0x40
 8001256:	dd01      	ble.n	800125c <glcd_WriteChar+0x48>
    {
        // Not enough space on current line
        return 0;
 8001258:	2300      	movs	r3, #0
 800125a:	e034      	b.n	80012c6 <glcd_WriteChar+0xb2>
    }

    page = glcd.CurrentY / 8;
 800125c:	4b1c      	ldr	r3, [pc, #112]	; (80012d0 <glcd_WriteChar+0xbc>)
 800125e:	885b      	ldrh	r3, [r3, #2]
 8001260:	08db      	lsrs	r3, r3, #3
 8001262:	b29b      	uxth	r3, r3
 8001264:	75bb      	strb	r3, [r7, #22]
    // Use the font to write
    for(i = 0; i < Font.FontWidth; i++) {//Font.FontHeight = 8, Font.FontWidth = 5
 8001266:	2300      	movs	r3, #0
 8001268:	75fb      	strb	r3, [r7, #23]
 800126a:	e01d      	b.n	80012a8 <glcd_WriteChar+0x94>
    	index = ((ch - 32) * 5) + i;
 800126c:	7bfb      	ldrb	r3, [r7, #15]
 800126e:	3b20      	subs	r3, #32
 8001270:	b29b      	uxth	r3, r3
 8001272:	461a      	mov	r2, r3
 8001274:	0092      	lsls	r2, r2, #2
 8001276:	4413      	add	r3, r2
 8001278:	b29a      	uxth	r2, r3
 800127a:	7dfb      	ldrb	r3, [r7, #23]
 800127c:	b29b      	uxth	r3, r3
 800127e:	4413      	add	r3, r2
 8001280:	82bb      	strh	r3, [r7, #20]
        b = fontArray[index];
 8001282:	8abb      	ldrh	r3, [r7, #20]
 8001284:	4a13      	ldr	r2, [pc, #76]	; (80012d4 <glcd_WriteChar+0xc0>)
 8001286:	5cd3      	ldrb	r3, [r2, r3]
 8001288:	74fb      	strb	r3, [r7, #19]
        lcdBuffer[glcd.CurrentX+i][page]= b;
 800128a:	4b11      	ldr	r3, [pc, #68]	; (80012d0 <glcd_WriteChar+0xbc>)
 800128c:	881b      	ldrh	r3, [r3, #0]
 800128e:	461a      	mov	r2, r3
 8001290:	7dfb      	ldrb	r3, [r7, #23]
 8001292:	441a      	add	r2, r3
 8001294:	7dbb      	ldrb	r3, [r7, #22]
 8001296:	4910      	ldr	r1, [pc, #64]	; (80012d8 <glcd_WriteChar+0xc4>)
 8001298:	00d2      	lsls	r2, r2, #3
 800129a:	440a      	add	r2, r1
 800129c:	4413      	add	r3, r2
 800129e:	7cfa      	ldrb	r2, [r7, #19]
 80012a0:	701a      	strb	r2, [r3, #0]
    for(i = 0; i < Font.FontWidth; i++) {//Font.FontHeight = 8, Font.FontWidth = 5
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
 80012a4:	3301      	adds	r3, #1
 80012a6:	75fb      	strb	r3, [r7, #23]
 80012a8:	793b      	ldrb	r3, [r7, #4]
 80012aa:	7dfa      	ldrb	r2, [r7, #23]
 80012ac:	429a      	cmp	r2, r3
 80012ae:	d3dd      	bcc.n	800126c <glcd_WriteChar+0x58>
    	glcd.CurrentX = 0;
    	glcd.CurrentY += Font.FontHeight;
    }
 */
    // The current space is now taken
     glcd.CurrentX += Font.FontWidth+1;
 80012b0:	4b07      	ldr	r3, [pc, #28]	; (80012d0 <glcd_WriteChar+0xbc>)
 80012b2:	881a      	ldrh	r2, [r3, #0]
 80012b4:	793b      	ldrb	r3, [r7, #4]
 80012b6:	b29b      	uxth	r3, r3
 80012b8:	4413      	add	r3, r2
 80012ba:	b29b      	uxth	r3, r3
 80012bc:	3301      	adds	r3, #1
 80012be:	b29a      	uxth	r2, r3
 80012c0:	4b03      	ldr	r3, [pc, #12]	; (80012d0 <glcd_WriteChar+0xbc>)
 80012c2:	801a      	strh	r2, [r3, #0]

    // Return written char for validation
    return ch;
 80012c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3718      	adds	r7, #24
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bc90      	pop	{r4, r7}
 80012ce:	4770      	bx	lr
 80012d0:	20000430 	.word	0x20000430
 80012d4:	080051bc 	.word	0x080051bc
 80012d8:	20000030 	.word	0x20000030

080012dc <glcd_WriteString>:
// Write full string to screenbuffer
// str   => pointer to the string (char*)
// Font  => Font definition (FontDef) from glcd_fonts.h
// color => Pixel color -> enum {BLACK , WHITE}
// remember to actualize the screen with glcd_UpdateScreen()
char glcd_WriteString(char* str, FontDef Font, LCD_COLOR color) {
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	60f8      	str	r0, [r7, #12]
 80012e4:	1d38      	adds	r0, r7, #4
 80012e6:	e880 0006 	stmia.w	r0, {r1, r2}
 80012ea:	70fb      	strb	r3, [r7, #3]
    // Write until null-byte
    while (*str) {
 80012ec:	e012      	b.n	8001314 <glcd_WriteString+0x38>
        if (glcd_WriteChar(*str, Font, color) != *str) {
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	7818      	ldrb	r0, [r3, #0]
 80012f2:	78fb      	ldrb	r3, [r7, #3]
 80012f4:	1d3a      	adds	r2, r7, #4
 80012f6:	ca06      	ldmia	r2, {r1, r2}
 80012f8:	f7ff ff8c 	bl	8001214 <glcd_WriteChar>
 80012fc:	4603      	mov	r3, r0
 80012fe:	461a      	mov	r2, r3
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	781b      	ldrb	r3, [r3, #0]
 8001304:	429a      	cmp	r2, r3
 8001306:	d002      	beq.n	800130e <glcd_WriteString+0x32>
            // Char could not be written
            return *str;
 8001308:	68fb      	ldr	r3, [r7, #12]
 800130a:	781b      	ldrb	r3, [r3, #0]
 800130c:	e008      	b.n	8001320 <glcd_WriteString+0x44>
        }
        // Next char
        str++;
 800130e:	68fb      	ldr	r3, [r7, #12]
 8001310:	3301      	adds	r3, #1
 8001312:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d1e8      	bne.n	80012ee <glcd_WriteString+0x12>
    }
    
    // Everything ok
    return *str;
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	781b      	ldrb	r3, [r3, #0]
}
 8001320:	4618      	mov	r0, r3
 8001322:	3710      	adds	r7, #16
 8001324:	46bd      	mov	sp, r7
 8001326:	bd80      	pop	{r7, pc}

08001328 <glcd_SetCursor>:


// Position the cursor on the lcdBuffer 
void glcd_SetCursor(uint8_t x, uint8_t y) {
 8001328:	b480      	push	{r7}
 800132a:	b083      	sub	sp, #12
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	460a      	mov	r2, r1
 8001332:	71fb      	strb	r3, [r7, #7]
 8001334:	4613      	mov	r3, r2
 8001336:	71bb      	strb	r3, [r7, #6]
    glcd.CurrentX = x;
 8001338:	79fb      	ldrb	r3, [r7, #7]
 800133a:	b29a      	uxth	r2, r3
 800133c:	4b05      	ldr	r3, [pc, #20]	; (8001354 <glcd_SetCursor+0x2c>)
 800133e:	801a      	strh	r2, [r3, #0]
    glcd.CurrentY = y;
 8001340:	79bb      	ldrb	r3, [r7, #6]
 8001342:	b29a      	uxth	r2, r3
 8001344:	4b03      	ldr	r3, [pc, #12]	; (8001354 <glcd_SetCursor+0x2c>)
 8001346:	805a      	strh	r2, [r3, #2]
}
 8001348:	bf00      	nop
 800134a:	370c      	adds	r7, #12
 800134c:	46bd      	mov	sp, r7
 800134e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001352:	4770      	bx	lr
 8001354:	20000430 	.word	0x20000430

08001358 <glcd_Line>:


// Draw line by Bresenhem's algorithm
// color => Pixel color -> enum {BLACK , WHITE}
// remember to actualize the screen with glcd_UpdateScreen()
void glcd_Line(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, LCD_COLOR color) {
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b089      	sub	sp, #36	; 0x24
 800135c:	af00      	add	r7, sp, #0
 800135e:	4604      	mov	r4, r0
 8001360:	4608      	mov	r0, r1
 8001362:	4611      	mov	r1, r2
 8001364:	461a      	mov	r2, r3
 8001366:	4623      	mov	r3, r4
 8001368:	71fb      	strb	r3, [r7, #7]
 800136a:	4603      	mov	r3, r0
 800136c:	71bb      	strb	r3, [r7, #6]
 800136e:	460b      	mov	r3, r1
 8001370:	717b      	strb	r3, [r7, #5]
 8001372:	4613      	mov	r3, r2
 8001374:	713b      	strb	r3, [r7, #4]
  int32_t deltaX = abs(x2 - x1);
 8001376:	797a      	ldrb	r2, [r7, #5]
 8001378:	79fb      	ldrb	r3, [r7, #7]
 800137a:	1ad3      	subs	r3, r2, r3
 800137c:	2b00      	cmp	r3, #0
 800137e:	bfb8      	it	lt
 8001380:	425b      	neglt	r3, r3
 8001382:	61bb      	str	r3, [r7, #24]
  int32_t deltaY = abs(y2 - y1);
 8001384:	793a      	ldrb	r2, [r7, #4]
 8001386:	79bb      	ldrb	r3, [r7, #6]
 8001388:	1ad3      	subs	r3, r2, r3
 800138a:	2b00      	cmp	r3, #0
 800138c:	bfb8      	it	lt
 800138e:	425b      	neglt	r3, r3
 8001390:	617b      	str	r3, [r7, #20]
  int32_t signX = ((x1 < x2) ? 1 : -1);
 8001392:	79fa      	ldrb	r2, [r7, #7]
 8001394:	797b      	ldrb	r3, [r7, #5]
 8001396:	429a      	cmp	r2, r3
 8001398:	d201      	bcs.n	800139e <glcd_Line+0x46>
 800139a:	2301      	movs	r3, #1
 800139c:	e001      	b.n	80013a2 <glcd_Line+0x4a>
 800139e:	f04f 33ff 	mov.w	r3, #4294967295
 80013a2:	613b      	str	r3, [r7, #16]
  int32_t signY = ((y1 < y2) ? 1 : -1);
 80013a4:	79ba      	ldrb	r2, [r7, #6]
 80013a6:	793b      	ldrb	r3, [r7, #4]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	d201      	bcs.n	80013b0 <glcd_Line+0x58>
 80013ac:	2301      	movs	r3, #1
 80013ae:	e001      	b.n	80013b4 <glcd_Line+0x5c>
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
 80013b4:	60fb      	str	r3, [r7, #12]
  int32_t error = deltaX - deltaY;
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	697b      	ldr	r3, [r7, #20]
 80013ba:	1ad3      	subs	r3, r2, r3
 80013bc:	61fb      	str	r3, [r7, #28]
  int32_t error2;
    
  glcd_DrawPixel(x2, y2, color);
 80013be:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80013c2:	7939      	ldrb	r1, [r7, #4]
 80013c4:	797b      	ldrb	r3, [r7, #5]
 80013c6:	4618      	mov	r0, r3
 80013c8:	f7ff fda8 	bl	8000f1c <glcd_DrawPixel>
    while((x1 != x2) || (y1 != y2))
 80013cc:	e024      	b.n	8001418 <glcd_Line+0xc0>
    {
		glcd_DrawPixel(x1, y1, color);
 80013ce:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80013d2:	79b9      	ldrb	r1, [r7, #6]
 80013d4:	79fb      	ldrb	r3, [r7, #7]
 80013d6:	4618      	mov	r0, r3
 80013d8:	f7ff fda0 	bl	8000f1c <glcd_DrawPixel>
		error2 = error * 2;
 80013dc:	69fb      	ldr	r3, [r7, #28]
 80013de:	005b      	lsls	r3, r3, #1
 80013e0:	60bb      	str	r3, [r7, #8]
		if(error2 > -deltaY)
 80013e2:	697b      	ldr	r3, [r7, #20]
 80013e4:	425b      	negs	r3, r3
 80013e6:	68ba      	ldr	r2, [r7, #8]
 80013e8:	429a      	cmp	r2, r3
 80013ea:	dd08      	ble.n	80013fe <glcd_Line+0xa6>
		{
		  error -= deltaY;
 80013ec:	69fa      	ldr	r2, [r7, #28]
 80013ee:	697b      	ldr	r3, [r7, #20]
 80013f0:	1ad3      	subs	r3, r2, r3
 80013f2:	61fb      	str	r3, [r7, #28]
		  x1 += signX;
 80013f4:	693b      	ldr	r3, [r7, #16]
 80013f6:	b2da      	uxtb	r2, r3
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	4413      	add	r3, r2
 80013fc:	71fb      	strb	r3, [r7, #7]
		else
		{
			/*nothing to do*/
		}

		if(error2 < deltaX)
 80013fe:	68ba      	ldr	r2, [r7, #8]
 8001400:	69bb      	ldr	r3, [r7, #24]
 8001402:	429a      	cmp	r2, r3
 8001404:	da08      	bge.n	8001418 <glcd_Line+0xc0>
		{
		  error += deltaX;
 8001406:	69fa      	ldr	r2, [r7, #28]
 8001408:	69bb      	ldr	r3, [r7, #24]
 800140a:	4413      	add	r3, r2
 800140c:	61fb      	str	r3, [r7, #28]
		  y1 += signY;
 800140e:	68fb      	ldr	r3, [r7, #12]
 8001410:	b2da      	uxtb	r2, r3
 8001412:	79bb      	ldrb	r3, [r7, #6]
 8001414:	4413      	add	r3, r2
 8001416:	71bb      	strb	r3, [r7, #6]
    while((x1 != x2) || (y1 != y2))
 8001418:	79fa      	ldrb	r2, [r7, #7]
 800141a:	797b      	ldrb	r3, [r7, #5]
 800141c:	429a      	cmp	r2, r3
 800141e:	d1d6      	bne.n	80013ce <glcd_Line+0x76>
 8001420:	79ba      	ldrb	r2, [r7, #6]
 8001422:	793b      	ldrb	r3, [r7, #4]
 8001424:	429a      	cmp	r2, r3
 8001426:	d1d2      	bne.n	80013ce <glcd_Line+0x76>
		else
		{
			/*nothing to do*/
		}
   }
  return;
 8001428:	bf00      	nop
}
 800142a:	3724      	adds	r7, #36	; 0x24
 800142c:	46bd      	mov	sp, r7
 800142e:	bd90      	pop	{r4, r7, pc}

08001430 <glcd_Polyline>:


//Draw polyline
// color => Pixel color -> enum {BLACK , WHITE}
// remember to actualize the screen with glcd_UpdateScreen()
void glcd_Polyline(const glcd_VERTEX *par_vertex, uint16_t par_size, LCD_COLOR color) {
 8001430:	b590      	push	{r4, r7, lr}
 8001432:	b087      	sub	sp, #28
 8001434:	af02      	add	r7, sp, #8
 8001436:	6078      	str	r0, [r7, #4]
 8001438:	460b      	mov	r3, r1
 800143a:	807b      	strh	r3, [r7, #2]
 800143c:	4613      	mov	r3, r2
 800143e:	707b      	strb	r3, [r7, #1]
  uint16_t i;
  if(par_vertex != 0){
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d02a      	beq.n	800149c <glcd_Polyline+0x6c>
    for(i = 1; i < par_size; i++){
 8001446:	2301      	movs	r3, #1
 8001448:	81fb      	strh	r3, [r7, #14]
 800144a:	e022      	b.n	8001492 <glcd_Polyline+0x62>
      glcd_Line(par_vertex[i - 1].x, par_vertex[i - 1].y, par_vertex[i].x, par_vertex[i].y, color);
 800144c:	89fb      	ldrh	r3, [r7, #14]
 800144e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001452:	3b01      	subs	r3, #1
 8001454:	005b      	lsls	r3, r3, #1
 8001456:	687a      	ldr	r2, [r7, #4]
 8001458:	4413      	add	r3, r2
 800145a:	7818      	ldrb	r0, [r3, #0]
 800145c:	89fb      	ldrh	r3, [r7, #14]
 800145e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8001462:	3b01      	subs	r3, #1
 8001464:	005b      	lsls	r3, r3, #1
 8001466:	687a      	ldr	r2, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	7859      	ldrb	r1, [r3, #1]
 800146c:	89fb      	ldrh	r3, [r7, #14]
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	687a      	ldr	r2, [r7, #4]
 8001472:	4413      	add	r3, r2
 8001474:	781c      	ldrb	r4, [r3, #0]
 8001476:	89fb      	ldrh	r3, [r7, #14]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	687a      	ldr	r2, [r7, #4]
 800147c:	4413      	add	r3, r2
 800147e:	785a      	ldrb	r2, [r3, #1]
 8001480:	787b      	ldrb	r3, [r7, #1]
 8001482:	9300      	str	r3, [sp, #0]
 8001484:	4613      	mov	r3, r2
 8001486:	4622      	mov	r2, r4
 8001488:	f7ff ff66 	bl	8001358 <glcd_Line>
    for(i = 1; i < par_size; i++){
 800148c:	89fb      	ldrh	r3, [r7, #14]
 800148e:	3301      	adds	r3, #1
 8001490:	81fb      	strh	r3, [r7, #14]
 8001492:	89fa      	ldrh	r2, [r7, #14]
 8001494:	887b      	ldrh	r3, [r7, #2]
 8001496:	429a      	cmp	r2, r3
 8001498:	d3d8      	bcc.n	800144c <glcd_Polyline+0x1c>
  }
  else
  {
    /*nothing to do*/
  }
  return;
 800149a:	bf00      	nop
 800149c:	bf00      	nop
}
 800149e:	3714      	adds	r7, #20
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd90      	pop	{r4, r7, pc}
 80014a4:	0000      	movs	r0, r0
	...

080014a8 <glcd_DegToRad>:


/*Convert Degrees to Radians*/
static float glcd_DegToRad(float par_deg) {
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	ed87 0a01 	vstr	s0, [r7, #4]
    return par_deg * 3.14 / 180.0;
 80014b2:	6878      	ldr	r0, [r7, #4]
 80014b4:	f7fe fff4 	bl	80004a0 <__aeabi_f2d>
 80014b8:	a30e      	add	r3, pc, #56	; (adr r3, 80014f4 <glcd_DegToRad+0x4c>)
 80014ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014be:	f7ff f847 	bl	8000550 <__aeabi_dmul>
 80014c2:	4602      	mov	r2, r0
 80014c4:	460b      	mov	r3, r1
 80014c6:	4610      	mov	r0, r2
 80014c8:	4619      	mov	r1, r3
 80014ca:	f04f 0200 	mov.w	r2, #0
 80014ce:	4b08      	ldr	r3, [pc, #32]	; (80014f0 <glcd_DegToRad+0x48>)
 80014d0:	f7ff f968 	bl	80007a4 <__aeabi_ddiv>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	4610      	mov	r0, r2
 80014da:	4619      	mov	r1, r3
 80014dc:	f7ff fafa 	bl	8000ad4 <__aeabi_d2f>
 80014e0:	4603      	mov	r3, r0
 80014e2:	ee07 3a90 	vmov	s15, r3
}
 80014e6:	eeb0 0a67 	vmov.f32	s0, s15
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	40668000 	.word	0x40668000
 80014f4:	51eb851f 	.word	0x51eb851f
 80014f8:	40091eb8 	.word	0x40091eb8

080014fc <glcd_NormalizeTo0_360>:


/*Normalize degree to [0;360]*/
static uint16_t glcd_NormalizeTo0_360(uint16_t par_deg) {
 80014fc:	b480      	push	{r7}
 80014fe:	b085      	sub	sp, #20
 8001500:	af00      	add	r7, sp, #0
 8001502:	4603      	mov	r3, r0
 8001504:	80fb      	strh	r3, [r7, #6]
  uint16_t loc_angle;
  if(par_deg <= 360)
 8001506:	88fb      	ldrh	r3, [r7, #6]
 8001508:	f5b3 7fb4 	cmp.w	r3, #360	; 0x168
 800150c:	d802      	bhi.n	8001514 <glcd_NormalizeTo0_360+0x18>
  {
    loc_angle = par_deg;
 800150e:	88fb      	ldrh	r3, [r7, #6]
 8001510:	81fb      	strh	r3, [r7, #14]
 8001512:	e013      	b.n	800153c <glcd_NormalizeTo0_360+0x40>
  }
  else
  {
    loc_angle = par_deg % 360;
 8001514:	88fb      	ldrh	r3, [r7, #6]
 8001516:	08da      	lsrs	r2, r3, #3
 8001518:	490c      	ldr	r1, [pc, #48]	; (800154c <glcd_NormalizeTo0_360+0x50>)
 800151a:	fba1 1202 	umull	r1, r2, r1, r2
 800151e:	0892      	lsrs	r2, r2, #2
 8001520:	f44f 71b4 	mov.w	r1, #360	; 0x168
 8001524:	fb01 f202 	mul.w	r2, r1, r2
 8001528:	1a9b      	subs	r3, r3, r2
 800152a:	81fb      	strh	r3, [r7, #14]
    loc_angle = ((par_deg != 0)?par_deg:360);
 800152c:	88fb      	ldrh	r3, [r7, #6]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d001      	beq.n	8001536 <glcd_NormalizeTo0_360+0x3a>
 8001532:	88fb      	ldrh	r3, [r7, #6]
 8001534:	e001      	b.n	800153a <glcd_NormalizeTo0_360+0x3e>
 8001536:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800153a:	81fb      	strh	r3, [r7, #14]
  }
  return loc_angle;
 800153c:	89fb      	ldrh	r3, [r7, #14]
}
 800153e:	4618      	mov	r0, r3
 8001540:	3714      	adds	r7, #20
 8001542:	46bd      	mov	sp, r7
 8001544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001548:	4770      	bx	lr
 800154a:	bf00      	nop
 800154c:	16c16c17 	.word	0x16c16c17

08001550 <glcd_DrawArc>:
 * start_angle in degree
 * sweep in degree
 * color => Pixel color -> enum {BLACK , WHITE}
 * remember to actualize the screen with glcd_UpdateScreen()
 */
void glcd_DrawArc(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, LCD_COLOR color) {
 8001550:	b5b0      	push	{r4, r5, r7, lr}
 8001552:	b08a      	sub	sp, #40	; 0x28
 8001554:	af02      	add	r7, sp, #8
 8001556:	4604      	mov	r4, r0
 8001558:	4608      	mov	r0, r1
 800155a:	4611      	mov	r1, r2
 800155c:	461a      	mov	r2, r3
 800155e:	4623      	mov	r3, r4
 8001560:	71fb      	strb	r3, [r7, #7]
 8001562:	4603      	mov	r3, r0
 8001564:	71bb      	strb	r3, [r7, #6]
 8001566:	460b      	mov	r3, r1
 8001568:	717b      	strb	r3, [r7, #5]
 800156a:	4613      	mov	r3, r2
 800156c:	807b      	strh	r3, [r7, #2]
    static const uint8_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1,xp2;
    uint8_t yp1,yp2;
    uint32_t count = 0;
 800156e:	2300      	movs	r3, #0
 8001570:	61fb      	str	r3, [r7, #28]
    uint32_t loc_sweep = 0;
 8001572:	2300      	movs	r3, #0
 8001574:	617b      	str	r3, [r7, #20]
    float rad;
    
    loc_sweep = glcd_NormalizeTo0_360(sweep);
 8001576:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001578:	4618      	mov	r0, r3
 800157a:	f7ff ffbf 	bl	80014fc <glcd_NormalizeTo0_360>
 800157e:	4603      	mov	r3, r0
 8001580:	617b      	str	r3, [r7, #20]
    
    count = (glcd_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 8001582:	887b      	ldrh	r3, [r7, #2]
 8001584:	4618      	mov	r0, r3
 8001586:	f7ff ffb9 	bl	80014fc <glcd_NormalizeTo0_360>
 800158a:	4603      	mov	r3, r0
 800158c:	461a      	mov	r2, r3
 800158e:	4b77      	ldr	r3, [pc, #476]	; (800176c <glcd_DrawArc+0x21c>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	fb02 f303 	mul.w	r3, r2, r3
 8001596:	4a76      	ldr	r2, [pc, #472]	; (8001770 <glcd_DrawArc+0x220>)
 8001598:	fb82 1203 	smull	r1, r2, r2, r3
 800159c:	441a      	add	r2, r3
 800159e:	1212      	asrs	r2, r2, #8
 80015a0:	17db      	asrs	r3, r3, #31
 80015a2:	1ad3      	subs	r3, r2, r3
 80015a4:	61fb      	str	r3, [r7, #28]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80015a6:	4b71      	ldr	r3, [pc, #452]	; (800176c <glcd_DrawArc+0x21c>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	461a      	mov	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	fb02 f303 	mul.w	r3, r2, r3
 80015b2:	08db      	lsrs	r3, r3, #3
 80015b4:	4a6f      	ldr	r2, [pc, #444]	; (8001774 <glcd_DrawArc+0x224>)
 80015b6:	fba2 2303 	umull	r2, r3, r2, r3
 80015ba:	089b      	lsrs	r3, r3, #2
 80015bc:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 80015be:	697b      	ldr	r3, [r7, #20]
 80015c0:	ee07 3a90 	vmov	s15, r3
 80015c4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	ee07 3a90 	vmov	s15, r3
 80015ce:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015d6:	edc7 7a03 	vstr	s15, [r7, #12]
    while(count < approx_segments)
 80015da:	e0be      	b.n	800175a <glcd_DrawArc+0x20a>
    {
        rad = glcd_DegToRad(count*approx_degree);
 80015dc:	69fb      	ldr	r3, [r7, #28]
 80015de:	ee07 3a90 	vmov	s15, r3
 80015e2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80015e6:	edd7 7a03 	vldr	s15, [r7, #12]
 80015ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80015ee:	eeb0 0a67 	vmov.f32	s0, s15
 80015f2:	f7ff ff59 	bl	80014a8 <glcd_DegToRad>
 80015f6:	ed87 0a06 	vstr	s0, [r7, #24]
        xp1 = x + (int8_t)(sin(rad)*radius);
 80015fa:	69b8      	ldr	r0, [r7, #24]
 80015fc:	f7fe ff50 	bl	80004a0 <__aeabi_f2d>
 8001600:	4602      	mov	r2, r0
 8001602:	460b      	mov	r3, r1
 8001604:	ec43 2b10 	vmov	d0, r2, r3
 8001608:	f002 fd72 	bl	80040f0 <sin>
 800160c:	ec55 4b10 	vmov	r4, r5, d0
 8001610:	797b      	ldrb	r3, [r7, #5]
 8001612:	4618      	mov	r0, r3
 8001614:	f7fe ff32 	bl	800047c <__aeabi_i2d>
 8001618:	4602      	mov	r2, r0
 800161a:	460b      	mov	r3, r1
 800161c:	4620      	mov	r0, r4
 800161e:	4629      	mov	r1, r5
 8001620:	f7fe ff96 	bl	8000550 <__aeabi_dmul>
 8001624:	4602      	mov	r2, r0
 8001626:	460b      	mov	r3, r1
 8001628:	4610      	mov	r0, r2
 800162a:	4619      	mov	r1, r3
 800162c:	f7ff fa2a 	bl	8000a84 <__aeabi_d2iz>
 8001630:	4603      	mov	r3, r0
 8001632:	b25b      	sxtb	r3, r3
 8001634:	b2da      	uxtb	r2, r3
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	4413      	add	r3, r2
 800163a:	72fb      	strb	r3, [r7, #11]
        yp1 = y + (int8_t)(cos(rad)*radius);    
 800163c:	69b8      	ldr	r0, [r7, #24]
 800163e:	f7fe ff2f 	bl	80004a0 <__aeabi_f2d>
 8001642:	4602      	mov	r2, r0
 8001644:	460b      	mov	r3, r1
 8001646:	ec43 2b10 	vmov	d0, r2, r3
 800164a:	f002 fcfd 	bl	8004048 <cos>
 800164e:	ec55 4b10 	vmov	r4, r5, d0
 8001652:	797b      	ldrb	r3, [r7, #5]
 8001654:	4618      	mov	r0, r3
 8001656:	f7fe ff11 	bl	800047c <__aeabi_i2d>
 800165a:	4602      	mov	r2, r0
 800165c:	460b      	mov	r3, r1
 800165e:	4620      	mov	r0, r4
 8001660:	4629      	mov	r1, r5
 8001662:	f7fe ff75 	bl	8000550 <__aeabi_dmul>
 8001666:	4602      	mov	r2, r0
 8001668:	460b      	mov	r3, r1
 800166a:	4610      	mov	r0, r2
 800166c:	4619      	mov	r1, r3
 800166e:	f7ff fa09 	bl	8000a84 <__aeabi_d2iz>
 8001672:	4603      	mov	r3, r0
 8001674:	b25b      	sxtb	r3, r3
 8001676:	b2da      	uxtb	r2, r3
 8001678:	79bb      	ldrb	r3, [r7, #6]
 800167a:	4413      	add	r3, r2
 800167c:	72bb      	strb	r3, [r7, #10]
        count++;
 800167e:	69fb      	ldr	r3, [r7, #28]
 8001680:	3301      	adds	r3, #1
 8001682:	61fb      	str	r3, [r7, #28]
        if(count != approx_segments)
 8001684:	69fa      	ldr	r2, [r7, #28]
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	429a      	cmp	r2, r3
 800168a:	d00f      	beq.n	80016ac <glcd_DrawArc+0x15c>
        {
            rad = glcd_DegToRad(count*approx_degree);
 800168c:	69fb      	ldr	r3, [r7, #28]
 800168e:	ee07 3a90 	vmov	s15, r3
 8001692:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001696:	edd7 7a03 	vldr	s15, [r7, #12]
 800169a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800169e:	eeb0 0a67 	vmov.f32	s0, s15
 80016a2:	f7ff ff01 	bl	80014a8 <glcd_DegToRad>
 80016a6:	ed87 0a06 	vstr	s0, [r7, #24]
 80016aa:	e00a      	b.n	80016c2 <glcd_DrawArc+0x172>
        }
        else
        {            
            rad = glcd_DegToRad(loc_sweep);
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	ee07 3a90 	vmov	s15, r3
 80016b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80016b6:	eeb0 0a67 	vmov.f32	s0, s15
 80016ba:	f7ff fef5 	bl	80014a8 <glcd_DegToRad>
 80016be:	ed87 0a06 	vstr	s0, [r7, #24]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 80016c2:	69b8      	ldr	r0, [r7, #24]
 80016c4:	f7fe feec 	bl	80004a0 <__aeabi_f2d>
 80016c8:	4602      	mov	r2, r0
 80016ca:	460b      	mov	r3, r1
 80016cc:	ec43 2b10 	vmov	d0, r2, r3
 80016d0:	f002 fd0e 	bl	80040f0 <sin>
 80016d4:	ec55 4b10 	vmov	r4, r5, d0
 80016d8:	797b      	ldrb	r3, [r7, #5]
 80016da:	4618      	mov	r0, r3
 80016dc:	f7fe fece 	bl	800047c <__aeabi_i2d>
 80016e0:	4602      	mov	r2, r0
 80016e2:	460b      	mov	r3, r1
 80016e4:	4620      	mov	r0, r4
 80016e6:	4629      	mov	r1, r5
 80016e8:	f7fe ff32 	bl	8000550 <__aeabi_dmul>
 80016ec:	4602      	mov	r2, r0
 80016ee:	460b      	mov	r3, r1
 80016f0:	4610      	mov	r0, r2
 80016f2:	4619      	mov	r1, r3
 80016f4:	f7ff f9c6 	bl	8000a84 <__aeabi_d2iz>
 80016f8:	4603      	mov	r3, r0
 80016fa:	b25b      	sxtb	r3, r3
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	79fb      	ldrb	r3, [r7, #7]
 8001700:	4413      	add	r3, r2
 8001702:	727b      	strb	r3, [r7, #9]
        yp2 = y + (int8_t)(cos(rad)*radius);    
 8001704:	69b8      	ldr	r0, [r7, #24]
 8001706:	f7fe fecb 	bl	80004a0 <__aeabi_f2d>
 800170a:	4602      	mov	r2, r0
 800170c:	460b      	mov	r3, r1
 800170e:	ec43 2b10 	vmov	d0, r2, r3
 8001712:	f002 fc99 	bl	8004048 <cos>
 8001716:	ec55 4b10 	vmov	r4, r5, d0
 800171a:	797b      	ldrb	r3, [r7, #5]
 800171c:	4618      	mov	r0, r3
 800171e:	f7fe fead 	bl	800047c <__aeabi_i2d>
 8001722:	4602      	mov	r2, r0
 8001724:	460b      	mov	r3, r1
 8001726:	4620      	mov	r0, r4
 8001728:	4629      	mov	r1, r5
 800172a:	f7fe ff11 	bl	8000550 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4610      	mov	r0, r2
 8001734:	4619      	mov	r1, r3
 8001736:	f7ff f9a5 	bl	8000a84 <__aeabi_d2iz>
 800173a:	4603      	mov	r3, r0
 800173c:	b25b      	sxtb	r3, r3
 800173e:	b2da      	uxtb	r2, r3
 8001740:	79bb      	ldrb	r3, [r7, #6]
 8001742:	4413      	add	r3, r2
 8001744:	723b      	strb	r3, [r7, #8]
        glcd_Line(xp1,yp1,xp2,yp2,color);
 8001746:	7a3c      	ldrb	r4, [r7, #8]
 8001748:	7a7a      	ldrb	r2, [r7, #9]
 800174a:	7ab9      	ldrb	r1, [r7, #10]
 800174c:	7af8      	ldrb	r0, [r7, #11]
 800174e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001752:	9300      	str	r3, [sp, #0]
 8001754:	4623      	mov	r3, r4
 8001756:	f7ff fdff 	bl	8001358 <glcd_Line>
    while(count < approx_segments)
 800175a:	69fa      	ldr	r2, [r7, #28]
 800175c:	693b      	ldr	r3, [r7, #16]
 800175e:	429a      	cmp	r2, r3
 8001760:	f4ff af3c 	bcc.w	80015dc <glcd_DrawArc+0x8c>
    }
    
    return;
 8001764:	bf00      	nop
}
 8001766:	3720      	adds	r7, #32
 8001768:	46bd      	mov	sp, r7
 800176a:	bdb0      	pop	{r4, r5, r7, pc}
 800176c:	08005392 	.word	0x08005392
 8001770:	b60b60b7 	.word	0xb60b60b7
 8001774:	16c16c17 	.word	0x16c16c17

08001778 <glcd_DrawArcWithRadiusLine>:
 * start_angle: start angle in degree
 * sweep: finish angle in degree
 * color => Pixel color -> enum {BLACK , WHITE}
 * remember to actualize the screen with glcd_UpdateScreen() * 
 */
void glcd_DrawArcWithRadiusLine(uint8_t x, uint8_t y, uint8_t radius, uint16_t start_angle, uint16_t sweep, LCD_COLOR color) {
 8001778:	b5b0      	push	{r4, r5, r7, lr}
 800177a:	b08c      	sub	sp, #48	; 0x30
 800177c:	af02      	add	r7, sp, #8
 800177e:	4604      	mov	r4, r0
 8001780:	4608      	mov	r0, r1
 8001782:	4611      	mov	r1, r2
 8001784:	461a      	mov	r2, r3
 8001786:	4623      	mov	r3, r4
 8001788:	71fb      	strb	r3, [r7, #7]
 800178a:	4603      	mov	r3, r0
 800178c:	71bb      	strb	r3, [r7, #6]
 800178e:	460b      	mov	r3, r1
 8001790:	717b      	strb	r3, [r7, #5]
 8001792:	4613      	mov	r3, r2
 8001794:	807b      	strh	r3, [r7, #2]
    static const uint8_t CIRCLE_APPROXIMATION_SEGMENTS = 36;
    float approx_degree;
    uint32_t approx_segments;
    uint8_t xp1 = 0;
 8001796:	2300      	movs	r3, #0
 8001798:	76fb      	strb	r3, [r7, #27]
    uint8_t xp2 = 0;
 800179a:	2300      	movs	r3, #0
 800179c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    uint8_t yp1 = 0;
 80017a0:	2300      	movs	r3, #0
 80017a2:	76bb      	strb	r3, [r7, #26]
    uint8_t yp2 = 0;
 80017a4:	2300      	movs	r3, #0
 80017a6:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    uint32_t count = 0;
 80017aa:	2300      	movs	r3, #0
 80017ac:	623b      	str	r3, [r7, #32]
    uint32_t loc_sweep = 0;
 80017ae:	2300      	movs	r3, #0
 80017b0:	617b      	str	r3, [r7, #20]
    float rad;
    
    loc_sweep = glcd_NormalizeTo0_360(sweep);
 80017b2:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80017b4:	4618      	mov	r0, r3
 80017b6:	f7ff fea1 	bl	80014fc <glcd_NormalizeTo0_360>
 80017ba:	4603      	mov	r3, r0
 80017bc:	617b      	str	r3, [r7, #20]
    
    count = (glcd_NormalizeTo0_360(start_angle) * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80017be:	887b      	ldrh	r3, [r7, #2]
 80017c0:	4618      	mov	r0, r3
 80017c2:	f7ff fe9b 	bl	80014fc <glcd_NormalizeTo0_360>
 80017c6:	4603      	mov	r3, r0
 80017c8:	461a      	mov	r2, r3
 80017ca:	4bad      	ldr	r3, [pc, #692]	; (8001a80 <glcd_DrawArcWithRadiusLine+0x308>)
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	fb02 f303 	mul.w	r3, r2, r3
 80017d2:	4aac      	ldr	r2, [pc, #688]	; (8001a84 <glcd_DrawArcWithRadiusLine+0x30c>)
 80017d4:	fb82 1203 	smull	r1, r2, r2, r3
 80017d8:	441a      	add	r2, r3
 80017da:	1212      	asrs	r2, r2, #8
 80017dc:	17db      	asrs	r3, r3, #31
 80017de:	1ad3      	subs	r3, r2, r3
 80017e0:	623b      	str	r3, [r7, #32]
    approx_segments = (loc_sweep * CIRCLE_APPROXIMATION_SEGMENTS) / 360;
 80017e2:	4ba7      	ldr	r3, [pc, #668]	; (8001a80 <glcd_DrawArcWithRadiusLine+0x308>)
 80017e4:	781b      	ldrb	r3, [r3, #0]
 80017e6:	461a      	mov	r2, r3
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fb02 f303 	mul.w	r3, r2, r3
 80017ee:	08db      	lsrs	r3, r3, #3
 80017f0:	4aa5      	ldr	r2, [pc, #660]	; (8001a88 <glcd_DrawArcWithRadiusLine+0x310>)
 80017f2:	fba2 2303 	umull	r2, r3, r2, r3
 80017f6:	089b      	lsrs	r3, r3, #2
 80017f8:	613b      	str	r3, [r7, #16]
    approx_degree = loc_sweep / (float)approx_segments;
 80017fa:	697b      	ldr	r3, [r7, #20]
 80017fc:	ee07 3a90 	vmov	s15, r3
 8001800:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	ee07 3a90 	vmov	s15, r3
 800180a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800180e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001812:	edc7 7a03 	vstr	s15, [r7, #12]

    rad = glcd_DegToRad(count*approx_degree);
 8001816:	6a3b      	ldr	r3, [r7, #32]
 8001818:	ee07 3a90 	vmov	s15, r3
 800181c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001820:	edd7 7a03 	vldr	s15, [r7, #12]
 8001824:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001828:	eeb0 0a67 	vmov.f32	s0, s15
 800182c:	f7ff fe3c 	bl	80014a8 <glcd_DegToRad>
 8001830:	ed87 0a07 	vstr	s0, [r7, #28]
    uint8_t first_point_x = x + (int8_t)(sin(rad)*radius);
 8001834:	69f8      	ldr	r0, [r7, #28]
 8001836:	f7fe fe33 	bl	80004a0 <__aeabi_f2d>
 800183a:	4602      	mov	r2, r0
 800183c:	460b      	mov	r3, r1
 800183e:	ec43 2b10 	vmov	d0, r2, r3
 8001842:	f002 fc55 	bl	80040f0 <sin>
 8001846:	ec55 4b10 	vmov	r4, r5, d0
 800184a:	797b      	ldrb	r3, [r7, #5]
 800184c:	4618      	mov	r0, r3
 800184e:	f7fe fe15 	bl	800047c <__aeabi_i2d>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4620      	mov	r0, r4
 8001858:	4629      	mov	r1, r5
 800185a:	f7fe fe79 	bl	8000550 <__aeabi_dmul>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff f90d 	bl	8000a84 <__aeabi_d2iz>
 800186a:	4603      	mov	r3, r0
 800186c:	b25b      	sxtb	r3, r3
 800186e:	b2da      	uxtb	r2, r3
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	4413      	add	r3, r2
 8001874:	72fb      	strb	r3, [r7, #11]
    uint8_t first_point_y = y + (int8_t)(cos(rad)*radius);   
 8001876:	69f8      	ldr	r0, [r7, #28]
 8001878:	f7fe fe12 	bl	80004a0 <__aeabi_f2d>
 800187c:	4602      	mov	r2, r0
 800187e:	460b      	mov	r3, r1
 8001880:	ec43 2b10 	vmov	d0, r2, r3
 8001884:	f002 fbe0 	bl	8004048 <cos>
 8001888:	ec55 4b10 	vmov	r4, r5, d0
 800188c:	797b      	ldrb	r3, [r7, #5]
 800188e:	4618      	mov	r0, r3
 8001890:	f7fe fdf4 	bl	800047c <__aeabi_i2d>
 8001894:	4602      	mov	r2, r0
 8001896:	460b      	mov	r3, r1
 8001898:	4620      	mov	r0, r4
 800189a:	4629      	mov	r1, r5
 800189c:	f7fe fe58 	bl	8000550 <__aeabi_dmul>
 80018a0:	4602      	mov	r2, r0
 80018a2:	460b      	mov	r3, r1
 80018a4:	4610      	mov	r0, r2
 80018a6:	4619      	mov	r1, r3
 80018a8:	f7ff f8ec 	bl	8000a84 <__aeabi_d2iz>
 80018ac:	4603      	mov	r3, r0
 80018ae:	b25b      	sxtb	r3, r3
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	79bb      	ldrb	r3, [r7, #6]
 80018b4:	4413      	add	r3, r2
 80018b6:	72bb      	strb	r3, [r7, #10]
    while (count < approx_segments) {
 80018b8:	e0c2      	b.n	8001a40 <glcd_DrawArcWithRadiusLine+0x2c8>
        rad = glcd_DegToRad(count*approx_degree);
 80018ba:	6a3b      	ldr	r3, [r7, #32]
 80018bc:	ee07 3a90 	vmov	s15, r3
 80018c0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80018c4:	edd7 7a03 	vldr	s15, [r7, #12]
 80018c8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80018cc:	eeb0 0a67 	vmov.f32	s0, s15
 80018d0:	f7ff fdea 	bl	80014a8 <glcd_DegToRad>
 80018d4:	ed87 0a07 	vstr	s0, [r7, #28]
        xp1 = x + (int8_t)(sin(rad)*radius);
 80018d8:	69f8      	ldr	r0, [r7, #28]
 80018da:	f7fe fde1 	bl	80004a0 <__aeabi_f2d>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	ec43 2b10 	vmov	d0, r2, r3
 80018e6:	f002 fc03 	bl	80040f0 <sin>
 80018ea:	ec55 4b10 	vmov	r4, r5, d0
 80018ee:	797b      	ldrb	r3, [r7, #5]
 80018f0:	4618      	mov	r0, r3
 80018f2:	f7fe fdc3 	bl	800047c <__aeabi_i2d>
 80018f6:	4602      	mov	r2, r0
 80018f8:	460b      	mov	r3, r1
 80018fa:	4620      	mov	r0, r4
 80018fc:	4629      	mov	r1, r5
 80018fe:	f7fe fe27 	bl	8000550 <__aeabi_dmul>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4610      	mov	r0, r2
 8001908:	4619      	mov	r1, r3
 800190a:	f7ff f8bb 	bl	8000a84 <__aeabi_d2iz>
 800190e:	4603      	mov	r3, r0
 8001910:	b25b      	sxtb	r3, r3
 8001912:	b2da      	uxtb	r2, r3
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	4413      	add	r3, r2
 8001918:	76fb      	strb	r3, [r7, #27]
        yp1 = y + (int8_t)(cos(rad)*radius);    
 800191a:	69f8      	ldr	r0, [r7, #28]
 800191c:	f7fe fdc0 	bl	80004a0 <__aeabi_f2d>
 8001920:	4602      	mov	r2, r0
 8001922:	460b      	mov	r3, r1
 8001924:	ec43 2b10 	vmov	d0, r2, r3
 8001928:	f002 fb8e 	bl	8004048 <cos>
 800192c:	ec55 4b10 	vmov	r4, r5, d0
 8001930:	797b      	ldrb	r3, [r7, #5]
 8001932:	4618      	mov	r0, r3
 8001934:	f7fe fda2 	bl	800047c <__aeabi_i2d>
 8001938:	4602      	mov	r2, r0
 800193a:	460b      	mov	r3, r1
 800193c:	4620      	mov	r0, r4
 800193e:	4629      	mov	r1, r5
 8001940:	f7fe fe06 	bl	8000550 <__aeabi_dmul>
 8001944:	4602      	mov	r2, r0
 8001946:	460b      	mov	r3, r1
 8001948:	4610      	mov	r0, r2
 800194a:	4619      	mov	r1, r3
 800194c:	f7ff f89a 	bl	8000a84 <__aeabi_d2iz>
 8001950:	4603      	mov	r3, r0
 8001952:	b25b      	sxtb	r3, r3
 8001954:	b2da      	uxtb	r2, r3
 8001956:	79bb      	ldrb	r3, [r7, #6]
 8001958:	4413      	add	r3, r2
 800195a:	76bb      	strb	r3, [r7, #26]
        count++;
 800195c:	6a3b      	ldr	r3, [r7, #32]
 800195e:	3301      	adds	r3, #1
 8001960:	623b      	str	r3, [r7, #32]
        if (count != approx_segments) {
 8001962:	6a3a      	ldr	r2, [r7, #32]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	429a      	cmp	r2, r3
 8001968:	d00f      	beq.n	800198a <glcd_DrawArcWithRadiusLine+0x212>
            rad = glcd_DegToRad(count*approx_degree);
 800196a:	6a3b      	ldr	r3, [r7, #32]
 800196c:	ee07 3a90 	vmov	s15, r3
 8001970:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001974:	edd7 7a03 	vldr	s15, [r7, #12]
 8001978:	ee67 7a27 	vmul.f32	s15, s14, s15
 800197c:	eeb0 0a67 	vmov.f32	s0, s15
 8001980:	f7ff fd92 	bl	80014a8 <glcd_DegToRad>
 8001984:	ed87 0a07 	vstr	s0, [r7, #28]
 8001988:	e00a      	b.n	80019a0 <glcd_DrawArcWithRadiusLine+0x228>
        }
        else {            
            rad = glcd_DegToRad(loc_sweep);
 800198a:	697b      	ldr	r3, [r7, #20]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001994:	eeb0 0a67 	vmov.f32	s0, s15
 8001998:	f7ff fd86 	bl	80014a8 <glcd_DegToRad>
 800199c:	ed87 0a07 	vstr	s0, [r7, #28]
        }
        xp2 = x + (int8_t)(sin(rad)*radius);
 80019a0:	69f8      	ldr	r0, [r7, #28]
 80019a2:	f7fe fd7d 	bl	80004a0 <__aeabi_f2d>
 80019a6:	4602      	mov	r2, r0
 80019a8:	460b      	mov	r3, r1
 80019aa:	ec43 2b10 	vmov	d0, r2, r3
 80019ae:	f002 fb9f 	bl	80040f0 <sin>
 80019b2:	ec55 4b10 	vmov	r4, r5, d0
 80019b6:	797b      	ldrb	r3, [r7, #5]
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7fe fd5f 	bl	800047c <__aeabi_i2d>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4620      	mov	r0, r4
 80019c4:	4629      	mov	r1, r5
 80019c6:	f7fe fdc3 	bl	8000550 <__aeabi_dmul>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	4610      	mov	r0, r2
 80019d0:	4619      	mov	r1, r3
 80019d2:	f7ff f857 	bl	8000a84 <__aeabi_d2iz>
 80019d6:	4603      	mov	r3, r0
 80019d8:	b25b      	sxtb	r3, r3
 80019da:	b2da      	uxtb	r2, r3
 80019dc:	79fb      	ldrb	r3, [r7, #7]
 80019de:	4413      	add	r3, r2
 80019e0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        yp2 = y + (int8_t)(cos(rad)*radius);    
 80019e4:	69f8      	ldr	r0, [r7, #28]
 80019e6:	f7fe fd5b 	bl	80004a0 <__aeabi_f2d>
 80019ea:	4602      	mov	r2, r0
 80019ec:	460b      	mov	r3, r1
 80019ee:	ec43 2b10 	vmov	d0, r2, r3
 80019f2:	f002 fb29 	bl	8004048 <cos>
 80019f6:	ec55 4b10 	vmov	r4, r5, d0
 80019fa:	797b      	ldrb	r3, [r7, #5]
 80019fc:	4618      	mov	r0, r3
 80019fe:	f7fe fd3d 	bl	800047c <__aeabi_i2d>
 8001a02:	4602      	mov	r2, r0
 8001a04:	460b      	mov	r3, r1
 8001a06:	4620      	mov	r0, r4
 8001a08:	4629      	mov	r1, r5
 8001a0a:	f7fe fda1 	bl	8000550 <__aeabi_dmul>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	460b      	mov	r3, r1
 8001a12:	4610      	mov	r0, r2
 8001a14:	4619      	mov	r1, r3
 8001a16:	f7ff f835 	bl	8000a84 <__aeabi_d2iz>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	b25b      	sxtb	r3, r3
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	79bb      	ldrb	r3, [r7, #6]
 8001a22:	4413      	add	r3, r2
 8001a24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
        glcd_Line(xp1,yp1,xp2,yp2,color);
 8001a28:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8001a2c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001a30:	7eb9      	ldrb	r1, [r7, #26]
 8001a32:	7ef8      	ldrb	r0, [r7, #27]
 8001a34:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a38:	9300      	str	r3, [sp, #0]
 8001a3a:	4623      	mov	r3, r4
 8001a3c:	f7ff fc8c 	bl	8001358 <glcd_Line>
    while (count < approx_segments) {
 8001a40:	6a3a      	ldr	r2, [r7, #32]
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	f4ff af38 	bcc.w	80018ba <glcd_DrawArcWithRadiusLine+0x142>
    }
    
    // Radius line
    glcd_Line(x,y,first_point_x,first_point_y,color);
 8001a4a:	7abc      	ldrb	r4, [r7, #10]
 8001a4c:	7afa      	ldrb	r2, [r7, #11]
 8001a4e:	79b9      	ldrb	r1, [r7, #6]
 8001a50:	79f8      	ldrb	r0, [r7, #7]
 8001a52:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a56:	9300      	str	r3, [sp, #0]
 8001a58:	4623      	mov	r3, r4
 8001a5a:	f7ff fc7d 	bl	8001358 <glcd_Line>
    glcd_Line(x,y,xp2,yp2,color);
 8001a5e:	f897 4026 	ldrb.w	r4, [r7, #38]	; 0x26
 8001a62:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 8001a66:	79b9      	ldrb	r1, [r7, #6]
 8001a68:	79f8      	ldrb	r0, [r7, #7]
 8001a6a:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	4623      	mov	r3, r4
 8001a72:	f7ff fc71 	bl	8001358 <glcd_Line>
    return;
 8001a76:	bf00      	nop
}
 8001a78:	3728      	adds	r7, #40	; 0x28
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bdb0      	pop	{r4, r5, r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	08005393 	.word	0x08005393
 8001a84:	b60b60b7 	.word	0xb60b60b7
 8001a88:	16c16c17 	.word	0x16c16c17

08001a8c <glcd_DrawCircle>:


//Draw circle by Bresenhem's algorithm
// color => Pixel color -> enum {BLACK , WHITE}
// remember to actualize the screen with glcd_UpdateScreen()
void glcd_DrawCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r, LCD_COLOR par_color) {
 8001a8c:	b590      	push	{r4, r7, lr}
 8001a8e:	b087      	sub	sp, #28
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	4604      	mov	r4, r0
 8001a94:	4608      	mov	r0, r1
 8001a96:	4611      	mov	r1, r2
 8001a98:	461a      	mov	r2, r3
 8001a9a:	4623      	mov	r3, r4
 8001a9c:	71fb      	strb	r3, [r7, #7]
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	71bb      	strb	r3, [r7, #6]
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	717b      	strb	r3, [r7, #5]
 8001aa6:	4613      	mov	r3, r2
 8001aa8:	713b      	strb	r3, [r7, #4]
  int32_t x = -par_r;
 8001aaa:	797b      	ldrb	r3, [r7, #5]
 8001aac:	425b      	negs	r3, r3
 8001aae:	617b      	str	r3, [r7, #20]
  int32_t y = 0;
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	613b      	str	r3, [r7, #16]
  int32_t err = 2 - 2 * par_r;
 8001ab4:	797b      	ldrb	r3, [r7, #5]
 8001ab6:	f1c3 0301 	rsb	r3, r3, #1
 8001aba:	005b      	lsls	r3, r3, #1
 8001abc:	60fb      	str	r3, [r7, #12]
  int32_t e2;

  if (par_x >= LCD_WIDTH || par_y >= LCD_HEIGHT) {
 8001abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	db65      	blt.n	8001b92 <glcd_DrawCircle+0x106>
 8001ac6:	79bb      	ldrb	r3, [r7, #6]
 8001ac8:	2b3f      	cmp	r3, #63	; 0x3f
 8001aca:	d862      	bhi.n	8001b92 <glcd_DrawCircle+0x106>
    return;
  }

    do {
      glcd_DrawPixel(par_x - x, par_y + y, par_color);
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	79fa      	ldrb	r2, [r7, #7]
 8001ad2:	1ad3      	subs	r3, r2, r3
 8001ad4:	b2d8      	uxtb	r0, r3
 8001ad6:	693b      	ldr	r3, [r7, #16]
 8001ad8:	b2da      	uxtb	r2, r3
 8001ada:	79bb      	ldrb	r3, [r7, #6]
 8001adc:	4413      	add	r3, r2
 8001ade:	b2db      	uxtb	r3, r3
 8001ae0:	793a      	ldrb	r2, [r7, #4]
 8001ae2:	4619      	mov	r1, r3
 8001ae4:	f7ff fa1a 	bl	8000f1c <glcd_DrawPixel>
      glcd_DrawPixel(par_x + x, par_y + y, par_color);
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	b2da      	uxtb	r2, r3
 8001aec:	79fb      	ldrb	r3, [r7, #7]
 8001aee:	4413      	add	r3, r2
 8001af0:	b2d8      	uxtb	r0, r3
 8001af2:	693b      	ldr	r3, [r7, #16]
 8001af4:	b2da      	uxtb	r2, r3
 8001af6:	79bb      	ldrb	r3, [r7, #6]
 8001af8:	4413      	add	r3, r2
 8001afa:	b2db      	uxtb	r3, r3
 8001afc:	793a      	ldrb	r2, [r7, #4]
 8001afe:	4619      	mov	r1, r3
 8001b00:	f7ff fa0c 	bl	8000f1c <glcd_DrawPixel>
      glcd_DrawPixel(par_x + x, par_y - y, par_color);
 8001b04:	697b      	ldr	r3, [r7, #20]
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	b2d8      	uxtb	r0, r3
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	b2db      	uxtb	r3, r3
 8001b12:	79ba      	ldrb	r2, [r7, #6]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	793a      	ldrb	r2, [r7, #4]
 8001b1a:	4619      	mov	r1, r3
 8001b1c:	f7ff f9fe 	bl	8000f1c <glcd_DrawPixel>
      glcd_DrawPixel(par_x - x, par_y - y, par_color);
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	b2db      	uxtb	r3, r3
 8001b24:	79fa      	ldrb	r2, [r7, #7]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	b2d8      	uxtb	r0, r3
 8001b2a:	693b      	ldr	r3, [r7, #16]
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	79ba      	ldrb	r2, [r7, #6]
 8001b30:	1ad3      	subs	r3, r2, r3
 8001b32:	b2db      	uxtb	r3, r3
 8001b34:	793a      	ldrb	r2, [r7, #4]
 8001b36:	4619      	mov	r1, r3
 8001b38:	f7ff f9f0 	bl	8000f1c <glcd_DrawPixel>
        e2 = err;
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	60bb      	str	r3, [r7, #8]
        if (e2 <= y) {
 8001b40:	68ba      	ldr	r2, [r7, #8]
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	429a      	cmp	r2, r3
 8001b46:	dc13      	bgt.n	8001b70 <glcd_DrawCircle+0xe4>
            y++;
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	613b      	str	r3, [r7, #16]
            err = err + (y * 2 + 1);
 8001b4e:	693b      	ldr	r3, [r7, #16]
 8001b50:	005b      	lsls	r3, r3, #1
 8001b52:	3301      	adds	r3, #1
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	4413      	add	r3, r2
 8001b58:	60fb      	str	r3, [r7, #12]
            if(-x == y && e2 <= x) {
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	425b      	negs	r3, r3
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d105      	bne.n	8001b70 <glcd_DrawCircle+0xe4>
 8001b64:	68ba      	ldr	r2, [r7, #8]
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	429a      	cmp	r2, r3
 8001b6a:	dc01      	bgt.n	8001b70 <glcd_DrawCircle+0xe4>
              e2 = 0;
 8001b6c:	2300      	movs	r3, #0
 8001b6e:	60bb      	str	r3, [r7, #8]
        }
        else
        {
          /*nothing to do*/
        }
        if(e2 > x) {
 8001b70:	68ba      	ldr	r2, [r7, #8]
 8001b72:	697b      	ldr	r3, [r7, #20]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	dd08      	ble.n	8001b8a <glcd_DrawCircle+0xfe>
          x++;
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	617b      	str	r3, [r7, #20]
          err = err + (x * 2 + 1);
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	005b      	lsls	r3, r3, #1
 8001b82:	3301      	adds	r3, #1
 8001b84:	68fa      	ldr	r2, [r7, #12]
 8001b86:	4413      	add	r3, r2
 8001b88:	60fb      	str	r3, [r7, #12]
        }
        else
        {
          /*nothing to do*/
        }
    } while(x <= 0);
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	dd9d      	ble.n	8001acc <glcd_DrawCircle+0x40>

    return;
 8001b90:	e000      	b.n	8001b94 <glcd_DrawCircle+0x108>
    return;
 8001b92:	bf00      	nop
}
 8001b94:	371c      	adds	r7, #28
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bd90      	pop	{r4, r7, pc}

08001b9a <glcd_FillCircle>:


// Draw filled circle. Pixel positions calculated using Bresenham's algorithm
// color => Pixel color -> enum {BLACK , WHITE}
// remember to actualize the screen with glcd_UpdateScreen()
void glcd_FillCircle(uint8_t par_x,uint8_t par_y,uint8_t par_r,LCD_COLOR par_color) {
 8001b9a:	b590      	push	{r4, r7, lr}
 8001b9c:	b089      	sub	sp, #36	; 0x24
 8001b9e:	af00      	add	r7, sp, #0
 8001ba0:	4604      	mov	r4, r0
 8001ba2:	4608      	mov	r0, r1
 8001ba4:	4611      	mov	r1, r2
 8001ba6:	461a      	mov	r2, r3
 8001ba8:	4623      	mov	r3, r4
 8001baa:	71fb      	strb	r3, [r7, #7]
 8001bac:	4603      	mov	r3, r0
 8001bae:	71bb      	strb	r3, [r7, #6]
 8001bb0:	460b      	mov	r3, r1
 8001bb2:	717b      	strb	r3, [r7, #5]
 8001bb4:	4613      	mov	r3, r2
 8001bb6:	713b      	strb	r3, [r7, #4]
    int32_t x = -par_r;
 8001bb8:	797b      	ldrb	r3, [r7, #5]
 8001bba:	425b      	negs	r3, r3
 8001bbc:	61fb      	str	r3, [r7, #28]
    int32_t y = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61bb      	str	r3, [r7, #24]
    int32_t err = 2 - 2 * par_r;
 8001bc2:	797b      	ldrb	r3, [r7, #5]
 8001bc4:	f1c3 0301 	rsb	r3, r3, #1
 8001bc8:	005b      	lsls	r3, r3, #1
 8001bca:	617b      	str	r3, [r7, #20]
    int32_t e2;

    if (par_x >= LCD_WIDTH || par_y >= LCD_HEIGHT) {
 8001bcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	db51      	blt.n	8001c78 <glcd_FillCircle+0xde>
 8001bd4:	79bb      	ldrb	r3, [r7, #6]
 8001bd6:	2b3f      	cmp	r3, #63	; 0x3f
 8001bd8:	d84e      	bhi.n	8001c78 <glcd_FillCircle+0xde>
        return;
    }

    do {
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--)
 8001bda:	69bb      	ldr	r3, [r7, #24]
 8001bdc:	b2da      	uxtb	r2, r3
 8001bde:	79bb      	ldrb	r3, [r7, #6]
 8001be0:	4413      	add	r3, r2
 8001be2:	73fb      	strb	r3, [r7, #15]
 8001be4:	e017      	b.n	8001c16 <glcd_FillCircle+0x7c>
        {
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--)
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	b2db      	uxtb	r3, r3
 8001bea:	79fa      	ldrb	r2, [r7, #7]
 8001bec:	1ad3      	subs	r3, r2, r3
 8001bee:	73bb      	strb	r3, [r7, #14]
 8001bf0:	e008      	b.n	8001c04 <glcd_FillCircle+0x6a>
            {
                glcd_DrawPixel(_x, _y, par_color);
 8001bf2:	793a      	ldrb	r2, [r7, #4]
 8001bf4:	7bf9      	ldrb	r1, [r7, #15]
 8001bf6:	7bbb      	ldrb	r3, [r7, #14]
 8001bf8:	4618      	mov	r0, r3
 8001bfa:	f7ff f98f 	bl	8000f1c <glcd_DrawPixel>
            for (uint8_t _x = (par_x - x); _x >= (par_x + x); _x--)
 8001bfe:	7bbb      	ldrb	r3, [r7, #14]
 8001c00:	3b01      	subs	r3, #1
 8001c02:	73bb      	strb	r3, [r7, #14]
 8001c04:	7bba      	ldrb	r2, [r7, #14]
 8001c06:	79f9      	ldrb	r1, [r7, #7]
 8001c08:	69fb      	ldr	r3, [r7, #28]
 8001c0a:	440b      	add	r3, r1
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	daf0      	bge.n	8001bf2 <glcd_FillCircle+0x58>
        for (uint8_t _y = (par_y + y); _y >= (par_y - y); _y--)
 8001c10:	7bfb      	ldrb	r3, [r7, #15]
 8001c12:	3b01      	subs	r3, #1
 8001c14:	73fb      	strb	r3, [r7, #15]
 8001c16:	7bfa      	ldrb	r2, [r7, #15]
 8001c18:	79b9      	ldrb	r1, [r7, #6]
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	1acb      	subs	r3, r1, r3
 8001c1e:	429a      	cmp	r2, r3
 8001c20:	dae1      	bge.n	8001be6 <glcd_FillCircle+0x4c>
            }
        }

        e2 = err;
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	613b      	str	r3, [r7, #16]
        if (e2 <= y) {
 8001c26:	693a      	ldr	r2, [r7, #16]
 8001c28:	69bb      	ldr	r3, [r7, #24]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	dc13      	bgt.n	8001c56 <glcd_FillCircle+0xbc>
            y++;
 8001c2e:	69bb      	ldr	r3, [r7, #24]
 8001c30:	3301      	adds	r3, #1
 8001c32:	61bb      	str	r3, [r7, #24]
            err = err + (y * 2 + 1);
 8001c34:	69bb      	ldr	r3, [r7, #24]
 8001c36:	005b      	lsls	r3, r3, #1
 8001c38:	3301      	adds	r3, #1
 8001c3a:	697a      	ldr	r2, [r7, #20]
 8001c3c:	4413      	add	r3, r2
 8001c3e:	617b      	str	r3, [r7, #20]
            if (-x == y && e2 <= x) {
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	425b      	negs	r3, r3
 8001c44:	69ba      	ldr	r2, [r7, #24]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d105      	bne.n	8001c56 <glcd_FillCircle+0xbc>
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	69fb      	ldr	r3, [r7, #28]
 8001c4e:	429a      	cmp	r2, r3
 8001c50:	dc01      	bgt.n	8001c56 <glcd_FillCircle+0xbc>
                e2 = 0;
 8001c52:	2300      	movs	r3, #0
 8001c54:	613b      	str	r3, [r7, #16]
        else
        {
            /*nothing to do*/
        }

        if(e2 > x) {
 8001c56:	693a      	ldr	r2, [r7, #16]
 8001c58:	69fb      	ldr	r3, [r7, #28]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	dd08      	ble.n	8001c70 <glcd_FillCircle+0xd6>
            x++;
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	3301      	adds	r3, #1
 8001c62:	61fb      	str	r3, [r7, #28]
            err = err + (x * 2 + 1);
 8001c64:	69fb      	ldr	r3, [r7, #28]
 8001c66:	005b      	lsls	r3, r3, #1
 8001c68:	3301      	adds	r3, #1
 8001c6a:	697a      	ldr	r2, [r7, #20]
 8001c6c:	4413      	add	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
        }
        else {
            /*nothing to do*/
        }
    } while(x <= 0);
 8001c70:	69fb      	ldr	r3, [r7, #28]
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	ddb1      	ble.n	8001bda <glcd_FillCircle+0x40>

    return;
 8001c76:	e000      	b.n	8001c7a <glcd_FillCircle+0xe0>
        return;
 8001c78:	bf00      	nop
}
 8001c7a:	3724      	adds	r7, #36	; 0x24
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd90      	pop	{r4, r7, pc}

08001c80 <glcd_DrawRectangle>:


// Draw rectangle
// color => Pixel color -> enum {BLACK , WHITE}
// remember to actualize the screen with glcd_UpdateScreen()
void glcd_DrawRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, LCD_COLOR color) {
 8001c80:	b590      	push	{r4, r7, lr}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af02      	add	r7, sp, #8
 8001c86:	4604      	mov	r4, r0
 8001c88:	4608      	mov	r0, r1
 8001c8a:	4611      	mov	r1, r2
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	4623      	mov	r3, r4
 8001c90:	71fb      	strb	r3, [r7, #7]
 8001c92:	4603      	mov	r3, r0
 8001c94:	71bb      	strb	r3, [r7, #6]
 8001c96:	460b      	mov	r3, r1
 8001c98:	717b      	strb	r3, [r7, #5]
 8001c9a:	4613      	mov	r3, r2
 8001c9c:	713b      	strb	r3, [r7, #4]
    glcd_Line(x1,y1,x2,y1,color);
 8001c9e:	79bc      	ldrb	r4, [r7, #6]
 8001ca0:	797a      	ldrb	r2, [r7, #5]
 8001ca2:	79b9      	ldrb	r1, [r7, #6]
 8001ca4:	79f8      	ldrb	r0, [r7, #7]
 8001ca6:	7e3b      	ldrb	r3, [r7, #24]
 8001ca8:	9300      	str	r3, [sp, #0]
 8001caa:	4623      	mov	r3, r4
 8001cac:	f7ff fb54 	bl	8001358 <glcd_Line>
    glcd_Line(x2,y1,x2,y2,color);
 8001cb0:	793c      	ldrb	r4, [r7, #4]
 8001cb2:	797a      	ldrb	r2, [r7, #5]
 8001cb4:	79b9      	ldrb	r1, [r7, #6]
 8001cb6:	7978      	ldrb	r0, [r7, #5]
 8001cb8:	7e3b      	ldrb	r3, [r7, #24]
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	4623      	mov	r3, r4
 8001cbe:	f7ff fb4b 	bl	8001358 <glcd_Line>
    glcd_Line(x2,y2,x1,y2,color);
 8001cc2:	793c      	ldrb	r4, [r7, #4]
 8001cc4:	79fa      	ldrb	r2, [r7, #7]
 8001cc6:	7939      	ldrb	r1, [r7, #4]
 8001cc8:	7978      	ldrb	r0, [r7, #5]
 8001cca:	7e3b      	ldrb	r3, [r7, #24]
 8001ccc:	9300      	str	r3, [sp, #0]
 8001cce:	4623      	mov	r3, r4
 8001cd0:	f7ff fb42 	bl	8001358 <glcd_Line>
    glcd_Line(x1,y2,x1,y1,color);
 8001cd4:	79bc      	ldrb	r4, [r7, #6]
 8001cd6:	79fa      	ldrb	r2, [r7, #7]
 8001cd8:	7939      	ldrb	r1, [r7, #4]
 8001cda:	79f8      	ldrb	r0, [r7, #7]
 8001cdc:	7e3b      	ldrb	r3, [r7, #24]
 8001cde:	9300      	str	r3, [sp, #0]
 8001ce0:	4623      	mov	r3, r4
 8001ce2:	f7ff fb39 	bl	8001358 <glcd_Line>

    return;
 8001ce6:	bf00      	nop
}
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bd90      	pop	{r4, r7, pc}

08001cee <glcd_FillRectangle>:

// Draw filled rectangle
// color => Pixel color -> enum {BLACK , WHITE}
// remember to actualize the screen with glcd_UpdateScreen()
void glcd_FillRectangle(uint8_t x1, uint8_t y1, uint8_t x2, uint8_t y2, LCD_COLOR color) {
 8001cee:	b590      	push	{r4, r7, lr}
 8001cf0:	b085      	sub	sp, #20
 8001cf2:	af00      	add	r7, sp, #0
 8001cf4:	4604      	mov	r4, r0
 8001cf6:	4608      	mov	r0, r1
 8001cf8:	4611      	mov	r1, r2
 8001cfa:	461a      	mov	r2, r3
 8001cfc:	4623      	mov	r3, r4
 8001cfe:	71fb      	strb	r3, [r7, #7]
 8001d00:	4603      	mov	r3, r0
 8001d02:	71bb      	strb	r3, [r7, #6]
 8001d04:	460b      	mov	r3, r1
 8001d06:	717b      	strb	r3, [r7, #5]
 8001d08:	4613      	mov	r3, r2
 8001d0a:	713b      	strb	r3, [r7, #4]
    for (uint8_t y = y2; y >= y1; y--) {
 8001d0c:	793b      	ldrb	r3, [r7, #4]
 8001d0e:	73fb      	strb	r3, [r7, #15]
 8001d10:	e013      	b.n	8001d3a <glcd_FillRectangle+0x4c>
        for (uint8_t x = x2; x >= x1; x--) {
 8001d12:	797b      	ldrb	r3, [r7, #5]
 8001d14:	73bb      	strb	r3, [r7, #14]
 8001d16:	e009      	b.n	8001d2c <glcd_FillRectangle+0x3e>
            glcd_DrawPixel(x, y, color);
 8001d18:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001d1c:	7bf9      	ldrb	r1, [r7, #15]
 8001d1e:	7bbb      	ldrb	r3, [r7, #14]
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff f8fb 	bl	8000f1c <glcd_DrawPixel>
        for (uint8_t x = x2; x >= x1; x--) {
 8001d26:	7bbb      	ldrb	r3, [r7, #14]
 8001d28:	3b01      	subs	r3, #1
 8001d2a:	73bb      	strb	r3, [r7, #14]
 8001d2c:	7bba      	ldrb	r2, [r7, #14]
 8001d2e:	79fb      	ldrb	r3, [r7, #7]
 8001d30:	429a      	cmp	r2, r3
 8001d32:	d2f1      	bcs.n	8001d18 <glcd_FillRectangle+0x2a>
    for (uint8_t y = y2; y >= y1; y--) {
 8001d34:	7bfb      	ldrb	r3, [r7, #15]
 8001d36:	3b01      	subs	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
 8001d3a:	7bfa      	ldrb	r2, [r7, #15]
 8001d3c:	79bb      	ldrb	r3, [r7, #6]
 8001d3e:	429a      	cmp	r2, r3
 8001d40:	d2e7      	bcs.n	8001d12 <glcd_FillRectangle+0x24>
        }
    }
    return;
 8001d42:	bf00      	nop
}
 8001d44:	3714      	adds	r7, #20
 8001d46:	46bd      	mov	sp, r7
 8001d48:	bd90      	pop	{r4, r7, pc}

08001d4a <glcd_DrawBitmap>:

//Draw bitmap - ported from the ADAFruit GFX library
// color => Pixel color -> enum {BLACK , WHITE}
// remember to actualize the screen with glcd_UpdateScreen()
void glcd_DrawBitmap(uint8_t x, uint8_t y, const unsigned char* bitmap, uint8_t w, uint8_t h, LCD_COLOR color)
{
 8001d4a:	b580      	push	{r7, lr}
 8001d4c:	b084      	sub	sp, #16
 8001d4e:	af00      	add	r7, sp, #0
 8001d50:	603a      	str	r2, [r7, #0]
 8001d52:	461a      	mov	r2, r3
 8001d54:	4603      	mov	r3, r0
 8001d56:	71fb      	strb	r3, [r7, #7]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	71bb      	strb	r3, [r7, #6]
 8001d5c:	4613      	mov	r3, r2
 8001d5e:	717b      	strb	r3, [r7, #5]
    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8001d60:	797b      	ldrb	r3, [r7, #5]
 8001d62:	3307      	adds	r3, #7
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	da00      	bge.n	8001d6a <glcd_DrawBitmap+0x20>
 8001d68:	3307      	adds	r3, #7
 8001d6a:	10db      	asrs	r3, r3, #3
 8001d6c:	817b      	strh	r3, [r7, #10]
    uint8_t byte = 0;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	73fb      	strb	r3, [r7, #15]

    if (x >= LCD_WIDTH || y >= LCD_HEIGHT) {
 8001d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	db3e      	blt.n	8001df8 <glcd_DrawBitmap+0xae>
 8001d7a:	79bb      	ldrb	r3, [r7, #6]
 8001d7c:	2b3f      	cmp	r3, #63	; 0x3f
 8001d7e:	d83b      	bhi.n	8001df8 <glcd_DrawBitmap+0xae>
        return;
    }

    for (uint8_t j = 0; j < h; j++, y++) {
 8001d80:	2300      	movs	r3, #0
 8001d82:	73bb      	strb	r3, [r7, #14]
 8001d84:	e033      	b.n	8001dee <glcd_DrawBitmap+0xa4>
        for (uint8_t i = 0; i < w; i++) {
 8001d86:	2300      	movs	r3, #0
 8001d88:	737b      	strb	r3, [r7, #13]
 8001d8a:	e026      	b.n	8001dda <glcd_DrawBitmap+0x90>
            if (i & 7)
 8001d8c:	7b7b      	ldrb	r3, [r7, #13]
 8001d8e:	f003 0307 	and.w	r3, r3, #7
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <glcd_DrawBitmap+0x54>
                byte <<= 1;
 8001d96:	7bfb      	ldrb	r3, [r7, #15]
 8001d98:	005b      	lsls	r3, r3, #1
 8001d9a:	73fb      	strb	r3, [r7, #15]
 8001d9c:	e00d      	b.n	8001dba <glcd_DrawBitmap+0x70>
            else
                byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 8001d9e:	7bbb      	ldrb	r3, [r7, #14]
 8001da0:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001da4:	fb02 f303 	mul.w	r3, r2, r3
 8001da8:	7b7a      	ldrb	r2, [r7, #13]
 8001daa:	08d2      	lsrs	r2, r2, #3
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	4413      	add	r3, r2
 8001db0:	461a      	mov	r2, r3
 8001db2:	683b      	ldr	r3, [r7, #0]
 8001db4:	4413      	add	r3, r2
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	73fb      	strb	r3, [r7, #15]
            if (byte & 0x80)
 8001dba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	da08      	bge.n	8001dd4 <glcd_DrawBitmap+0x8a>
                glcd_DrawPixel(x + i, y, color);
 8001dc2:	79fa      	ldrb	r2, [r7, #7]
 8001dc4:	7b7b      	ldrb	r3, [r7, #13]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	7f3a      	ldrb	r2, [r7, #28]
 8001dcc:	79b9      	ldrb	r1, [r7, #6]
 8001dce:	4618      	mov	r0, r3
 8001dd0:	f7ff f8a4 	bl	8000f1c <glcd_DrawPixel>
        for (uint8_t i = 0; i < w; i++) {
 8001dd4:	7b7b      	ldrb	r3, [r7, #13]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	737b      	strb	r3, [r7, #13]
 8001dda:	7b7a      	ldrb	r2, [r7, #13]
 8001ddc:	797b      	ldrb	r3, [r7, #5]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d3d4      	bcc.n	8001d8c <glcd_DrawBitmap+0x42>
    for (uint8_t j = 0; j < h; j++, y++) {
 8001de2:	7bbb      	ldrb	r3, [r7, #14]
 8001de4:	3301      	adds	r3, #1
 8001de6:	73bb      	strb	r3, [r7, #14]
 8001de8:	79bb      	ldrb	r3, [r7, #6]
 8001dea:	3301      	adds	r3, #1
 8001dec:	71bb      	strb	r3, [r7, #6]
 8001dee:	7bba      	ldrb	r2, [r7, #14]
 8001df0:	7e3b      	ldrb	r3, [r7, #24]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d3c7      	bcc.n	8001d86 <glcd_DrawBitmap+0x3c>
        }
    }
    return;
 8001df6:	e000      	b.n	8001dfa <glcd_DrawBitmap+0xb0>
        return;
 8001df8:	bf00      	nop
}
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <glcd_TestLine>:
    ssd1306_WriteString(buff, Font_11x18, BLACK);
    ssd1306_UpdateScreen();
}
*/

void glcd_TestLine() {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b082      	sub	sp, #8
 8001e04:	af02      	add	r7, sp, #8

  glcd_Line(1,1,LCD_WIDTH - 1,LCD_HEIGHT - 1,WHITE);
 8001e06:	2301      	movs	r3, #1
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	233f      	movs	r3, #63	; 0x3f
 8001e0c:	227f      	movs	r2, #127	; 0x7f
 8001e0e:	2101      	movs	r1, #1
 8001e10:	2001      	movs	r0, #1
 8001e12:	f7ff faa1 	bl	8001358 <glcd_Line>
  glcd_Line(LCD_WIDTH - 1,1,1,LCD_HEIGHT - 1,WHITE);
 8001e16:	2301      	movs	r3, #1
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	233f      	movs	r3, #63	; 0x3f
 8001e1c:	2201      	movs	r2, #1
 8001e1e:	2101      	movs	r1, #1
 8001e20:	207f      	movs	r0, #127	; 0x7f
 8001e22:	f7ff fa99 	bl	8001358 <glcd_Line>
  glcd_UpdateScreen();
 8001e26:	f7ff f97d 	bl	8001124 <glcd_UpdateScreen>
  return;
 8001e2a:	bf00      	nop
}
 8001e2c:	46bd      	mov	sp, r7
 8001e2e:	bd80      	pop	{r7, pc}

08001e30 <glcd_TestRectangle>:

void glcd_TestRectangle() {
 8001e30:	b590      	push	{r4, r7, lr}
 8001e32:	b085      	sub	sp, #20
 8001e34:	af02      	add	r7, sp, #8
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8001e36:	2300      	movs	r3, #0
 8001e38:	607b      	str	r3, [r7, #4]
 8001e3a:	e028      	b.n	8001e8e <glcd_TestRectangle+0x5e>
    glcd_DrawRectangle(1 + (5*delta),1 + (5*delta) ,LCD_WIDTH-1 - (5*delta),LCD_HEIGHT-1 - (5*delta),WHITE);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	b2db      	uxtb	r3, r3
 8001e40:	461a      	mov	r2, r3
 8001e42:	0092      	lsls	r2, r2, #2
 8001e44:	4413      	add	r3, r2
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	3301      	adds	r3, #1
 8001e4a:	b2d8      	uxtb	r0, r3
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	b2db      	uxtb	r3, r3
 8001e50:	461a      	mov	r2, r3
 8001e52:	0092      	lsls	r2, r2, #2
 8001e54:	4413      	add	r3, r2
 8001e56:	b2db      	uxtb	r3, r3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	b2d9      	uxtb	r1, r3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	b2db      	uxtb	r3, r3
 8001e60:	461a      	mov	r2, r3
 8001e62:	0092      	lsls	r2, r2, #2
 8001e64:	4413      	add	r3, r2
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	b2db      	uxtb	r3, r3
 8001e72:	461c      	mov	r4, r3
 8001e74:	00a4      	lsls	r4, r4, #2
 8001e76:	4423      	add	r3, r4
 8001e78:	b2db      	uxtb	r3, r3
 8001e7a:	f1c3 033f 	rsb	r3, r3, #63	; 0x3f
 8001e7e:	b2db      	uxtb	r3, r3
 8001e80:	2401      	movs	r4, #1
 8001e82:	9400      	str	r4, [sp, #0]
 8001e84:	f7ff fefc 	bl	8001c80 <glcd_DrawRectangle>
  for(delta = 0; delta < 5; delta ++) {
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3301      	adds	r3, #1
 8001e8c:	607b      	str	r3, [r7, #4]
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2b04      	cmp	r3, #4
 8001e92:	d9d3      	bls.n	8001e3c <glcd_TestRectangle+0xc>
  }
  glcd_UpdateScreen();
 8001e94:	f7ff f946 	bl	8001124 <glcd_UpdateScreen>
  return;
 8001e98:	bf00      	nop
}
 8001e9a:	370c      	adds	r7, #12
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd90      	pop	{r4, r7, pc}

08001ea0 <glcd_TestRectangleFill>:

void glcd_TestRectangleFill() {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af02      	add	r7, sp, #8
  glcd_FillRectangle(31, 1, 65, 35, WHITE);
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	9300      	str	r3, [sp, #0]
 8001eaa:	2323      	movs	r3, #35	; 0x23
 8001eac:	2241      	movs	r2, #65	; 0x41
 8001eae:	2101      	movs	r1, #1
 8001eb0:	201f      	movs	r0, #31
 8001eb2:	f7ff ff1c 	bl	8001cee <glcd_FillRectangle>
  glcd_FillRectangle(10, 45, 70, 60, WHITE);
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	9300      	str	r3, [sp, #0]
 8001eba:	233c      	movs	r3, #60	; 0x3c
 8001ebc:	2246      	movs	r2, #70	; 0x46
 8001ebe:	212d      	movs	r1, #45	; 0x2d
 8001ec0:	200a      	movs	r0, #10
 8001ec2:	f7ff ff14 	bl	8001cee <glcd_FillRectangle>
  glcd_FillRectangle(75, 10, 100, 45, WHITE);
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	9300      	str	r3, [sp, #0]
 8001eca:	232d      	movs	r3, #45	; 0x2d
 8001ecc:	2264      	movs	r2, #100	; 0x64
 8001ece:	210a      	movs	r1, #10
 8001ed0:	204b      	movs	r0, #75	; 0x4b
 8001ed2:	f7ff ff0c 	bl	8001cee <glcd_FillRectangle>
  glcd_FillRectangle(55, 30, 80, 55, BLACK);
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	9300      	str	r3, [sp, #0]
 8001eda:	2337      	movs	r3, #55	; 0x37
 8001edc:	2250      	movs	r2, #80	; 0x50
 8001ede:	211e      	movs	r1, #30
 8001ee0:	2037      	movs	r0, #55	; 0x37
 8001ee2:	f7ff ff04 	bl	8001cee <glcd_FillRectangle>
  glcd_UpdateScreen();
 8001ee6:	f7ff f91d 	bl	8001124 <glcd_UpdateScreen>
}
 8001eea:	bf00      	nop
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <glcd_TestCircle>:

void glcd_TestCircle() {
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
  uint32_t delta;

  for(delta = 0; delta < 5; delta ++) {
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	607b      	str	r3, [r7, #4]
 8001efa:	e010      	b.n	8001f1e <glcd_TestCircle+0x2e>
    glcd_DrawCircle(20*delta+30, 15, 10, WHITE);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	b2db      	uxtb	r3, r3
 8001f00:	461a      	mov	r2, r3
 8001f02:	0092      	lsls	r2, r2, #2
 8001f04:	4413      	add	r3, r2
 8001f06:	009b      	lsls	r3, r3, #2
 8001f08:	b2db      	uxtb	r3, r3
 8001f0a:	331e      	adds	r3, #30
 8001f0c:	b2d8      	uxtb	r0, r3
 8001f0e:	2301      	movs	r3, #1
 8001f10:	220a      	movs	r2, #10
 8001f12:	210f      	movs	r1, #15
 8001f14:	f7ff fdba 	bl	8001a8c <glcd_DrawCircle>
  for(delta = 0; delta < 5; delta ++) {
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	3301      	adds	r3, #1
 8001f1c:	607b      	str	r3, [r7, #4]
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b04      	cmp	r3, #4
 8001f22:	d9eb      	bls.n	8001efc <glcd_TestCircle+0xc>
  }

  for(delta = 0; delta < 5; delta ++) {
 8001f24:	2300      	movs	r3, #0
 8001f26:	607b      	str	r3, [r7, #4]
 8001f28:	e011      	b.n	8001f4e <glcd_TestCircle+0x5e>
    glcd_FillCircle(23*delta+15, 40, 10, WHITE);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	461a      	mov	r2, r3
 8001f30:	0052      	lsls	r2, r2, #1
 8001f32:	441a      	add	r2, r3
 8001f34:	00d2      	lsls	r2, r2, #3
 8001f36:	1ad3      	subs	r3, r2, r3
 8001f38:	b2db      	uxtb	r3, r3
 8001f3a:	330f      	adds	r3, #15
 8001f3c:	b2d8      	uxtb	r0, r3
 8001f3e:	2301      	movs	r3, #1
 8001f40:	220a      	movs	r2, #10
 8001f42:	2128      	movs	r1, #40	; 0x28
 8001f44:	f7ff fe29 	bl	8001b9a <glcd_FillCircle>
  for(delta = 0; delta < 5; delta ++) {
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	607b      	str	r3, [r7, #4]
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2b04      	cmp	r3, #4
 8001f52:	d9ea      	bls.n	8001f2a <glcd_TestCircle+0x3a>
  }

  glcd_UpdateScreen();
 8001f54:	f7ff f8e6 	bl	8001124 <glcd_UpdateScreen>
  return;
 8001f58:	bf00      	nop
}
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}

08001f60 <glcd_TestArc>:

void glcd_TestArc() {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b082      	sub	sp, #8
 8001f64:	af02      	add	r7, sp, #8
  glcd_DrawArc(30, 30, 30, 20, 270, WHITE);
 8001f66:	2301      	movs	r3, #1
 8001f68:	9301      	str	r3, [sp, #4]
 8001f6a:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001f6e:	9300      	str	r3, [sp, #0]
 8001f70:	2314      	movs	r3, #20
 8001f72:	221e      	movs	r2, #30
 8001f74:	211e      	movs	r1, #30
 8001f76:	201e      	movs	r0, #30
 8001f78:	f7ff faea 	bl	8001550 <glcd_DrawArc>
  glcd_DrawArcWithRadiusLine(80, 55, 10, 30, 270, WHITE);
 8001f7c:	2301      	movs	r3, #1
 8001f7e:	9301      	str	r3, [sp, #4]
 8001f80:	f44f 7387 	mov.w	r3, #270	; 0x10e
 8001f84:	9300      	str	r3, [sp, #0]
 8001f86:	231e      	movs	r3, #30
 8001f88:	220a      	movs	r2, #10
 8001f8a:	2137      	movs	r1, #55	; 0x37
 8001f8c:	2050      	movs	r0, #80	; 0x50
 8001f8e:	f7ff fbf3 	bl	8001778 <glcd_DrawArcWithRadiusLine>
  glcd_UpdateScreen();
 8001f92:	f7ff f8c7 	bl	8001124 <glcd_UpdateScreen>
  return;
 8001f96:	bf00      	nop
}
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <glcd_TestPolyline>:

void glcd_TestPolyline() {
 8001f9c:	b590      	push	{r4, r7, lr}
 8001f9e:	b085      	sub	sp, #20
 8001fa0:	af00      	add	r7, sp, #0
  glcd_VERTEX loc_vertex[] =
 8001fa2:	4b08      	ldr	r3, [pc, #32]	; (8001fc4 <glcd_TestPolyline+0x28>)
 8001fa4:	463c      	mov	r4, r7
 8001fa6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001fa8:	c407      	stmia	r4!, {r0, r1, r2}
 8001faa:	8023      	strh	r3, [r4, #0]
      {45,16},
      {50,10},
      {53,16}
  };

  glcd_Polyline(loc_vertex,sizeof(loc_vertex)/sizeof(loc_vertex[0]),WHITE);
 8001fac:	463b      	mov	r3, r7
 8001fae:	2201      	movs	r2, #1
 8001fb0:	2107      	movs	r1, #7
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f7ff fa3c 	bl	8001430 <glcd_Polyline>
  glcd_UpdateScreen();
 8001fb8:	f7ff f8b4 	bl	8001124 <glcd_UpdateScreen>
  return;
 8001fbc:	bf00      	nop
}
 8001fbe:	3714      	adds	r7, #20
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd90      	pop	{r4, r7, pc}
 8001fc4:	080051a0 	.word	0x080051a0

08001fc8 <glcd_TestDrawBitmap>:

void glcd_TestDrawBitmap()
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b082      	sub	sp, #8
 8001fcc:	af02      	add	r7, sp, #8
    glcd_Fill(WHITE);
 8001fce:	2001      	movs	r0, #1
 8001fd0:	f7fe fffa 	bl	8000fc8 <glcd_Fill>
    glcd_DrawBitmap(0,0,garfield_128x64,128,64,BLACK);
 8001fd4:	2300      	movs	r3, #0
 8001fd6:	9301      	str	r3, [sp, #4]
 8001fd8:	2340      	movs	r3, #64	; 0x40
 8001fda:	9300      	str	r3, [sp, #0]
 8001fdc:	2380      	movs	r3, #128	; 0x80
 8001fde:	4a18      	ldr	r2, [pc, #96]	; (8002040 <glcd_TestDrawBitmap+0x78>)
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	2000      	movs	r0, #0
 8001fe4:	f7ff feb1 	bl	8001d4a <glcd_DrawBitmap>
    glcd_UpdateScreen();
 8001fe8:	f7ff f89c 	bl	8001124 <glcd_UpdateScreen>
    HAL_Delay(1000);
 8001fec:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001ff0:	f000 fbbc 	bl	800276c <HAL_Delay>
    glcd_Fill(BLACK);
 8001ff4:	2000      	movs	r0, #0
 8001ff6:	f7fe ffe7 	bl	8000fc8 <glcd_Fill>
    glcd_DrawBitmap(32,0,github_logo_64x64,64,64,WHITE);
 8001ffa:	2301      	movs	r3, #1
 8001ffc:	9301      	str	r3, [sp, #4]
 8001ffe:	2340      	movs	r3, #64	; 0x40
 8002000:	9300      	str	r3, [sp, #0]
 8002002:	2340      	movs	r3, #64	; 0x40
 8002004:	4a0f      	ldr	r2, [pc, #60]	; (8002044 <glcd_TestDrawBitmap+0x7c>)
 8002006:	2100      	movs	r1, #0
 8002008:	2020      	movs	r0, #32
 800200a:	f7ff fe9e 	bl	8001d4a <glcd_DrawBitmap>
    glcd_UpdateScreen();
 800200e:	f7ff f889 	bl	8001124 <glcd_UpdateScreen>
    HAL_Delay(1000);
 8002012:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002016:	f000 fba9 	bl	800276c <HAL_Delay>
    glcd_Fill(WHITE);
 800201a:	2001      	movs	r0, #1
 800201c:	f7fe ffd4 	bl	8000fc8 <glcd_Fill>
    glcd_DrawBitmap(32,0,github_logo_64x64,64,64,BLACK);
 8002020:	2300      	movs	r3, #0
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	2340      	movs	r3, #64	; 0x40
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	2340      	movs	r3, #64	; 0x40
 800202a:	4a06      	ldr	r2, [pc, #24]	; (8002044 <glcd_TestDrawBitmap+0x7c>)
 800202c:	2100      	movs	r1, #0
 800202e:	2020      	movs	r0, #32
 8002030:	f7ff fe8b 	bl	8001d4a <glcd_DrawBitmap>
    glcd_UpdateScreen();
 8002034:	f7ff f876 	bl	8001124 <glcd_UpdateScreen>
}
 8002038:	bf00      	nop
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	08005754 	.word	0x08005754
 8002044:	08005b54 	.word	0x08005b54

08002048 <glcd_TestAll>:

void glcd_TestAll() {
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
    glcd_TestBorder();
    HAL_Delay(1000);
*/
//    glcd_TestFonts();
//    HAL_Delay(3000);
    glcd_Fill(BLACK);
 800204c:	2000      	movs	r0, #0
 800204e:	f7fe ffbb 	bl	8000fc8 <glcd_Fill>
    glcd_TestRectangle();
 8002052:	f7ff feed 	bl	8001e30 <glcd_TestRectangle>
    glcd_TestLine();
 8002056:	f7ff fed3 	bl	8001e00 <glcd_TestLine>
    HAL_Delay(1000);
 800205a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800205e:	f000 fb85 	bl	800276c <HAL_Delay>
    glcd_Fill(BLACK);
 8002062:	2000      	movs	r0, #0
 8002064:	f7fe ffb0 	bl	8000fc8 <glcd_Fill>
    glcd_TestRectangleFill();
 8002068:	f7ff ff1a 	bl	8001ea0 <glcd_TestRectangleFill>
    HAL_Delay(1000);
 800206c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002070:	f000 fb7c 	bl	800276c <HAL_Delay>
    glcd_Fill(BLACK);
 8002074:	2000      	movs	r0, #0
 8002076:	f7fe ffa7 	bl	8000fc8 <glcd_Fill>
    glcd_TestPolyline();
 800207a:	f7ff ff8f 	bl	8001f9c <glcd_TestPolyline>
    HAL_Delay(1000);
 800207e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002082:	f000 fb73 	bl	800276c <HAL_Delay>
    glcd_Fill(BLACK);
 8002086:	2000      	movs	r0, #0
 8002088:	f7fe ff9e 	bl	8000fc8 <glcd_Fill>
    glcd_TestArc();
 800208c:	f7ff ff68 	bl	8001f60 <glcd_TestArc>
    HAL_Delay(1000);
 8002090:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002094:	f000 fb6a 	bl	800276c <HAL_Delay>
    glcd_Fill(BLACK);
 8002098:	2000      	movs	r0, #0
 800209a:	f7fe ff95 	bl	8000fc8 <glcd_Fill>
    glcd_TestCircle();
 800209e:	f7ff ff27 	bl	8001ef0 <glcd_TestCircle>
    HAL_Delay(1000);
 80020a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020a6:	f000 fb61 	bl	800276c <HAL_Delay>
    glcd_TestDrawBitmap();
 80020aa:	f7ff ff8d 	bl	8001fc8 <glcd_TestDrawBitmap>
    HAL_Delay(1000);
 80020ae:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020b2:	f000 fb5b 	bl	800276c <HAL_Delay>
}
 80020b6:	bf00      	nop
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80020c0:	f000 fae2 	bl	8002688 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80020c4:	f000 f822 	bl	800210c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80020c8:	f000 f92c 	bl	8002324 <MX_GPIO_Init>
  MX_ADC1_Init();
 80020cc:	f000 f888 	bl	80021e0 <MX_ADC1_Init>
  MX_TIM1_Init();
 80020d0:	f000 f8d8 	bl	8002284 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  delay_init ();
 80020d4:	f7fe fed0 	bl	8000e78 <delay_init>
  glcd_init();
 80020d8:	f7fe fef2 	bl	8000ec0 <glcd_init>

  glcd_Fill(BLACK);
 80020dc:	2000      	movs	r0, #0
 80020de:	f7fe ff73 	bl	8000fc8 <glcd_Fill>
  glcd_UpdateScreen();
 80020e2:	f7ff f81f 	bl	8001124 <glcd_UpdateScreen>
  //glcd_SetCursor(0, 0);
  //glcd_WriteString("A", Font_7x10, WHITE);

  test_lcd();
 80020e6:	f000 f9bb 	bl	8002460 <test_lcd>
  HAL_Delay(1000);
 80020ea:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020ee:	f000 fb3d 	bl	800276c <HAL_Delay>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	glcd_TestAll();
 80020f2:	f7ff ffa9 	bl	8002048 <glcd_TestAll>
	HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 80020f6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80020fa:	4803      	ldr	r0, [pc, #12]	; (8002108 <main+0x4c>)
 80020fc:	f001 f83f 	bl	800317e <HAL_GPIO_TogglePin>
	HAL_Delay(100);
 8002100:	2064      	movs	r0, #100	; 0x64
 8002102:	f000 fb33 	bl	800276c <HAL_Delay>
	glcd_TestAll();
 8002106:	e7f4      	b.n	80020f2 <main+0x36>
 8002108:	40020800 	.word	0x40020800

0800210c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b094      	sub	sp, #80	; 0x50
 8002110:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002112:	f107 0320 	add.w	r3, r7, #32
 8002116:	2230      	movs	r2, #48	; 0x30
 8002118:	2100      	movs	r1, #0
 800211a:	4618      	mov	r0, r3
 800211c:	f001 ff8c 	bl	8004038 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002120:	f107 030c 	add.w	r3, r7, #12
 8002124:	2200      	movs	r2, #0
 8002126:	601a      	str	r2, [r3, #0]
 8002128:	605a      	str	r2, [r3, #4]
 800212a:	609a      	str	r2, [r3, #8]
 800212c:	60da      	str	r2, [r3, #12]
 800212e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002130:	2300      	movs	r3, #0
 8002132:	60bb      	str	r3, [r7, #8]
 8002134:	4b28      	ldr	r3, [pc, #160]	; (80021d8 <SystemClock_Config+0xcc>)
 8002136:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002138:	4a27      	ldr	r2, [pc, #156]	; (80021d8 <SystemClock_Config+0xcc>)
 800213a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800213e:	6413      	str	r3, [r2, #64]	; 0x40
 8002140:	4b25      	ldr	r3, [pc, #148]	; (80021d8 <SystemClock_Config+0xcc>)
 8002142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002148:	60bb      	str	r3, [r7, #8]
 800214a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800214c:	2300      	movs	r3, #0
 800214e:	607b      	str	r3, [r7, #4]
 8002150:	4b22      	ldr	r3, [pc, #136]	; (80021dc <SystemClock_Config+0xd0>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8002158:	4a20      	ldr	r2, [pc, #128]	; (80021dc <SystemClock_Config+0xd0>)
 800215a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	4b1e      	ldr	r3, [pc, #120]	; (80021dc <SystemClock_Config+0xd0>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002168:	607b      	str	r3, [r7, #4]
 800216a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800216c:	2301      	movs	r3, #1
 800216e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002170:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002174:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002176:	2302      	movs	r3, #2
 8002178:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800217a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800217e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 25;
 8002180:	2319      	movs	r3, #25
 8002182:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8002184:	23a8      	movs	r3, #168	; 0xa8
 8002186:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8002188:	2302      	movs	r3, #2
 800218a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800218c:	2304      	movs	r3, #4
 800218e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002190:	f107 0320 	add.w	r3, r7, #32
 8002194:	4618      	mov	r0, r3
 8002196:	f001 f80d 	bl	80031b4 <HAL_RCC_OscConfig>
 800219a:	4603      	mov	r3, r0
 800219c:	2b00      	cmp	r3, #0
 800219e:	d001      	beq.n	80021a4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80021a0:	f000 f978 	bl	8002494 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80021a4:	230f      	movs	r3, #15
 80021a6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80021a8:	2302      	movs	r3, #2
 80021aa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80021ac:	2300      	movs	r3, #0
 80021ae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80021b0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80021b4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80021b6:	2300      	movs	r3, #0
 80021b8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80021ba:	f107 030c 	add.w	r3, r7, #12
 80021be:	2102      	movs	r1, #2
 80021c0:	4618      	mov	r0, r3
 80021c2:	f001 fa6f 	bl	80036a4 <HAL_RCC_ClockConfig>
 80021c6:	4603      	mov	r3, r0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d001      	beq.n	80021d0 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80021cc:	f000 f962 	bl	8002494 <Error_Handler>
  }
}
 80021d0:	bf00      	nop
 80021d2:	3750      	adds	r7, #80	; 0x50
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd80      	pop	{r7, pc}
 80021d8:	40023800 	.word	0x40023800
 80021dc:	40007000 	.word	0x40007000

080021e0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b084      	sub	sp, #16
 80021e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80021e6:	463b      	mov	r3, r7
 80021e8:	2200      	movs	r2, #0
 80021ea:	601a      	str	r2, [r3, #0]
 80021ec:	605a      	str	r2, [r3, #4]
 80021ee:	609a      	str	r2, [r3, #8]
 80021f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80021f2:	4b21      	ldr	r3, [pc, #132]	; (8002278 <MX_ADC1_Init+0x98>)
 80021f4:	4a21      	ldr	r2, [pc, #132]	; (800227c <MX_ADC1_Init+0x9c>)
 80021f6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 80021f8:	4b1f      	ldr	r3, [pc, #124]	; (8002278 <MX_ADC1_Init+0x98>)
 80021fa:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80021fe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8002200:	4b1d      	ldr	r3, [pc, #116]	; (8002278 <MX_ADC1_Init+0x98>)
 8002202:	2200      	movs	r2, #0
 8002204:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8002206:	4b1c      	ldr	r3, [pc, #112]	; (8002278 <MX_ADC1_Init+0x98>)
 8002208:	2200      	movs	r2, #0
 800220a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800220c:	4b1a      	ldr	r3, [pc, #104]	; (8002278 <MX_ADC1_Init+0x98>)
 800220e:	2200      	movs	r2, #0
 8002210:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002212:	4b19      	ldr	r3, [pc, #100]	; (8002278 <MX_ADC1_Init+0x98>)
 8002214:	2200      	movs	r2, #0
 8002216:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800221a:	4b17      	ldr	r3, [pc, #92]	; (8002278 <MX_ADC1_Init+0x98>)
 800221c:	2200      	movs	r2, #0
 800221e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8002220:	4b15      	ldr	r3, [pc, #84]	; (8002278 <MX_ADC1_Init+0x98>)
 8002222:	4a17      	ldr	r2, [pc, #92]	; (8002280 <MX_ADC1_Init+0xa0>)
 8002224:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8002226:	4b14      	ldr	r3, [pc, #80]	; (8002278 <MX_ADC1_Init+0x98>)
 8002228:	2200      	movs	r2, #0
 800222a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800222c:	4b12      	ldr	r3, [pc, #72]	; (8002278 <MX_ADC1_Init+0x98>)
 800222e:	2201      	movs	r2, #1
 8002230:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8002232:	4b11      	ldr	r3, [pc, #68]	; (8002278 <MX_ADC1_Init+0x98>)
 8002234:	2200      	movs	r2, #0
 8002236:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800223a:	4b0f      	ldr	r3, [pc, #60]	; (8002278 <MX_ADC1_Init+0x98>)
 800223c:	2201      	movs	r2, #1
 800223e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8002240:	480d      	ldr	r0, [pc, #52]	; (8002278 <MX_ADC1_Init+0x98>)
 8002242:	f000 fab7 	bl	80027b4 <HAL_ADC_Init>
 8002246:	4603      	mov	r3, r0
 8002248:	2b00      	cmp	r3, #0
 800224a:	d001      	beq.n	8002250 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 800224c:	f000 f922 	bl	8002494 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8002250:	2300      	movs	r3, #0
 8002252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8002254:	2301      	movs	r3, #1
 8002256:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800225c:	463b      	mov	r3, r7
 800225e:	4619      	mov	r1, r3
 8002260:	4805      	ldr	r0, [pc, #20]	; (8002278 <MX_ADC1_Init+0x98>)
 8002262:	f000 faeb 	bl	800283c <HAL_ADC_ConfigChannel>
 8002266:	4603      	mov	r3, r0
 8002268:	2b00      	cmp	r3, #0
 800226a:	d001      	beq.n	8002270 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 800226c:	f000 f912 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}
 8002278:	20000438 	.word	0x20000438
 800227c:	40012000 	.word	0x40012000
 8002280:	0f000001 	.word	0x0f000001

08002284 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	b086      	sub	sp, #24
 8002288:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800228a:	f107 0308 	add.w	r3, r7, #8
 800228e:	2200      	movs	r2, #0
 8002290:	601a      	str	r2, [r3, #0]
 8002292:	605a      	str	r2, [r3, #4]
 8002294:	609a      	str	r2, [r3, #8]
 8002296:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002298:	463b      	mov	r3, r7
 800229a:	2200      	movs	r2, #0
 800229c:	601a      	str	r2, [r3, #0]
 800229e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80022a0:	4b1e      	ldr	r3, [pc, #120]	; (800231c <MX_TIM1_Init+0x98>)
 80022a2:	4a1f      	ldr	r2, [pc, #124]	; (8002320 <MX_TIM1_Init+0x9c>)
 80022a4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80022a6:	4b1d      	ldr	r3, [pc, #116]	; (800231c <MX_TIM1_Init+0x98>)
 80022a8:	2247      	movs	r2, #71	; 0x47
 80022aa:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022ac:	4b1b      	ldr	r3, [pc, #108]	; (800231c <MX_TIM1_Init+0x98>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80022b2:	4b1a      	ldr	r3, [pc, #104]	; (800231c <MX_TIM1_Init+0x98>)
 80022b4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80022b8:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022ba:	4b18      	ldr	r3, [pc, #96]	; (800231c <MX_TIM1_Init+0x98>)
 80022bc:	2200      	movs	r2, #0
 80022be:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80022c0:	4b16      	ldr	r3, [pc, #88]	; (800231c <MX_TIM1_Init+0x98>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022c6:	4b15      	ldr	r3, [pc, #84]	; (800231c <MX_TIM1_Init+0x98>)
 80022c8:	2200      	movs	r2, #0
 80022ca:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80022cc:	4813      	ldr	r0, [pc, #76]	; (800231c <MX_TIM1_Init+0x98>)
 80022ce:	f001 fb95 	bl	80039fc <HAL_TIM_Base_Init>
 80022d2:	4603      	mov	r3, r0
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 80022d8:	f000 f8dc 	bl	8002494 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022e0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80022e2:	f107 0308 	add.w	r3, r7, #8
 80022e6:	4619      	mov	r1, r3
 80022e8:	480c      	ldr	r0, [pc, #48]	; (800231c <MX_TIM1_Init+0x98>)
 80022ea:	f001 fc31 	bl	8003b50 <HAL_TIM_ConfigClockSource>
 80022ee:	4603      	mov	r3, r0
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d001      	beq.n	80022f8 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 80022f4:	f000 f8ce 	bl	8002494 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022f8:	2300      	movs	r3, #0
 80022fa:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022fc:	2300      	movs	r3, #0
 80022fe:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002300:	463b      	mov	r3, r7
 8002302:	4619      	mov	r1, r3
 8002304:	4805      	ldr	r0, [pc, #20]	; (800231c <MX_TIM1_Init+0x98>)
 8002306:	f001 fe05 	bl	8003f14 <HAL_TIMEx_MasterConfigSynchronization>
 800230a:	4603      	mov	r3, r0
 800230c:	2b00      	cmp	r3, #0
 800230e:	d001      	beq.n	8002314 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8002310:	f000 f8c0 	bl	8002494 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8002314:	bf00      	nop
 8002316:	3718      	adds	r7, #24
 8002318:	46bd      	mov	sp, r7
 800231a:	bd80      	pop	{r7, pc}
 800231c:	20000480 	.word	0x20000480
 8002320:	40010000 	.word	0x40010000

08002324 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	; 0x28
 8002328:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800232a:	f107 0314 	add.w	r3, r7, #20
 800232e:	2200      	movs	r2, #0
 8002330:	601a      	str	r2, [r3, #0]
 8002332:	605a      	str	r2, [r3, #4]
 8002334:	609a      	str	r2, [r3, #8]
 8002336:	60da      	str	r2, [r3, #12]
 8002338:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800233a:	2300      	movs	r3, #0
 800233c:	613b      	str	r3, [r7, #16]
 800233e:	4b44      	ldr	r3, [pc, #272]	; (8002450 <MX_GPIO_Init+0x12c>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	4a43      	ldr	r2, [pc, #268]	; (8002450 <MX_GPIO_Init+0x12c>)
 8002344:	f043 0304 	orr.w	r3, r3, #4
 8002348:	6313      	str	r3, [r2, #48]	; 0x30
 800234a:	4b41      	ldr	r3, [pc, #260]	; (8002450 <MX_GPIO_Init+0x12c>)
 800234c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800234e:	f003 0304 	and.w	r3, r3, #4
 8002352:	613b      	str	r3, [r7, #16]
 8002354:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b3d      	ldr	r3, [pc, #244]	; (8002450 <MX_GPIO_Init+0x12c>)
 800235c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800235e:	4a3c      	ldr	r2, [pc, #240]	; (8002450 <MX_GPIO_Init+0x12c>)
 8002360:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002364:	6313      	str	r3, [r2, #48]	; 0x30
 8002366:	4b3a      	ldr	r3, [pc, #232]	; (8002450 <MX_GPIO_Init+0x12c>)
 8002368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800236a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002372:	2300      	movs	r3, #0
 8002374:	60bb      	str	r3, [r7, #8]
 8002376:	4b36      	ldr	r3, [pc, #216]	; (8002450 <MX_GPIO_Init+0x12c>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237a:	4a35      	ldr	r2, [pc, #212]	; (8002450 <MX_GPIO_Init+0x12c>)
 800237c:	f043 0301 	orr.w	r3, r3, #1
 8002380:	6313      	str	r3, [r2, #48]	; 0x30
 8002382:	4b33      	ldr	r3, [pc, #204]	; (8002450 <MX_GPIO_Init+0x12c>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	f003 0301 	and.w	r3, r3, #1
 800238a:	60bb      	str	r3, [r7, #8]
 800238c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800238e:	2300      	movs	r3, #0
 8002390:	607b      	str	r3, [r7, #4]
 8002392:	4b2f      	ldr	r3, [pc, #188]	; (8002450 <MX_GPIO_Init+0x12c>)
 8002394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002396:	4a2e      	ldr	r2, [pc, #184]	; (8002450 <MX_GPIO_Init+0x12c>)
 8002398:	f043 0302 	orr.w	r3, r3, #2
 800239c:	6313      	str	r3, [r2, #48]	; 0x30
 800239e:	4b2c      	ldr	r3, [pc, #176]	; (8002450 <MX_GPIO_Init+0x12c>)
 80023a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023a2:	f003 0302 	and.w	r3, r3, #2
 80023a6:	607b      	str	r3, [r7, #4]
 80023a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80023aa:	2200      	movs	r2, #0
 80023ac:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80023b0:	4828      	ldr	r0, [pc, #160]	; (8002454 <MX_GPIO_Init+0x130>)
 80023b2:	f000 fecb 	bl	800314c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DI_Pin|LCD_RW_Pin|LCD_E_Pin|LCD_RST_Pin, GPIO_PIN_SET);
 80023b6:	2201      	movs	r2, #1
 80023b8:	21cc      	movs	r1, #204	; 0xcc
 80023ba:	4827      	ldr	r0, [pc, #156]	; (8002458 <MX_GPIO_Init+0x134>)
 80023bc:	f000 fec6 	bl	800314c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_CS1_Pin|LCD_CS2_Pin, GPIO_PIN_RESET);
 80023c0:	2200      	movs	r2, #0
 80023c2:	2130      	movs	r1, #48	; 0x30
 80023c4:	4824      	ldr	r0, [pc, #144]	; (8002458 <MX_GPIO_Init+0x134>)
 80023c6:	f000 fec1 	bl	800314c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80023ca:	2201      	movs	r2, #1
 80023cc:	21ff      	movs	r1, #255	; 0xff
 80023ce:	4823      	ldr	r0, [pc, #140]	; (800245c <MX_GPIO_Init+0x138>)
 80023d0:	f000 febc 	bl	800314c <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_SET);

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80023d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80023d8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023da:	2301      	movs	r3, #1
 80023dc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023de:	2300      	movs	r3, #0
 80023e0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023e2:	2300      	movs	r3, #0
 80023e4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80023e6:	f107 0314 	add.w	r3, r7, #20
 80023ea:	4619      	mov	r1, r3
 80023ec:	4819      	ldr	r0, [pc, #100]	; (8002454 <MX_GPIO_Init+0x130>)
 80023ee:	f000 fd29 	bl	8002e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DI_Pin LCD_RW_Pin LCD_CS1_Pin LCD_CS2_Pin
                           LCD_E_Pin */
  GPIO_InitStruct.Pin = LCD_DI_Pin|LCD_RW_Pin|LCD_CS1_Pin|LCD_CS2_Pin
 80023f2:	237c      	movs	r3, #124	; 0x7c
 80023f4:	617b      	str	r3, [r7, #20]
                          |LCD_E_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023f6:	2301      	movs	r3, #1
 80023f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023fa:	2300      	movs	r3, #0
 80023fc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80023fe:	2303      	movs	r3, #3
 8002400:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002402:	f107 0314 	add.w	r3, r7, #20
 8002406:	4619      	mov	r1, r3
 8002408:	4813      	ldr	r0, [pc, #76]	; (8002458 <MX_GPIO_Init+0x134>)
 800240a:	f000 fd1b 	bl	8002e44 <HAL_GPIO_Init>

  /*Configure GPIO pin : LCD_RST_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin;
 800240e:	2380      	movs	r3, #128	; 0x80
 8002410:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002412:	2301      	movs	r3, #1
 8002414:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002416:	2300      	movs	r3, #0
 8002418:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800241a:	2302      	movs	r3, #2
 800241c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LCD_RST_GPIO_Port, &GPIO_InitStruct);
 800241e:	f107 0314 	add.w	r3, r7, #20
 8002422:	4619      	mov	r1, r3
 8002424:	480c      	ldr	r0, [pc, #48]	; (8002458 <MX_GPIO_Init+0x134>)
 8002426:	f000 fd0d 	bl	8002e44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB3
                           PB4 PB5 PB6 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800242a:	23ff      	movs	r3, #255	; 0xff
 800242c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800242e:	2301      	movs	r3, #1
 8002430:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002432:	2300      	movs	r3, #0
 8002434:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002436:	2303      	movs	r3, #3
 8002438:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800243a:	f107 0314 	add.w	r3, r7, #20
 800243e:	4619      	mov	r1, r3
 8002440:	4806      	ldr	r0, [pc, #24]	; (800245c <MX_GPIO_Init+0x138>)
 8002442:	f000 fcff 	bl	8002e44 <HAL_GPIO_Init>

}
 8002446:	bf00      	nop
 8002448:	3728      	adds	r7, #40	; 0x28
 800244a:	46bd      	mov	sp, r7
 800244c:	bd80      	pop	{r7, pc}
 800244e:	bf00      	nop
 8002450:	40023800 	.word	0x40023800
 8002454:	40020800 	.word	0x40020800
 8002458:	40020000 	.word	0x40020000
 800245c:	40020400 	.word	0x40020400

08002460 <test_lcd>:

/* USER CODE BEGIN 4 */
void test_lcd(void){
 8002460:	b580      	push	{r7, lr}
 8002462:	b082      	sub	sp, #8
 8002464:	af00      	add	r7, sp, #0
	glcd_SetCursor(10, 30);
 8002466:	211e      	movs	r1, #30
 8002468:	200a      	movs	r0, #10
 800246a:	f7fe ff5d 	bl	8001328 <glcd_SetCursor>
	uint8_t counter=0;
 800246e:	2300      	movs	r3, #0
 8002470:	71fb      	strb	r3, [r7, #7]
	for(counter = 32; counter<110; counter++){
		glcd_WriteChar(counter, Font_8x5, WHITE);
		glcd_UpdateScreen();
	}
*/
	glcd_WriteString("0123456789", Font_8x5, WHITE);
 8002472:	4a06      	ldr	r2, [pc, #24]	; (800248c <test_lcd+0x2c>)
 8002474:	2301      	movs	r3, #1
 8002476:	ca06      	ldmia	r2, {r1, r2}
 8002478:	4805      	ldr	r0, [pc, #20]	; (8002490 <test_lcd+0x30>)
 800247a:	f7fe ff2f 	bl	80012dc <glcd_WriteString>
	glcd_UpdateScreen();
 800247e:	f7fe fe51 	bl	8001124 <glcd_UpdateScreen>
	//HAL_Delay(4000);


}
 8002482:	bf00      	nop
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
 800248a:	bf00      	nop
 800248c:	20000000 	.word	0x20000000
 8002490:	080051b0 	.word	0x080051b0

08002494 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002498:	b672      	cpsid	i
}
 800249a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800249c:	e7fe      	b.n	800249c <Error_Handler+0x8>
	...

080024a0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	b083      	sub	sp, #12
 80024a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
 80024aa:	4b10      	ldr	r3, [pc, #64]	; (80024ec <HAL_MspInit+0x4c>)
 80024ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ae:	4a0f      	ldr	r2, [pc, #60]	; (80024ec <HAL_MspInit+0x4c>)
 80024b0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024b4:	6453      	str	r3, [r2, #68]	; 0x44
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_MspInit+0x4c>)
 80024b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024be:	607b      	str	r3, [r7, #4]
 80024c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80024c2:	2300      	movs	r3, #0
 80024c4:	603b      	str	r3, [r7, #0]
 80024c6:	4b09      	ldr	r3, [pc, #36]	; (80024ec <HAL_MspInit+0x4c>)
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	4a08      	ldr	r2, [pc, #32]	; (80024ec <HAL_MspInit+0x4c>)
 80024cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d0:	6413      	str	r3, [r2, #64]	; 0x40
 80024d2:	4b06      	ldr	r3, [pc, #24]	; (80024ec <HAL_MspInit+0x4c>)
 80024d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024da:	603b      	str	r3, [r7, #0]
 80024dc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80024de:	bf00      	nop
 80024e0:	370c      	adds	r7, #12
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800

080024f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80024f0:	b580      	push	{r7, lr}
 80024f2:	b08a      	sub	sp, #40	; 0x28
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024f8:	f107 0314 	add.w	r3, r7, #20
 80024fc:	2200      	movs	r2, #0
 80024fe:	601a      	str	r2, [r3, #0]
 8002500:	605a      	str	r2, [r3, #4]
 8002502:	609a      	str	r2, [r3, #8]
 8002504:	60da      	str	r2, [r3, #12]
 8002506:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a17      	ldr	r2, [pc, #92]	; (800256c <HAL_ADC_MspInit+0x7c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d127      	bne.n	8002562 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002512:	2300      	movs	r3, #0
 8002514:	613b      	str	r3, [r7, #16]
 8002516:	4b16      	ldr	r3, [pc, #88]	; (8002570 <HAL_ADC_MspInit+0x80>)
 8002518:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800251a:	4a15      	ldr	r2, [pc, #84]	; (8002570 <HAL_ADC_MspInit+0x80>)
 800251c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002520:	6453      	str	r3, [r2, #68]	; 0x44
 8002522:	4b13      	ldr	r3, [pc, #76]	; (8002570 <HAL_ADC_MspInit+0x80>)
 8002524:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002526:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800252a:	613b      	str	r3, [r7, #16]
 800252c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	60fb      	str	r3, [r7, #12]
 8002532:	4b0f      	ldr	r3, [pc, #60]	; (8002570 <HAL_ADC_MspInit+0x80>)
 8002534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002536:	4a0e      	ldr	r2, [pc, #56]	; (8002570 <HAL_ADC_MspInit+0x80>)
 8002538:	f043 0301 	orr.w	r3, r3, #1
 800253c:	6313      	str	r3, [r2, #48]	; 0x30
 800253e:	4b0c      	ldr	r3, [pc, #48]	; (8002570 <HAL_ADC_MspInit+0x80>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	f003 0301 	and.w	r3, r3, #1
 8002546:	60fb      	str	r3, [r7, #12]
 8002548:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800254a:	2301      	movs	r3, #1
 800254c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800254e:	2303      	movs	r3, #3
 8002550:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002552:	2300      	movs	r3, #0
 8002554:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002556:	f107 0314 	add.w	r3, r7, #20
 800255a:	4619      	mov	r1, r3
 800255c:	4805      	ldr	r0, [pc, #20]	; (8002574 <HAL_ADC_MspInit+0x84>)
 800255e:	f000 fc71 	bl	8002e44 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002562:	bf00      	nop
 8002564:	3728      	adds	r7, #40	; 0x28
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	40012000 	.word	0x40012000
 8002570:	40023800 	.word	0x40023800
 8002574:	40020000 	.word	0x40020000

08002578 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	4a0b      	ldr	r2, [pc, #44]	; (80025b4 <HAL_TIM_Base_MspInit+0x3c>)
 8002586:	4293      	cmp	r3, r2
 8002588:	d10d      	bne.n	80025a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800258a:	2300      	movs	r3, #0
 800258c:	60fb      	str	r3, [r7, #12]
 800258e:	4b0a      	ldr	r3, [pc, #40]	; (80025b8 <HAL_TIM_Base_MspInit+0x40>)
 8002590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002592:	4a09      	ldr	r2, [pc, #36]	; (80025b8 <HAL_TIM_Base_MspInit+0x40>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6453      	str	r3, [r2, #68]	; 0x44
 800259a:	4b07      	ldr	r3, [pc, #28]	; (80025b8 <HAL_TIM_Base_MspInit+0x40>)
 800259c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	60fb      	str	r3, [r7, #12]
 80025a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80025a6:	bf00      	nop
 80025a8:	3714      	adds	r7, #20
 80025aa:	46bd      	mov	sp, r7
 80025ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b0:	4770      	bx	lr
 80025b2:	bf00      	nop
 80025b4:	40010000 	.word	0x40010000
 80025b8:	40023800 	.word	0x40023800

080025bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025bc:	b480      	push	{r7}
 80025be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80025c0:	e7fe      	b.n	80025c0 <NMI_Handler+0x4>

080025c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025c2:	b480      	push	{r7}
 80025c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80025c6:	e7fe      	b.n	80025c6 <HardFault_Handler+0x4>

080025c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80025c8:	b480      	push	{r7}
 80025ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80025cc:	e7fe      	b.n	80025cc <MemManage_Handler+0x4>

080025ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80025ce:	b480      	push	{r7}
 80025d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80025d2:	e7fe      	b.n	80025d2 <BusFault_Handler+0x4>

080025d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80025d4:	b480      	push	{r7}
 80025d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80025d8:	e7fe      	b.n	80025d8 <UsageFault_Handler+0x4>

080025da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80025da:	b480      	push	{r7}
 80025dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80025de:	bf00      	nop
 80025e0:	46bd      	mov	sp, r7
 80025e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e6:	4770      	bx	lr

080025e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80025e8:	b480      	push	{r7}
 80025ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80025ec:	bf00      	nop
 80025ee:	46bd      	mov	sp, r7
 80025f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025f4:	4770      	bx	lr

080025f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80025f6:	b480      	push	{r7}
 80025f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80025fa:	bf00      	nop
 80025fc:	46bd      	mov	sp, r7
 80025fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002602:	4770      	bx	lr

08002604 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002604:	b580      	push	{r7, lr}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002608:	f000 f890 	bl	800272c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800260c:	bf00      	nop
 800260e:	bd80      	pop	{r7, pc}

08002610 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002614:	4b06      	ldr	r3, [pc, #24]	; (8002630 <SystemInit+0x20>)
 8002616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800261a:	4a05      	ldr	r2, [pc, #20]	; (8002630 <SystemInit+0x20>)
 800261c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002620:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002624:	bf00      	nop
 8002626:	46bd      	mov	sp, r7
 8002628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800262c:	4770      	bx	lr
 800262e:	bf00      	nop
 8002630:	e000ed00 	.word	0xe000ed00

08002634 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002634:	f8df d034 	ldr.w	sp, [pc, #52]	; 800266c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002638:	480d      	ldr	r0, [pc, #52]	; (8002670 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800263a:	490e      	ldr	r1, [pc, #56]	; (8002674 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800263c:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002640:	e002      	b.n	8002648 <LoopCopyDataInit>

08002642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002646:	3304      	adds	r3, #4

08002648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800264c:	d3f9      	bcc.n	8002642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264e:	4a0b      	ldr	r2, [pc, #44]	; (800267c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002650:	4c0b      	ldr	r4, [pc, #44]	; (8002680 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002654:	e001      	b.n	800265a <LoopFillZerobss>

08002656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002658:	3204      	adds	r2, #4

0800265a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800265c:	d3fb      	bcc.n	8002656 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800265e:	f7ff ffd7 	bl	8002610 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002662:	f001 fcc5 	bl	8003ff0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002666:	f7ff fd29 	bl	80020bc <main>
  bx  lr    
 800266a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800266c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002674:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8002678:	08005f50 	.word	0x08005f50
  ldr r2, =_sbss
 800267c:	20000014 	.word	0x20000014
  ldr r4, =_ebss
 8002680:	200004cc 	.word	0x200004cc

08002684 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002684:	e7fe      	b.n	8002684 <ADC_IRQHandler>
	...

08002688 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800268c:	4b0e      	ldr	r3, [pc, #56]	; (80026c8 <HAL_Init+0x40>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a0d      	ldr	r2, [pc, #52]	; (80026c8 <HAL_Init+0x40>)
 8002692:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002696:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002698:	4b0b      	ldr	r3, [pc, #44]	; (80026c8 <HAL_Init+0x40>)
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	4a0a      	ldr	r2, [pc, #40]	; (80026c8 <HAL_Init+0x40>)
 800269e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80026a2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80026a4:	4b08      	ldr	r3, [pc, #32]	; (80026c8 <HAL_Init+0x40>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4a07      	ldr	r2, [pc, #28]	; (80026c8 <HAL_Init+0x40>)
 80026aa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026ae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80026b0:	2003      	movs	r0, #3
 80026b2:	f000 fb93 	bl	8002ddc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80026b6:	200f      	movs	r0, #15
 80026b8:	f000 f808 	bl	80026cc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80026bc:	f7ff fef0 	bl	80024a0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	bd80      	pop	{r7, pc}
 80026c6:	bf00      	nop
 80026c8:	40023c00 	.word	0x40023c00

080026cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80026d4:	4b12      	ldr	r3, [pc, #72]	; (8002720 <HAL_InitTick+0x54>)
 80026d6:	681a      	ldr	r2, [r3, #0]
 80026d8:	4b12      	ldr	r3, [pc, #72]	; (8002724 <HAL_InitTick+0x58>)
 80026da:	781b      	ldrb	r3, [r3, #0]
 80026dc:	4619      	mov	r1, r3
 80026de:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80026e2:	fbb3 f3f1 	udiv	r3, r3, r1
 80026e6:	fbb2 f3f3 	udiv	r3, r2, r3
 80026ea:	4618      	mov	r0, r3
 80026ec:	f000 fb9d 	bl	8002e2a <HAL_SYSTICK_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d001      	beq.n	80026fa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80026f6:	2301      	movs	r3, #1
 80026f8:	e00e      	b.n	8002718 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2b0f      	cmp	r3, #15
 80026fe:	d80a      	bhi.n	8002716 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002700:	2200      	movs	r2, #0
 8002702:	6879      	ldr	r1, [r7, #4]
 8002704:	f04f 30ff 	mov.w	r0, #4294967295
 8002708:	f000 fb73 	bl	8002df2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800270c:	4a06      	ldr	r2, [pc, #24]	; (8002728 <HAL_InitTick+0x5c>)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002712:	2300      	movs	r3, #0
 8002714:	e000      	b.n	8002718 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002716:	2301      	movs	r3, #1
}
 8002718:	4618      	mov	r0, r3
 800271a:	3708      	adds	r7, #8
 800271c:	46bd      	mov	sp, r7
 800271e:	bd80      	pop	{r7, pc}
 8002720:	20000008 	.word	0x20000008
 8002724:	20000010 	.word	0x20000010
 8002728:	2000000c 	.word	0x2000000c

0800272c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800272c:	b480      	push	{r7}
 800272e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002730:	4b06      	ldr	r3, [pc, #24]	; (800274c <HAL_IncTick+0x20>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	4b06      	ldr	r3, [pc, #24]	; (8002750 <HAL_IncTick+0x24>)
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	4413      	add	r3, r2
 800273c:	4a04      	ldr	r2, [pc, #16]	; (8002750 <HAL_IncTick+0x24>)
 800273e:	6013      	str	r3, [r2, #0]
}
 8002740:	bf00      	nop
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	20000010 	.word	0x20000010
 8002750:	200004c8 	.word	0x200004c8

08002754 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002754:	b480      	push	{r7}
 8002756:	af00      	add	r7, sp, #0
  return uwTick;
 8002758:	4b03      	ldr	r3, [pc, #12]	; (8002768 <HAL_GetTick+0x14>)
 800275a:	681b      	ldr	r3, [r3, #0]
}
 800275c:	4618      	mov	r0, r3
 800275e:	46bd      	mov	sp, r7
 8002760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002764:	4770      	bx	lr
 8002766:	bf00      	nop
 8002768:	200004c8 	.word	0x200004c8

0800276c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800276c:	b580      	push	{r7, lr}
 800276e:	b084      	sub	sp, #16
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002774:	f7ff ffee 	bl	8002754 <HAL_GetTick>
 8002778:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002784:	d005      	beq.n	8002792 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002786:	4b0a      	ldr	r3, [pc, #40]	; (80027b0 <HAL_Delay+0x44>)
 8002788:	781b      	ldrb	r3, [r3, #0]
 800278a:	461a      	mov	r2, r3
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	4413      	add	r3, r2
 8002790:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002792:	bf00      	nop
 8002794:	f7ff ffde 	bl	8002754 <HAL_GetTick>
 8002798:	4602      	mov	r2, r0
 800279a:	68bb      	ldr	r3, [r7, #8]
 800279c:	1ad3      	subs	r3, r2, r3
 800279e:	68fa      	ldr	r2, [r7, #12]
 80027a0:	429a      	cmp	r2, r3
 80027a2:	d8f7      	bhi.n	8002794 <HAL_Delay+0x28>
  {
  }
}
 80027a4:	bf00      	nop
 80027a6:	bf00      	nop
 80027a8:	3710      	adds	r7, #16
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000010 	.word	0x20000010

080027b4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80027bc:	2300      	movs	r3, #0
 80027be:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d101      	bne.n	80027ca <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80027c6:	2301      	movs	r3, #1
 80027c8:	e033      	b.n	8002832 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7ff fe8c 	bl	80024f0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2200      	movs	r2, #0
 80027e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f003 0310 	and.w	r3, r3, #16
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d118      	bne.n	8002824 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80027fa:	f023 0302 	bic.w	r3, r3, #2
 80027fe:	f043 0202 	orr.w	r2, r3, #2
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f93a 	bl	8002a80 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	2200      	movs	r2, #0
 8002810:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002816:	f023 0303 	bic.w	r3, r3, #3
 800281a:	f043 0201 	orr.w	r2, r3, #1
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	641a      	str	r2, [r3, #64]	; 0x40
 8002822:	e001      	b.n	8002828 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002824:	2301      	movs	r3, #1
 8002826:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	2200      	movs	r2, #0
 800282c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002830:	7bfb      	ldrb	r3, [r7, #15]
}
 8002832:	4618      	mov	r0, r3
 8002834:	3710      	adds	r7, #16
 8002836:	46bd      	mov	sp, r7
 8002838:	bd80      	pop	{r7, pc}
	...

0800283c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800283c:	b480      	push	{r7}
 800283e:	b085      	sub	sp, #20
 8002840:	af00      	add	r7, sp, #0
 8002842:	6078      	str	r0, [r7, #4]
 8002844:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002846:	2300      	movs	r3, #0
 8002848:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002850:	2b01      	cmp	r3, #1
 8002852:	d101      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x1c>
 8002854:	2302      	movs	r3, #2
 8002856:	e105      	b.n	8002a64 <HAL_ADC_ConfigChannel+0x228>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2201      	movs	r2, #1
 800285c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002860:	683b      	ldr	r3, [r7, #0]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	2b09      	cmp	r3, #9
 8002866:	d925      	bls.n	80028b4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	68d9      	ldr	r1, [r3, #12]
 800286e:	683b      	ldr	r3, [r7, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	b29b      	uxth	r3, r3
 8002874:	461a      	mov	r2, r3
 8002876:	4613      	mov	r3, r2
 8002878:	005b      	lsls	r3, r3, #1
 800287a:	4413      	add	r3, r2
 800287c:	3b1e      	subs	r3, #30
 800287e:	2207      	movs	r2, #7
 8002880:	fa02 f303 	lsl.w	r3, r2, r3
 8002884:	43da      	mvns	r2, r3
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	400a      	ands	r2, r1
 800288c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	68d9      	ldr	r1, [r3, #12]
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	b29b      	uxth	r3, r3
 800289e:	4618      	mov	r0, r3
 80028a0:	4603      	mov	r3, r0
 80028a2:	005b      	lsls	r3, r3, #1
 80028a4:	4403      	add	r3, r0
 80028a6:	3b1e      	subs	r3, #30
 80028a8:	409a      	lsls	r2, r3
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	430a      	orrs	r2, r1
 80028b0:	60da      	str	r2, [r3, #12]
 80028b2:	e022      	b.n	80028fa <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	6919      	ldr	r1, [r3, #16]
 80028ba:	683b      	ldr	r3, [r7, #0]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	b29b      	uxth	r3, r3
 80028c0:	461a      	mov	r2, r3
 80028c2:	4613      	mov	r3, r2
 80028c4:	005b      	lsls	r3, r3, #1
 80028c6:	4413      	add	r3, r2
 80028c8:	2207      	movs	r2, #7
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	43da      	mvns	r2, r3
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	400a      	ands	r2, r1
 80028d6:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	6919      	ldr	r1, [r3, #16]
 80028de:	683b      	ldr	r3, [r7, #0]
 80028e0:	689a      	ldr	r2, [r3, #8]
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	b29b      	uxth	r3, r3
 80028e8:	4618      	mov	r0, r3
 80028ea:	4603      	mov	r3, r0
 80028ec:	005b      	lsls	r3, r3, #1
 80028ee:	4403      	add	r3, r0
 80028f0:	409a      	lsls	r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	430a      	orrs	r2, r1
 80028f8:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b06      	cmp	r3, #6
 8002900:	d824      	bhi.n	800294c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	685a      	ldr	r2, [r3, #4]
 800290c:	4613      	mov	r3, r2
 800290e:	009b      	lsls	r3, r3, #2
 8002910:	4413      	add	r3, r2
 8002912:	3b05      	subs	r3, #5
 8002914:	221f      	movs	r2, #31
 8002916:	fa02 f303 	lsl.w	r3, r2, r3
 800291a:	43da      	mvns	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	400a      	ands	r2, r1
 8002922:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800292a:	683b      	ldr	r3, [r7, #0]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	b29b      	uxth	r3, r3
 8002930:	4618      	mov	r0, r3
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	685a      	ldr	r2, [r3, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	009b      	lsls	r3, r3, #2
 800293a:	4413      	add	r3, r2
 800293c:	3b05      	subs	r3, #5
 800293e:	fa00 f203 	lsl.w	r2, r0, r3
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	430a      	orrs	r2, r1
 8002948:	635a      	str	r2, [r3, #52]	; 0x34
 800294a:	e04c      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	2b0c      	cmp	r3, #12
 8002952:	d824      	bhi.n	800299e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685a      	ldr	r2, [r3, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	4413      	add	r3, r2
 8002964:	3b23      	subs	r3, #35	; 0x23
 8002966:	221f      	movs	r2, #31
 8002968:	fa02 f303 	lsl.w	r3, r2, r3
 800296c:	43da      	mvns	r2, r3
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	400a      	ands	r2, r1
 8002974:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	b29b      	uxth	r3, r3
 8002982:	4618      	mov	r0, r3
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685a      	ldr	r2, [r3, #4]
 8002988:	4613      	mov	r3, r2
 800298a:	009b      	lsls	r3, r3, #2
 800298c:	4413      	add	r3, r2
 800298e:	3b23      	subs	r3, #35	; 0x23
 8002990:	fa00 f203 	lsl.w	r2, r0, r3
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	430a      	orrs	r2, r1
 800299a:	631a      	str	r2, [r3, #48]	; 0x30
 800299c:	e023      	b.n	80029e6 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	685a      	ldr	r2, [r3, #4]
 80029a8:	4613      	mov	r3, r2
 80029aa:	009b      	lsls	r3, r3, #2
 80029ac:	4413      	add	r3, r2
 80029ae:	3b41      	subs	r3, #65	; 0x41
 80029b0:	221f      	movs	r2, #31
 80029b2:	fa02 f303 	lsl.w	r3, r2, r3
 80029b6:	43da      	mvns	r2, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	400a      	ands	r2, r1
 80029be:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	b29b      	uxth	r3, r3
 80029cc:	4618      	mov	r0, r3
 80029ce:	683b      	ldr	r3, [r7, #0]
 80029d0:	685a      	ldr	r2, [r3, #4]
 80029d2:	4613      	mov	r3, r2
 80029d4:	009b      	lsls	r3, r3, #2
 80029d6:	4413      	add	r3, r2
 80029d8:	3b41      	subs	r3, #65	; 0x41
 80029da:	fa00 f203 	lsl.w	r2, r0, r3
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	430a      	orrs	r2, r1
 80029e4:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80029e6:	4b22      	ldr	r3, [pc, #136]	; (8002a70 <HAL_ADC_ConfigChannel+0x234>)
 80029e8:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a21      	ldr	r2, [pc, #132]	; (8002a74 <HAL_ADC_ConfigChannel+0x238>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d109      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x1cc>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	2b12      	cmp	r3, #18
 80029fa:	d105      	bne.n	8002a08 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	685b      	ldr	r3, [r3, #4]
 8002a00:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a19      	ldr	r2, [pc, #100]	; (8002a74 <HAL_ADC_ConfigChannel+0x238>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d123      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x21e>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b10      	cmp	r3, #16
 8002a18:	d003      	beq.n	8002a22 <HAL_ADC_ConfigChannel+0x1e6>
 8002a1a:	683b      	ldr	r3, [r7, #0]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	2b11      	cmp	r3, #17
 8002a20:	d11b      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	2b10      	cmp	r3, #16
 8002a34:	d111      	bne.n	8002a5a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002a36:	4b10      	ldr	r3, [pc, #64]	; (8002a78 <HAL_ADC_ConfigChannel+0x23c>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	4a10      	ldr	r2, [pc, #64]	; (8002a7c <HAL_ADC_ConfigChannel+0x240>)
 8002a3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002a40:	0c9a      	lsrs	r2, r3, #18
 8002a42:	4613      	mov	r3, r2
 8002a44:	009b      	lsls	r3, r3, #2
 8002a46:	4413      	add	r3, r2
 8002a48:	005b      	lsls	r3, r3, #1
 8002a4a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a4c:	e002      	b.n	8002a54 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	3b01      	subs	r3, #1
 8002a52:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002a54:	68bb      	ldr	r3, [r7, #8]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d1f9      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002a62:	2300      	movs	r3, #0
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3714      	adds	r7, #20
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a6e:	4770      	bx	lr
 8002a70:	40012300 	.word	0x40012300
 8002a74:	40012000 	.word	0x40012000
 8002a78:	20000008 	.word	0x20000008
 8002a7c:	431bde83 	.word	0x431bde83

08002a80 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a80:	b480      	push	{r7}
 8002a82:	b085      	sub	sp, #20
 8002a84:	af00      	add	r7, sp, #0
 8002a86:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a88:	4b79      	ldr	r3, [pc, #484]	; (8002c70 <ADC_Init+0x1f0>)
 8002a8a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a8c:	68fb      	ldr	r3, [r7, #12]
 8002a8e:	685b      	ldr	r3, [r3, #4]
 8002a90:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	685a      	ldr	r2, [r3, #4]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	685b      	ldr	r3, [r3, #4]
 8002aa0:	431a      	orrs	r2, r3
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	685a      	ldr	r2, [r3, #4]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002ab4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	6859      	ldr	r1, [r3, #4]
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	691b      	ldr	r3, [r3, #16]
 8002ac0:	021a      	lsls	r2, r3, #8
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	430a      	orrs	r2, r1
 8002ac8:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	685a      	ldr	r2, [r3, #4]
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002ad8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	6859      	ldr	r1, [r3, #4]
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	689a      	ldr	r2, [r3, #8]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	689a      	ldr	r2, [r3, #8]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002afa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6899      	ldr	r1, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	68da      	ldr	r2, [r3, #12]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	430a      	orrs	r2, r1
 8002b0c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b12:	4a58      	ldr	r2, [pc, #352]	; (8002c74 <ADC_Init+0x1f4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d022      	beq.n	8002b5e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689a      	ldr	r2, [r3, #8]
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b26:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	6899      	ldr	r1, [r3, #8]
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	430a      	orrs	r2, r1
 8002b38:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b48:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	6899      	ldr	r1, [r3, #8]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	430a      	orrs	r2, r1
 8002b5a:	609a      	str	r2, [r3, #8]
 8002b5c:	e00f      	b.n	8002b7e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002b6c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	689a      	ldr	r2, [r3, #8]
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002b7c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689a      	ldr	r2, [r3, #8]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0202 	bic.w	r2, r2, #2
 8002b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	6899      	ldr	r1, [r3, #8]
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	7e1b      	ldrb	r3, [r3, #24]
 8002b98:	005a      	lsls	r2, r3, #1
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	430a      	orrs	r2, r1
 8002ba0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d01b      	beq.n	8002be4 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	685a      	ldr	r2, [r3, #4]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002bba:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	685a      	ldr	r2, [r3, #4]
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002bca:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	6859      	ldr	r1, [r3, #4]
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	3b01      	subs	r3, #1
 8002bd8:	035a      	lsls	r2, r3, #13
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	430a      	orrs	r2, r1
 8002be0:	605a      	str	r2, [r3, #4]
 8002be2:	e007      	b.n	8002bf4 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	685a      	ldr	r2, [r3, #4]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002bf2:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	69db      	ldr	r3, [r3, #28]
 8002c0e:	3b01      	subs	r3, #1
 8002c10:	051a      	lsls	r2, r3, #20
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	430a      	orrs	r2, r1
 8002c18:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002c28:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	6899      	ldr	r1, [r3, #8]
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002c36:	025a      	lsls	r2, r3, #9
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	430a      	orrs	r2, r1
 8002c3e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	689a      	ldr	r2, [r3, #8]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c4e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6899      	ldr	r1, [r3, #8]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	695b      	ldr	r3, [r3, #20]
 8002c5a:	029a      	lsls	r2, r3, #10
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	430a      	orrs	r2, r1
 8002c62:	609a      	str	r2, [r3, #8]
}
 8002c64:	bf00      	nop
 8002c66:	3714      	adds	r7, #20
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr
 8002c70:	40012300 	.word	0x40012300
 8002c74:	0f000001 	.word	0x0f000001

08002c78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	b085      	sub	sp, #20
 8002c7c:	af00      	add	r7, sp, #0
 8002c7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c88:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002c8a:	68db      	ldr	r3, [r3, #12]
 8002c8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c94:	4013      	ands	r3, r2
 8002c96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002ca0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002ca4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ca8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002caa:	4a04      	ldr	r2, [pc, #16]	; (8002cbc <__NVIC_SetPriorityGrouping+0x44>)
 8002cac:	68bb      	ldr	r3, [r7, #8]
 8002cae:	60d3      	str	r3, [r2, #12]
}
 8002cb0:	bf00      	nop
 8002cb2:	3714      	adds	r7, #20
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr
 8002cbc:	e000ed00 	.word	0xe000ed00

08002cc0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cc0:	b480      	push	{r7}
 8002cc2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cc4:	4b04      	ldr	r3, [pc, #16]	; (8002cd8 <__NVIC_GetPriorityGrouping+0x18>)
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	0a1b      	lsrs	r3, r3, #8
 8002cca:	f003 0307 	and.w	r3, r3, #7
}
 8002cce:	4618      	mov	r0, r3
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd6:	4770      	bx	lr
 8002cd8:	e000ed00 	.word	0xe000ed00

08002cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	6039      	str	r1, [r7, #0]
 8002ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	db0a      	blt.n	8002d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	490c      	ldr	r1, [pc, #48]	; (8002d28 <__NVIC_SetPriority+0x4c>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	0112      	lsls	r2, r2, #4
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	440b      	add	r3, r1
 8002d00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d04:	e00a      	b.n	8002d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	4908      	ldr	r1, [pc, #32]	; (8002d2c <__NVIC_SetPriority+0x50>)
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	3b04      	subs	r3, #4
 8002d14:	0112      	lsls	r2, r2, #4
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	440b      	add	r3, r1
 8002d1a:	761a      	strb	r2, [r3, #24]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d26:	4770      	bx	lr
 8002d28:	e000e100 	.word	0xe000e100
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	; 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f1c3 0307 	rsb	r3, r3, #7
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	bf28      	it	cs
 8002d4e:	2304      	movcs	r3, #4
 8002d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3304      	adds	r3, #4
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d902      	bls.n	8002d60 <NVIC_EncodePriority+0x30>
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3b03      	subs	r3, #3
 8002d5e:	e000      	b.n	8002d62 <NVIC_EncodePriority+0x32>
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	f04f 32ff 	mov.w	r2, #4294967295
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	401a      	ands	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d78:	f04f 31ff 	mov.w	r1, #4294967295
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	43d9      	mvns	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	4313      	orrs	r3, r2
         );
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3724      	adds	r7, #36	; 0x24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d94:	4770      	bx	lr
	...

08002d98 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d98:	b580      	push	{r7, lr}
 8002d9a:	b082      	sub	sp, #8
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	3b01      	subs	r3, #1
 8002da4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002da8:	d301      	bcc.n	8002dae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002daa:	2301      	movs	r3, #1
 8002dac:	e00f      	b.n	8002dce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002dae:	4a0a      	ldr	r2, [pc, #40]	; (8002dd8 <SysTick_Config+0x40>)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	3b01      	subs	r3, #1
 8002db4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002db6:	210f      	movs	r1, #15
 8002db8:	f04f 30ff 	mov.w	r0, #4294967295
 8002dbc:	f7ff ff8e 	bl	8002cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dc0:	4b05      	ldr	r3, [pc, #20]	; (8002dd8 <SysTick_Config+0x40>)
 8002dc2:	2200      	movs	r2, #0
 8002dc4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dc6:	4b04      	ldr	r3, [pc, #16]	; (8002dd8 <SysTick_Config+0x40>)
 8002dc8:	2207      	movs	r2, #7
 8002dca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dcc:	2300      	movs	r3, #0
}
 8002dce:	4618      	mov	r0, r3
 8002dd0:	3708      	adds	r7, #8
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	bd80      	pop	{r7, pc}
 8002dd6:	bf00      	nop
 8002dd8:	e000e010 	.word	0xe000e010

08002ddc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f7ff ff47 	bl	8002c78 <__NVIC_SetPriorityGrouping>
}
 8002dea:	bf00      	nop
 8002dec:	3708      	adds	r7, #8
 8002dee:	46bd      	mov	sp, r7
 8002df0:	bd80      	pop	{r7, pc}

08002df2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002df2:	b580      	push	{r7, lr}
 8002df4:	b086      	sub	sp, #24
 8002df6:	af00      	add	r7, sp, #0
 8002df8:	4603      	mov	r3, r0
 8002dfa:	60b9      	str	r1, [r7, #8]
 8002dfc:	607a      	str	r2, [r7, #4]
 8002dfe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e00:	2300      	movs	r3, #0
 8002e02:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e04:	f7ff ff5c 	bl	8002cc0 <__NVIC_GetPriorityGrouping>
 8002e08:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e0a:	687a      	ldr	r2, [r7, #4]
 8002e0c:	68b9      	ldr	r1, [r7, #8]
 8002e0e:	6978      	ldr	r0, [r7, #20]
 8002e10:	f7ff ff8e 	bl	8002d30 <NVIC_EncodePriority>
 8002e14:	4602      	mov	r2, r0
 8002e16:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e1a:	4611      	mov	r1, r2
 8002e1c:	4618      	mov	r0, r3
 8002e1e:	f7ff ff5d 	bl	8002cdc <__NVIC_SetPriority>
}
 8002e22:	bf00      	nop
 8002e24:	3718      	adds	r7, #24
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bd80      	pop	{r7, pc}

08002e2a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e2a:	b580      	push	{r7, lr}
 8002e2c:	b082      	sub	sp, #8
 8002e2e:	af00      	add	r7, sp, #0
 8002e30:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e32:	6878      	ldr	r0, [r7, #4]
 8002e34:	f7ff ffb0 	bl	8002d98 <SysTick_Config>
 8002e38:	4603      	mov	r3, r0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}
	...

08002e44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b089      	sub	sp, #36	; 0x24
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002e4e:	2300      	movs	r3, #0
 8002e50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002e52:	2300      	movs	r3, #0
 8002e54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002e56:	2300      	movs	r3, #0
 8002e58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002e5a:	2300      	movs	r3, #0
 8002e5c:	61fb      	str	r3, [r7, #28]
 8002e5e:	e159      	b.n	8003114 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002e60:	2201      	movs	r2, #1
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	fa02 f303 	lsl.w	r3, r2, r3
 8002e68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	697a      	ldr	r2, [r7, #20]
 8002e70:	4013      	ands	r3, r2
 8002e72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002e74:	693a      	ldr	r2, [r7, #16]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	429a      	cmp	r2, r3
 8002e7a:	f040 8148 	bne.w	800310e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	685b      	ldr	r3, [r3, #4]
 8002e82:	f003 0303 	and.w	r3, r3, #3
 8002e86:	2b01      	cmp	r3, #1
 8002e88:	d005      	beq.n	8002e96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d130      	bne.n	8002ef8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	689b      	ldr	r3, [r3, #8]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	005b      	lsls	r3, r3, #1
 8002ea0:	2203      	movs	r2, #3
 8002ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea6:	43db      	mvns	r3, r3
 8002ea8:	69ba      	ldr	r2, [r7, #24]
 8002eaa:	4013      	ands	r3, r2
 8002eac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002eae:	683b      	ldr	r3, [r7, #0]
 8002eb0:	68da      	ldr	r2, [r3, #12]
 8002eb2:	69fb      	ldr	r3, [r7, #28]
 8002eb4:	005b      	lsls	r3, r3, #1
 8002eb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eba:	69ba      	ldr	r2, [r7, #24]
 8002ebc:	4313      	orrs	r3, r2
 8002ebe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	69ba      	ldr	r2, [r7, #24]
 8002ec4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	685b      	ldr	r3, [r3, #4]
 8002eca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ecc:	2201      	movs	r2, #1
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed4:	43db      	mvns	r3, r3
 8002ed6:	69ba      	ldr	r2, [r7, #24]
 8002ed8:	4013      	ands	r3, r2
 8002eda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	091b      	lsrs	r3, r3, #4
 8002ee2:	f003 0201 	and.w	r2, r3, #1
 8002ee6:	69fb      	ldr	r3, [r7, #28]
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	69ba      	ldr	r2, [r7, #24]
 8002eee:	4313      	orrs	r3, r2
 8002ef0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	69ba      	ldr	r2, [r7, #24]
 8002ef6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685b      	ldr	r3, [r3, #4]
 8002efc:	f003 0303 	and.w	r3, r3, #3
 8002f00:	2b03      	cmp	r3, #3
 8002f02:	d017      	beq.n	8002f34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	005b      	lsls	r3, r3, #1
 8002f0e:	2203      	movs	r2, #3
 8002f10:	fa02 f303 	lsl.w	r3, r2, r3
 8002f14:	43db      	mvns	r3, r3
 8002f16:	69ba      	ldr	r2, [r7, #24]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	005b      	lsls	r3, r3, #1
 8002f24:	fa02 f303 	lsl.w	r3, r2, r3
 8002f28:	69ba      	ldr	r2, [r7, #24]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	69ba      	ldr	r2, [r7, #24]
 8002f32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f34:	683b      	ldr	r3, [r7, #0]
 8002f36:	685b      	ldr	r3, [r3, #4]
 8002f38:	f003 0303 	and.w	r3, r3, #3
 8002f3c:	2b02      	cmp	r3, #2
 8002f3e:	d123      	bne.n	8002f88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f40:	69fb      	ldr	r3, [r7, #28]
 8002f42:	08da      	lsrs	r2, r3, #3
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	3208      	adds	r2, #8
 8002f48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002f4e:	69fb      	ldr	r3, [r7, #28]
 8002f50:	f003 0307 	and.w	r3, r3, #7
 8002f54:	009b      	lsls	r3, r3, #2
 8002f56:	220f      	movs	r2, #15
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	43db      	mvns	r3, r3
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4013      	ands	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691a      	ldr	r2, [r3, #16]
 8002f68:	69fb      	ldr	r3, [r7, #28]
 8002f6a:	f003 0307 	and.w	r3, r3, #7
 8002f6e:	009b      	lsls	r3, r3, #2
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002f7a:	69fb      	ldr	r3, [r7, #28]
 8002f7c:	08da      	lsrs	r2, r3, #3
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	3208      	adds	r2, #8
 8002f82:	69b9      	ldr	r1, [r7, #24]
 8002f84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002f8e:	69fb      	ldr	r3, [r7, #28]
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	2203      	movs	r2, #3
 8002f94:	fa02 f303 	lsl.w	r3, r2, r3
 8002f98:	43db      	mvns	r3, r3
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fa0:	683b      	ldr	r3, [r7, #0]
 8002fa2:	685b      	ldr	r3, [r3, #4]
 8002fa4:	f003 0203 	and.w	r2, r3, #3
 8002fa8:	69fb      	ldr	r3, [r7, #28]
 8002faa:	005b      	lsls	r3, r3, #1
 8002fac:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4313      	orrs	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	685b      	ldr	r3, [r3, #4]
 8002fc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	f000 80a2 	beq.w	800310e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fca:	2300      	movs	r3, #0
 8002fcc:	60fb      	str	r3, [r7, #12]
 8002fce:	4b57      	ldr	r3, [pc, #348]	; (800312c <HAL_GPIO_Init+0x2e8>)
 8002fd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fd2:	4a56      	ldr	r2, [pc, #344]	; (800312c <HAL_GPIO_Init+0x2e8>)
 8002fd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fd8:	6453      	str	r3, [r2, #68]	; 0x44
 8002fda:	4b54      	ldr	r3, [pc, #336]	; (800312c <HAL_GPIO_Init+0x2e8>)
 8002fdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fe2:	60fb      	str	r3, [r7, #12]
 8002fe4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002fe6:	4a52      	ldr	r2, [pc, #328]	; (8003130 <HAL_GPIO_Init+0x2ec>)
 8002fe8:	69fb      	ldr	r3, [r7, #28]
 8002fea:	089b      	lsrs	r3, r3, #2
 8002fec:	3302      	adds	r3, #2
 8002fee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ff4:	69fb      	ldr	r3, [r7, #28]
 8002ff6:	f003 0303 	and.w	r3, r3, #3
 8002ffa:	009b      	lsls	r3, r3, #2
 8002ffc:	220f      	movs	r2, #15
 8002ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	4a49      	ldr	r2, [pc, #292]	; (8003134 <HAL_GPIO_Init+0x2f0>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d019      	beq.n	8003046 <HAL_GPIO_Init+0x202>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a48      	ldr	r2, [pc, #288]	; (8003138 <HAL_GPIO_Init+0x2f4>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d013      	beq.n	8003042 <HAL_GPIO_Init+0x1fe>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	4a47      	ldr	r2, [pc, #284]	; (800313c <HAL_GPIO_Init+0x2f8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d00d      	beq.n	800303e <HAL_GPIO_Init+0x1fa>
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	4a46      	ldr	r2, [pc, #280]	; (8003140 <HAL_GPIO_Init+0x2fc>)
 8003026:	4293      	cmp	r3, r2
 8003028:	d007      	beq.n	800303a <HAL_GPIO_Init+0x1f6>
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	4a45      	ldr	r2, [pc, #276]	; (8003144 <HAL_GPIO_Init+0x300>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d101      	bne.n	8003036 <HAL_GPIO_Init+0x1f2>
 8003032:	2304      	movs	r3, #4
 8003034:	e008      	b.n	8003048 <HAL_GPIO_Init+0x204>
 8003036:	2307      	movs	r3, #7
 8003038:	e006      	b.n	8003048 <HAL_GPIO_Init+0x204>
 800303a:	2303      	movs	r3, #3
 800303c:	e004      	b.n	8003048 <HAL_GPIO_Init+0x204>
 800303e:	2302      	movs	r3, #2
 8003040:	e002      	b.n	8003048 <HAL_GPIO_Init+0x204>
 8003042:	2301      	movs	r3, #1
 8003044:	e000      	b.n	8003048 <HAL_GPIO_Init+0x204>
 8003046:	2300      	movs	r3, #0
 8003048:	69fa      	ldr	r2, [r7, #28]
 800304a:	f002 0203 	and.w	r2, r2, #3
 800304e:	0092      	lsls	r2, r2, #2
 8003050:	4093      	lsls	r3, r2
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003058:	4935      	ldr	r1, [pc, #212]	; (8003130 <HAL_GPIO_Init+0x2ec>)
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	089b      	lsrs	r3, r3, #2
 800305e:	3302      	adds	r3, #2
 8003060:	69ba      	ldr	r2, [r7, #24]
 8003062:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003066:	4b38      	ldr	r3, [pc, #224]	; (8003148 <HAL_GPIO_Init+0x304>)
 8003068:	689b      	ldr	r3, [r3, #8]
 800306a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800306c:	693b      	ldr	r3, [r7, #16]
 800306e:	43db      	mvns	r3, r3
 8003070:	69ba      	ldr	r2, [r7, #24]
 8003072:	4013      	ands	r3, r2
 8003074:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d003      	beq.n	800308a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003082:	69ba      	ldr	r2, [r7, #24]
 8003084:	693b      	ldr	r3, [r7, #16]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800308a:	4a2f      	ldr	r2, [pc, #188]	; (8003148 <HAL_GPIO_Init+0x304>)
 800308c:	69bb      	ldr	r3, [r7, #24]
 800308e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003090:	4b2d      	ldr	r3, [pc, #180]	; (8003148 <HAL_GPIO_Init+0x304>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	43db      	mvns	r3, r3
 800309a:	69ba      	ldr	r2, [r7, #24]
 800309c:	4013      	ands	r3, r2
 800309e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d003      	beq.n	80030b4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80030b4:	4a24      	ldr	r2, [pc, #144]	; (8003148 <HAL_GPIO_Init+0x304>)
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030ba:	4b23      	ldr	r3, [pc, #140]	; (8003148 <HAL_GPIO_Init+0x304>)
 80030bc:	685b      	ldr	r3, [r3, #4]
 80030be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030c0:	693b      	ldr	r3, [r7, #16]
 80030c2:	43db      	mvns	r3, r3
 80030c4:	69ba      	ldr	r2, [r7, #24]
 80030c6:	4013      	ands	r3, r2
 80030c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	685b      	ldr	r3, [r3, #4]
 80030ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d003      	beq.n	80030de <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	693b      	ldr	r3, [r7, #16]
 80030da:	4313      	orrs	r3, r2
 80030dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80030de:	4a1a      	ldr	r2, [pc, #104]	; (8003148 <HAL_GPIO_Init+0x304>)
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030e4:	4b18      	ldr	r3, [pc, #96]	; (8003148 <HAL_GPIO_Init+0x304>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	43db      	mvns	r3, r3
 80030ee:	69ba      	ldr	r2, [r7, #24]
 80030f0:	4013      	ands	r3, r2
 80030f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80030f4:	683b      	ldr	r3, [r7, #0]
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d003      	beq.n	8003108 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003100:	69ba      	ldr	r2, [r7, #24]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003108:	4a0f      	ldr	r2, [pc, #60]	; (8003148 <HAL_GPIO_Init+0x304>)
 800310a:	69bb      	ldr	r3, [r7, #24]
 800310c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	3301      	adds	r3, #1
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	69fb      	ldr	r3, [r7, #28]
 8003116:	2b0f      	cmp	r3, #15
 8003118:	f67f aea2 	bls.w	8002e60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800311c:	bf00      	nop
 800311e:	bf00      	nop
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	40013800 	.word	0x40013800
 8003134:	40020000 	.word	0x40020000
 8003138:	40020400 	.word	0x40020400
 800313c:	40020800 	.word	0x40020800
 8003140:	40020c00 	.word	0x40020c00
 8003144:	40021000 	.word	0x40021000
 8003148:	40013c00 	.word	0x40013c00

0800314c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
 8003154:	460b      	mov	r3, r1
 8003156:	807b      	strh	r3, [r7, #2]
 8003158:	4613      	mov	r3, r2
 800315a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800315c:	787b      	ldrb	r3, [r7, #1]
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003162:	887a      	ldrh	r2, [r7, #2]
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003168:	e003      	b.n	8003172 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800316a:	887b      	ldrh	r3, [r7, #2]
 800316c:	041a      	lsls	r2, r3, #16
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	619a      	str	r2, [r3, #24]
}
 8003172:	bf00      	nop
 8003174:	370c      	adds	r7, #12
 8003176:	46bd      	mov	sp, r7
 8003178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317c:	4770      	bx	lr

0800317e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800317e:	b480      	push	{r7}
 8003180:	b085      	sub	sp, #20
 8003182:	af00      	add	r7, sp, #0
 8003184:	6078      	str	r0, [r7, #4]
 8003186:	460b      	mov	r3, r1
 8003188:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	695b      	ldr	r3, [r3, #20]
 800318e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003190:	887a      	ldrh	r2, [r7, #2]
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	4013      	ands	r3, r2
 8003196:	041a      	lsls	r2, r3, #16
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	43d9      	mvns	r1, r3
 800319c:	887b      	ldrh	r3, [r7, #2]
 800319e:	400b      	ands	r3, r1
 80031a0:	431a      	orrs	r2, r3
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	619a      	str	r2, [r3, #24]
}
 80031a6:	bf00      	nop
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr
	...

080031b4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b086      	sub	sp, #24
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d101      	bne.n	80031c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031c2:	2301      	movs	r3, #1
 80031c4:	e267      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	f003 0301 	and.w	r3, r3, #1
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d075      	beq.n	80032be <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031d2:	4b88      	ldr	r3, [pc, #544]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031d4:	689b      	ldr	r3, [r3, #8]
 80031d6:	f003 030c 	and.w	r3, r3, #12
 80031da:	2b04      	cmp	r3, #4
 80031dc:	d00c      	beq.n	80031f8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031de:	4b85      	ldr	r3, [pc, #532]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031e0:	689b      	ldr	r3, [r3, #8]
 80031e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031e6:	2b08      	cmp	r3, #8
 80031e8:	d112      	bne.n	8003210 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031ea:	4b82      	ldr	r3, [pc, #520]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031ec:	685b      	ldr	r3, [r3, #4]
 80031ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031f2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031f6:	d10b      	bne.n	8003210 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031f8:	4b7e      	ldr	r3, [pc, #504]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003200:	2b00      	cmp	r3, #0
 8003202:	d05b      	beq.n	80032bc <HAL_RCC_OscConfig+0x108>
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	2b00      	cmp	r3, #0
 800320a:	d157      	bne.n	80032bc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800320c:	2301      	movs	r3, #1
 800320e:	e242      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003218:	d106      	bne.n	8003228 <HAL_RCC_OscConfig+0x74>
 800321a:	4b76      	ldr	r3, [pc, #472]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	4a75      	ldr	r2, [pc, #468]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003220:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003224:	6013      	str	r3, [r2, #0]
 8003226:	e01d      	b.n	8003264 <HAL_RCC_OscConfig+0xb0>
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	685b      	ldr	r3, [r3, #4]
 800322c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003230:	d10c      	bne.n	800324c <HAL_RCC_OscConfig+0x98>
 8003232:	4b70      	ldr	r3, [pc, #448]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4a6f      	ldr	r2, [pc, #444]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003238:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800323c:	6013      	str	r3, [r2, #0]
 800323e:	4b6d      	ldr	r3, [pc, #436]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	4a6c      	ldr	r2, [pc, #432]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003248:	6013      	str	r3, [r2, #0]
 800324a:	e00b      	b.n	8003264 <HAL_RCC_OscConfig+0xb0>
 800324c:	4b69      	ldr	r3, [pc, #420]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	4a68      	ldr	r2, [pc, #416]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003252:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003256:	6013      	str	r3, [r2, #0]
 8003258:	4b66      	ldr	r3, [pc, #408]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4a65      	ldr	r2, [pc, #404]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 800325e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003262:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d013      	beq.n	8003294 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800326c:	f7ff fa72 	bl	8002754 <HAL_GetTick>
 8003270:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003272:	e008      	b.n	8003286 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003274:	f7ff fa6e 	bl	8002754 <HAL_GetTick>
 8003278:	4602      	mov	r2, r0
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	1ad3      	subs	r3, r2, r3
 800327e:	2b64      	cmp	r3, #100	; 0x64
 8003280:	d901      	bls.n	8003286 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e207      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003286:	4b5b      	ldr	r3, [pc, #364]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d0f0      	beq.n	8003274 <HAL_RCC_OscConfig+0xc0>
 8003292:	e014      	b.n	80032be <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003294:	f7ff fa5e 	bl	8002754 <HAL_GetTick>
 8003298:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800329a:	e008      	b.n	80032ae <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800329c:	f7ff fa5a 	bl	8002754 <HAL_GetTick>
 80032a0:	4602      	mov	r2, r0
 80032a2:	693b      	ldr	r3, [r7, #16]
 80032a4:	1ad3      	subs	r3, r2, r3
 80032a6:	2b64      	cmp	r3, #100	; 0x64
 80032a8:	d901      	bls.n	80032ae <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032aa:	2303      	movs	r3, #3
 80032ac:	e1f3      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032ae:	4b51      	ldr	r3, [pc, #324]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d1f0      	bne.n	800329c <HAL_RCC_OscConfig+0xe8>
 80032ba:	e000      	b.n	80032be <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032bc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f003 0302 	and.w	r3, r3, #2
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d063      	beq.n	8003392 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032ca:	4b4a      	ldr	r3, [pc, #296]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032cc:	689b      	ldr	r3, [r3, #8]
 80032ce:	f003 030c 	and.w	r3, r3, #12
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00b      	beq.n	80032ee <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032d6:	4b47      	ldr	r3, [pc, #284]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032de:	2b08      	cmp	r3, #8
 80032e0:	d11c      	bne.n	800331c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032e2:	4b44      	ldr	r3, [pc, #272]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d116      	bne.n	800331c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032ee:	4b41      	ldr	r3, [pc, #260]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f003 0302 	and.w	r3, r3, #2
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d005      	beq.n	8003306 <HAL_RCC_OscConfig+0x152>
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	68db      	ldr	r3, [r3, #12]
 80032fe:	2b01      	cmp	r3, #1
 8003300:	d001      	beq.n	8003306 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003302:	2301      	movs	r3, #1
 8003304:	e1c7      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003306:	4b3b      	ldr	r3, [pc, #236]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	691b      	ldr	r3, [r3, #16]
 8003312:	00db      	lsls	r3, r3, #3
 8003314:	4937      	ldr	r1, [pc, #220]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003316:	4313      	orrs	r3, r2
 8003318:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331a:	e03a      	b.n	8003392 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	68db      	ldr	r3, [r3, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d020      	beq.n	8003366 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003324:	4b34      	ldr	r3, [pc, #208]	; (80033f8 <HAL_RCC_OscConfig+0x244>)
 8003326:	2201      	movs	r2, #1
 8003328:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800332a:	f7ff fa13 	bl	8002754 <HAL_GetTick>
 800332e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003330:	e008      	b.n	8003344 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003332:	f7ff fa0f 	bl	8002754 <HAL_GetTick>
 8003336:	4602      	mov	r2, r0
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	1ad3      	subs	r3, r2, r3
 800333c:	2b02      	cmp	r3, #2
 800333e:	d901      	bls.n	8003344 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003340:	2303      	movs	r3, #3
 8003342:	e1a8      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003344:	4b2b      	ldr	r3, [pc, #172]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f003 0302 	and.w	r3, r3, #2
 800334c:	2b00      	cmp	r3, #0
 800334e:	d0f0      	beq.n	8003332 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003350:	4b28      	ldr	r3, [pc, #160]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	00db      	lsls	r3, r3, #3
 800335e:	4925      	ldr	r1, [pc, #148]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003360:	4313      	orrs	r3, r2
 8003362:	600b      	str	r3, [r1, #0]
 8003364:	e015      	b.n	8003392 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003366:	4b24      	ldr	r3, [pc, #144]	; (80033f8 <HAL_RCC_OscConfig+0x244>)
 8003368:	2200      	movs	r2, #0
 800336a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800336c:	f7ff f9f2 	bl	8002754 <HAL_GetTick>
 8003370:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003372:	e008      	b.n	8003386 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003374:	f7ff f9ee 	bl	8002754 <HAL_GetTick>
 8003378:	4602      	mov	r2, r0
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	1ad3      	subs	r3, r2, r3
 800337e:	2b02      	cmp	r3, #2
 8003380:	d901      	bls.n	8003386 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003382:	2303      	movs	r3, #3
 8003384:	e187      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003386:	4b1b      	ldr	r3, [pc, #108]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f003 0302 	and.w	r3, r3, #2
 800338e:	2b00      	cmp	r3, #0
 8003390:	d1f0      	bne.n	8003374 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0308 	and.w	r3, r3, #8
 800339a:	2b00      	cmp	r3, #0
 800339c:	d036      	beq.n	800340c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	695b      	ldr	r3, [r3, #20]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d016      	beq.n	80033d4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a6:	4b15      	ldr	r3, [pc, #84]	; (80033fc <HAL_RCC_OscConfig+0x248>)
 80033a8:	2201      	movs	r2, #1
 80033aa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7ff f9d2 	bl	8002754 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b4:	f7ff f9ce 	bl	8002754 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e167      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033c6:	4b0b      	ldr	r3, [pc, #44]	; (80033f4 <HAL_RCC_OscConfig+0x240>)
 80033c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x200>
 80033d2:	e01b      	b.n	800340c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d4:	4b09      	ldr	r3, [pc, #36]	; (80033fc <HAL_RCC_OscConfig+0x248>)
 80033d6:	2200      	movs	r2, #0
 80033d8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033da:	f7ff f9bb 	bl	8002754 <HAL_GetTick>
 80033de:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e0:	e00e      	b.n	8003400 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e2:	f7ff f9b7 	bl	8002754 <HAL_GetTick>
 80033e6:	4602      	mov	r2, r0
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	1ad3      	subs	r3, r2, r3
 80033ec:	2b02      	cmp	r3, #2
 80033ee:	d907      	bls.n	8003400 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033f0:	2303      	movs	r3, #3
 80033f2:	e150      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
 80033f4:	40023800 	.word	0x40023800
 80033f8:	42470000 	.word	0x42470000
 80033fc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003400:	4b88      	ldr	r3, [pc, #544]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003402:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003404:	f003 0302 	and.w	r3, r3, #2
 8003408:	2b00      	cmp	r3, #0
 800340a:	d1ea      	bne.n	80033e2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	f003 0304 	and.w	r3, r3, #4
 8003414:	2b00      	cmp	r3, #0
 8003416:	f000 8097 	beq.w	8003548 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800341a:	2300      	movs	r3, #0
 800341c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800341e:	4b81      	ldr	r3, [pc, #516]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003426:	2b00      	cmp	r3, #0
 8003428:	d10f      	bne.n	800344a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800342a:	2300      	movs	r3, #0
 800342c:	60bb      	str	r3, [r7, #8]
 800342e:	4b7d      	ldr	r3, [pc, #500]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003432:	4a7c      	ldr	r2, [pc, #496]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003438:	6413      	str	r3, [r2, #64]	; 0x40
 800343a:	4b7a      	ldr	r3, [pc, #488]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 800343c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003442:	60bb      	str	r3, [r7, #8]
 8003444:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003446:	2301      	movs	r3, #1
 8003448:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800344a:	4b77      	ldr	r3, [pc, #476]	; (8003628 <HAL_RCC_OscConfig+0x474>)
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003452:	2b00      	cmp	r3, #0
 8003454:	d118      	bne.n	8003488 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003456:	4b74      	ldr	r3, [pc, #464]	; (8003628 <HAL_RCC_OscConfig+0x474>)
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	4a73      	ldr	r2, [pc, #460]	; (8003628 <HAL_RCC_OscConfig+0x474>)
 800345c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003460:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003462:	f7ff f977 	bl	8002754 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800346a:	f7ff f973 	bl	8002754 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e10c      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800347c:	4b6a      	ldr	r3, [pc, #424]	; (8003628 <HAL_RCC_OscConfig+0x474>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	2b01      	cmp	r3, #1
 800348e:	d106      	bne.n	800349e <HAL_RCC_OscConfig+0x2ea>
 8003490:	4b64      	ldr	r3, [pc, #400]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003492:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003494:	4a63      	ldr	r2, [pc, #396]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003496:	f043 0301 	orr.w	r3, r3, #1
 800349a:	6713      	str	r3, [r2, #112]	; 0x70
 800349c:	e01c      	b.n	80034d8 <HAL_RCC_OscConfig+0x324>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	689b      	ldr	r3, [r3, #8]
 80034a2:	2b05      	cmp	r3, #5
 80034a4:	d10c      	bne.n	80034c0 <HAL_RCC_OscConfig+0x30c>
 80034a6:	4b5f      	ldr	r3, [pc, #380]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034aa:	4a5e      	ldr	r2, [pc, #376]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034ac:	f043 0304 	orr.w	r3, r3, #4
 80034b0:	6713      	str	r3, [r2, #112]	; 0x70
 80034b2:	4b5c      	ldr	r3, [pc, #368]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b6:	4a5b      	ldr	r2, [pc, #364]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034b8:	f043 0301 	orr.w	r3, r3, #1
 80034bc:	6713      	str	r3, [r2, #112]	; 0x70
 80034be:	e00b      	b.n	80034d8 <HAL_RCC_OscConfig+0x324>
 80034c0:	4b58      	ldr	r3, [pc, #352]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c4:	4a57      	ldr	r2, [pc, #348]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034c6:	f023 0301 	bic.w	r3, r3, #1
 80034ca:	6713      	str	r3, [r2, #112]	; 0x70
 80034cc:	4b55      	ldr	r3, [pc, #340]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d0:	4a54      	ldr	r2, [pc, #336]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80034d2:	f023 0304 	bic.w	r3, r3, #4
 80034d6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d015      	beq.n	800350c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e0:	f7ff f938 	bl	8002754 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034e6:	e00a      	b.n	80034fe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034e8:	f7ff f934 	bl	8002754 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d901      	bls.n	80034fe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e0cb      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034fe:	4b49      	ldr	r3, [pc, #292]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003502:	f003 0302 	and.w	r3, r3, #2
 8003506:	2b00      	cmp	r3, #0
 8003508:	d0ee      	beq.n	80034e8 <HAL_RCC_OscConfig+0x334>
 800350a:	e014      	b.n	8003536 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800350c:	f7ff f922 	bl	8002754 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003512:	e00a      	b.n	800352a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003514:	f7ff f91e 	bl	8002754 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003522:	4293      	cmp	r3, r2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e0b5      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800352a:	4b3e      	ldr	r3, [pc, #248]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 800352c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800352e:	f003 0302 	and.w	r3, r3, #2
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1ee      	bne.n	8003514 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003536:	7dfb      	ldrb	r3, [r7, #23]
 8003538:	2b01      	cmp	r3, #1
 800353a:	d105      	bne.n	8003548 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353c:	4b39      	ldr	r3, [pc, #228]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 800353e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003540:	4a38      	ldr	r2, [pc, #224]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003542:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003546:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	2b00      	cmp	r3, #0
 800354e:	f000 80a1 	beq.w	8003694 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003552:	4b34      	ldr	r3, [pc, #208]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
 800355a:	2b08      	cmp	r3, #8
 800355c:	d05c      	beq.n	8003618 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	699b      	ldr	r3, [r3, #24]
 8003562:	2b02      	cmp	r3, #2
 8003564:	d141      	bne.n	80035ea <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003566:	4b31      	ldr	r3, [pc, #196]	; (800362c <HAL_RCC_OscConfig+0x478>)
 8003568:	2200      	movs	r2, #0
 800356a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800356c:	f7ff f8f2 	bl	8002754 <HAL_GetTick>
 8003570:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003572:	e008      	b.n	8003586 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003574:	f7ff f8ee 	bl	8002754 <HAL_GetTick>
 8003578:	4602      	mov	r2, r0
 800357a:	693b      	ldr	r3, [r7, #16]
 800357c:	1ad3      	subs	r3, r2, r3
 800357e:	2b02      	cmp	r3, #2
 8003580:	d901      	bls.n	8003586 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003582:	2303      	movs	r3, #3
 8003584:	e087      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003586:	4b27      	ldr	r3, [pc, #156]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800358e:	2b00      	cmp	r3, #0
 8003590:	d1f0      	bne.n	8003574 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	69da      	ldr	r2, [r3, #28]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	6a1b      	ldr	r3, [r3, #32]
 800359a:	431a      	orrs	r2, r3
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a0:	019b      	lsls	r3, r3, #6
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035a8:	085b      	lsrs	r3, r3, #1
 80035aa:	3b01      	subs	r3, #1
 80035ac:	041b      	lsls	r3, r3, #16
 80035ae:	431a      	orrs	r2, r3
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035b4:	061b      	lsls	r3, r3, #24
 80035b6:	491b      	ldr	r1, [pc, #108]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80035b8:	4313      	orrs	r3, r2
 80035ba:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035bc:	4b1b      	ldr	r3, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x478>)
 80035be:	2201      	movs	r2, #1
 80035c0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035c2:	f7ff f8c7 	bl	8002754 <HAL_GetTick>
 80035c6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c8:	e008      	b.n	80035dc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ca:	f7ff f8c3 	bl	8002754 <HAL_GetTick>
 80035ce:	4602      	mov	r2, r0
 80035d0:	693b      	ldr	r3, [r7, #16]
 80035d2:	1ad3      	subs	r3, r2, r3
 80035d4:	2b02      	cmp	r3, #2
 80035d6:	d901      	bls.n	80035dc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035d8:	2303      	movs	r3, #3
 80035da:	e05c      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035dc:	4b11      	ldr	r3, [pc, #68]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d0f0      	beq.n	80035ca <HAL_RCC_OscConfig+0x416>
 80035e8:	e054      	b.n	8003694 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ea:	4b10      	ldr	r3, [pc, #64]	; (800362c <HAL_RCC_OscConfig+0x478>)
 80035ec:	2200      	movs	r2, #0
 80035ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f0:	f7ff f8b0 	bl	8002754 <HAL_GetTick>
 80035f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035f6:	e008      	b.n	800360a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035f8:	f7ff f8ac 	bl	8002754 <HAL_GetTick>
 80035fc:	4602      	mov	r2, r0
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	1ad3      	subs	r3, r2, r3
 8003602:	2b02      	cmp	r3, #2
 8003604:	d901      	bls.n	800360a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003606:	2303      	movs	r3, #3
 8003608:	e045      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <HAL_RCC_OscConfig+0x470>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003612:	2b00      	cmp	r3, #0
 8003614:	d1f0      	bne.n	80035f8 <HAL_RCC_OscConfig+0x444>
 8003616:	e03d      	b.n	8003694 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	699b      	ldr	r3, [r3, #24]
 800361c:	2b01      	cmp	r3, #1
 800361e:	d107      	bne.n	8003630 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003620:	2301      	movs	r3, #1
 8003622:	e038      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
 8003624:	40023800 	.word	0x40023800
 8003628:	40007000 	.word	0x40007000
 800362c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003630:	4b1b      	ldr	r3, [pc, #108]	; (80036a0 <HAL_RCC_OscConfig+0x4ec>)
 8003632:	685b      	ldr	r3, [r3, #4]
 8003634:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d028      	beq.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003648:	429a      	cmp	r2, r3
 800364a:	d121      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003656:	429a      	cmp	r2, r3
 8003658:	d11a      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800365a:	68fa      	ldr	r2, [r7, #12]
 800365c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003660:	4013      	ands	r3, r2
 8003662:	687a      	ldr	r2, [r7, #4]
 8003664:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003666:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003668:	4293      	cmp	r3, r2
 800366a:	d111      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003676:	085b      	lsrs	r3, r3, #1
 8003678:	3b01      	subs	r3, #1
 800367a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800367c:	429a      	cmp	r2, r3
 800367e:	d107      	bne.n	8003690 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800368a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800368c:	429a      	cmp	r2, r3
 800368e:	d001      	beq.n	8003694 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003690:	2301      	movs	r3, #1
 8003692:	e000      	b.n	8003696 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003694:	2300      	movs	r3, #0
}
 8003696:	4618      	mov	r0, r3
 8003698:	3718      	adds	r7, #24
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	40023800 	.word	0x40023800

080036a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036a4:	b580      	push	{r7, lr}
 80036a6:	b084      	sub	sp, #16
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2b00      	cmp	r3, #0
 80036b2:	d101      	bne.n	80036b8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	e0cc      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036b8:	4b68      	ldr	r3, [pc, #416]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	f003 0307 	and.w	r3, r3, #7
 80036c0:	683a      	ldr	r2, [r7, #0]
 80036c2:	429a      	cmp	r2, r3
 80036c4:	d90c      	bls.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036c6:	4b65      	ldr	r3, [pc, #404]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036ce:	4b63      	ldr	r3, [pc, #396]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0307 	and.w	r3, r3, #7
 80036d6:	683a      	ldr	r2, [r7, #0]
 80036d8:	429a      	cmp	r2, r3
 80036da:	d001      	beq.n	80036e0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e0b8      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 0302 	and.w	r3, r3, #2
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d020      	beq.n	800372e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0304 	and.w	r3, r3, #4
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d005      	beq.n	8003704 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80036f8:	4b59      	ldr	r3, [pc, #356]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	4a58      	ldr	r2, [pc, #352]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80036fe:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003702:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b00      	cmp	r3, #0
 800370e:	d005      	beq.n	800371c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003710:	4b53      	ldr	r3, [pc, #332]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	4a52      	ldr	r2, [pc, #328]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003716:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800371a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800371c:	4b50      	ldr	r3, [pc, #320]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	494d      	ldr	r1, [pc, #308]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 800372a:	4313      	orrs	r3, r2
 800372c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	f003 0301 	and.w	r3, r3, #1
 8003736:	2b00      	cmp	r3, #0
 8003738:	d044      	beq.n	80037c4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	685b      	ldr	r3, [r3, #4]
 800373e:	2b01      	cmp	r3, #1
 8003740:	d107      	bne.n	8003752 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003742:	4b47      	ldr	r3, [pc, #284]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800374a:	2b00      	cmp	r3, #0
 800374c:	d119      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800374e:	2301      	movs	r3, #1
 8003750:	e07f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	2b02      	cmp	r3, #2
 8003758:	d003      	beq.n	8003762 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375e:	2b03      	cmp	r3, #3
 8003760:	d107      	bne.n	8003772 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003762:	4b3f      	ldr	r3, [pc, #252]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800376a:	2b00      	cmp	r3, #0
 800376c:	d109      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800376e:	2301      	movs	r3, #1
 8003770:	e06f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003772:	4b3b      	ldr	r3, [pc, #236]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d101      	bne.n	8003782 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e067      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003782:	4b37      	ldr	r3, [pc, #220]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003784:	689b      	ldr	r3, [r3, #8]
 8003786:	f023 0203 	bic.w	r2, r3, #3
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	4934      	ldr	r1, [pc, #208]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003790:	4313      	orrs	r3, r2
 8003792:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003794:	f7fe ffde 	bl	8002754 <HAL_GetTick>
 8003798:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800379a:	e00a      	b.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800379c:	f7fe ffda 	bl	8002754 <HAL_GetTick>
 80037a0:	4602      	mov	r2, r0
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	1ad3      	subs	r3, r2, r3
 80037a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e04f      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037b2:	4b2b      	ldr	r3, [pc, #172]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 020c 	and.w	r2, r3, #12
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	685b      	ldr	r3, [r3, #4]
 80037be:	009b      	lsls	r3, r3, #2
 80037c0:	429a      	cmp	r2, r3
 80037c2:	d1eb      	bne.n	800379c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037c4:	4b25      	ldr	r3, [pc, #148]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0307 	and.w	r3, r3, #7
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	429a      	cmp	r2, r3
 80037d0:	d20c      	bcs.n	80037ec <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d2:	4b22      	ldr	r3, [pc, #136]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	b2d2      	uxtb	r2, r2
 80037d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037da:	4b20      	ldr	r3, [pc, #128]	; (800385c <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	683a      	ldr	r2, [r7, #0]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d001      	beq.n	80037ec <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e032      	b.n	8003852 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f003 0304 	and.w	r3, r3, #4
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d008      	beq.n	800380a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 80037fa:	689b      	ldr	r3, [r3, #8]
 80037fc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	68db      	ldr	r3, [r3, #12]
 8003804:	4916      	ldr	r1, [pc, #88]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003806:	4313      	orrs	r3, r2
 8003808:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f003 0308 	and.w	r3, r3, #8
 8003812:	2b00      	cmp	r3, #0
 8003814:	d009      	beq.n	800382a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003816:	4b12      	ldr	r3, [pc, #72]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	689b      	ldr	r3, [r3, #8]
 800381a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	691b      	ldr	r3, [r3, #16]
 8003822:	00db      	lsls	r3, r3, #3
 8003824:	490e      	ldr	r1, [pc, #56]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003826:	4313      	orrs	r3, r2
 8003828:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800382a:	f000 f821 	bl	8003870 <HAL_RCC_GetSysClockFreq>
 800382e:	4602      	mov	r2, r0
 8003830:	4b0b      	ldr	r3, [pc, #44]	; (8003860 <HAL_RCC_ClockConfig+0x1bc>)
 8003832:	689b      	ldr	r3, [r3, #8]
 8003834:	091b      	lsrs	r3, r3, #4
 8003836:	f003 030f 	and.w	r3, r3, #15
 800383a:	490a      	ldr	r1, [pc, #40]	; (8003864 <HAL_RCC_ClockConfig+0x1c0>)
 800383c:	5ccb      	ldrb	r3, [r1, r3]
 800383e:	fa22 f303 	lsr.w	r3, r2, r3
 8003842:	4a09      	ldr	r2, [pc, #36]	; (8003868 <HAL_RCC_ClockConfig+0x1c4>)
 8003844:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003846:	4b09      	ldr	r3, [pc, #36]	; (800386c <HAL_RCC_ClockConfig+0x1c8>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	4618      	mov	r0, r3
 800384c:	f7fe ff3e 	bl	80026cc <HAL_InitTick>

  return HAL_OK;
 8003850:	2300      	movs	r3, #0
}
 8003852:	4618      	mov	r0, r3
 8003854:	3710      	adds	r7, #16
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	40023c00 	.word	0x40023c00
 8003860:	40023800 	.word	0x40023800
 8003864:	08005d54 	.word	0x08005d54
 8003868:	20000008 	.word	0x20000008
 800386c:	2000000c 	.word	0x2000000c

08003870 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003874:	b090      	sub	sp, #64	; 0x40
 8003876:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003878:	2300      	movs	r3, #0
 800387a:	637b      	str	r3, [r7, #52]	; 0x34
 800387c:	2300      	movs	r3, #0
 800387e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003880:	2300      	movs	r3, #0
 8003882:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003884:	2300      	movs	r3, #0
 8003886:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003888:	4b59      	ldr	r3, [pc, #356]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 030c 	and.w	r3, r3, #12
 8003890:	2b08      	cmp	r3, #8
 8003892:	d00d      	beq.n	80038b0 <HAL_RCC_GetSysClockFreq+0x40>
 8003894:	2b08      	cmp	r3, #8
 8003896:	f200 80a1 	bhi.w	80039dc <HAL_RCC_GetSysClockFreq+0x16c>
 800389a:	2b00      	cmp	r3, #0
 800389c:	d002      	beq.n	80038a4 <HAL_RCC_GetSysClockFreq+0x34>
 800389e:	2b04      	cmp	r3, #4
 80038a0:	d003      	beq.n	80038aa <HAL_RCC_GetSysClockFreq+0x3a>
 80038a2:	e09b      	b.n	80039dc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038a4:	4b53      	ldr	r3, [pc, #332]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80038a6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80038a8:	e09b      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038aa:	4b53      	ldr	r3, [pc, #332]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80038ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038ae:	e098      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b0:	4b4f      	ldr	r3, [pc, #316]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038b2:	685b      	ldr	r3, [r3, #4]
 80038b4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038b8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038ba:	4b4d      	ldr	r3, [pc, #308]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d028      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038c6:	4b4a      	ldr	r3, [pc, #296]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	099b      	lsrs	r3, r3, #6
 80038cc:	2200      	movs	r2, #0
 80038ce:	623b      	str	r3, [r7, #32]
 80038d0:	627a      	str	r2, [r7, #36]	; 0x24
 80038d2:	6a3b      	ldr	r3, [r7, #32]
 80038d4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038d8:	2100      	movs	r1, #0
 80038da:	4b47      	ldr	r3, [pc, #284]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80038dc:	fb03 f201 	mul.w	r2, r3, r1
 80038e0:	2300      	movs	r3, #0
 80038e2:	fb00 f303 	mul.w	r3, r0, r3
 80038e6:	4413      	add	r3, r2
 80038e8:	4a43      	ldr	r2, [pc, #268]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x188>)
 80038ea:	fba0 1202 	umull	r1, r2, r0, r2
 80038ee:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038f0:	460a      	mov	r2, r1
 80038f2:	62ba      	str	r2, [r7, #40]	; 0x28
 80038f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038f6:	4413      	add	r3, r2
 80038f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80038fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80038fc:	2200      	movs	r2, #0
 80038fe:	61bb      	str	r3, [r7, #24]
 8003900:	61fa      	str	r2, [r7, #28]
 8003902:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003906:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800390a:	f7fd f933 	bl	8000b74 <__aeabi_uldivmod>
 800390e:	4602      	mov	r2, r0
 8003910:	460b      	mov	r3, r1
 8003912:	4613      	mov	r3, r2
 8003914:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003916:	e053      	b.n	80039c0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003918:	4b35      	ldr	r3, [pc, #212]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	099b      	lsrs	r3, r3, #6
 800391e:	2200      	movs	r2, #0
 8003920:	613b      	str	r3, [r7, #16]
 8003922:	617a      	str	r2, [r7, #20]
 8003924:	693b      	ldr	r3, [r7, #16]
 8003926:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800392a:	f04f 0b00 	mov.w	fp, #0
 800392e:	4652      	mov	r2, sl
 8003930:	465b      	mov	r3, fp
 8003932:	f04f 0000 	mov.w	r0, #0
 8003936:	f04f 0100 	mov.w	r1, #0
 800393a:	0159      	lsls	r1, r3, #5
 800393c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003940:	0150      	lsls	r0, r2, #5
 8003942:	4602      	mov	r2, r0
 8003944:	460b      	mov	r3, r1
 8003946:	ebb2 080a 	subs.w	r8, r2, sl
 800394a:	eb63 090b 	sbc.w	r9, r3, fp
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800395a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800395e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003962:	ebb2 0408 	subs.w	r4, r2, r8
 8003966:	eb63 0509 	sbc.w	r5, r3, r9
 800396a:	f04f 0200 	mov.w	r2, #0
 800396e:	f04f 0300 	mov.w	r3, #0
 8003972:	00eb      	lsls	r3, r5, #3
 8003974:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003978:	00e2      	lsls	r2, r4, #3
 800397a:	4614      	mov	r4, r2
 800397c:	461d      	mov	r5, r3
 800397e:	eb14 030a 	adds.w	r3, r4, sl
 8003982:	603b      	str	r3, [r7, #0]
 8003984:	eb45 030b 	adc.w	r3, r5, fp
 8003988:	607b      	str	r3, [r7, #4]
 800398a:	f04f 0200 	mov.w	r2, #0
 800398e:	f04f 0300 	mov.w	r3, #0
 8003992:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003996:	4629      	mov	r1, r5
 8003998:	028b      	lsls	r3, r1, #10
 800399a:	4621      	mov	r1, r4
 800399c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039a0:	4621      	mov	r1, r4
 80039a2:	028a      	lsls	r2, r1, #10
 80039a4:	4610      	mov	r0, r2
 80039a6:	4619      	mov	r1, r3
 80039a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039aa:	2200      	movs	r2, #0
 80039ac:	60bb      	str	r3, [r7, #8]
 80039ae:	60fa      	str	r2, [r7, #12]
 80039b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039b4:	f7fd f8de 	bl	8000b74 <__aeabi_uldivmod>
 80039b8:	4602      	mov	r2, r0
 80039ba:	460b      	mov	r3, r1
 80039bc:	4613      	mov	r3, r2
 80039be:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <HAL_RCC_GetSysClockFreq+0x180>)
 80039c2:	685b      	ldr	r3, [r3, #4]
 80039c4:	0c1b      	lsrs	r3, r3, #16
 80039c6:	f003 0303 	and.w	r3, r3, #3
 80039ca:	3301      	adds	r3, #1
 80039cc:	005b      	lsls	r3, r3, #1
 80039ce:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039d0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80039d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039da:	e002      	b.n	80039e2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039dc:	4b05      	ldr	r3, [pc, #20]	; (80039f4 <HAL_RCC_GetSysClockFreq+0x184>)
 80039de:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039e4:	4618      	mov	r0, r3
 80039e6:	3740      	adds	r7, #64	; 0x40
 80039e8:	46bd      	mov	sp, r7
 80039ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039ee:	bf00      	nop
 80039f0:	40023800 	.word	0x40023800
 80039f4:	00f42400 	.word	0x00f42400
 80039f8:	017d7840 	.word	0x017d7840

080039fc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b082      	sub	sp, #8
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d101      	bne.n	8003a0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e041      	b.n	8003a92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a14:	b2db      	uxtb	r3, r3
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a22:	6878      	ldr	r0, [r7, #4]
 8003a24:	f7fe fda8 	bl	8002578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681a      	ldr	r2, [r3, #0]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	3304      	adds	r3, #4
 8003a38:	4619      	mov	r1, r3
 8003a3a:	4610      	mov	r0, r2
 8003a3c:	f000 f950 	bl	8003ce0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2201      	movs	r2, #1
 8003a44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	2201      	movs	r2, #1
 8003a4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2201      	movs	r2, #1
 8003a64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2201      	movs	r2, #1
 8003a6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	2201      	movs	r2, #1
 8003a84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2201      	movs	r2, #1
 8003a8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a90:	2300      	movs	r3, #0
}
 8003a92:	4618      	mov	r0, r3
 8003a94:	3708      	adds	r7, #8
 8003a96:	46bd      	mov	sp, r7
 8003a98:	bd80      	pop	{r7, pc}
	...

08003a9c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003a9c:	b480      	push	{r7}
 8003a9e:	b085      	sub	sp, #20
 8003aa0:	af00      	add	r7, sp, #0
 8003aa2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aaa:	b2db      	uxtb	r3, r3
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d001      	beq.n	8003ab4 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003ab0:	2301      	movs	r3, #1
 8003ab2:	e03c      	b.n	8003b2e <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2202      	movs	r2, #2
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	4a1e      	ldr	r2, [pc, #120]	; (8003b3c <HAL_TIM_Base_Start+0xa0>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d018      	beq.n	8003af8 <HAL_TIM_Base_Start+0x5c>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ace:	d013      	beq.n	8003af8 <HAL_TIM_Base_Start+0x5c>
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a1a      	ldr	r2, [pc, #104]	; (8003b40 <HAL_TIM_Base_Start+0xa4>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d00e      	beq.n	8003af8 <HAL_TIM_Base_Start+0x5c>
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a19      	ldr	r2, [pc, #100]	; (8003b44 <HAL_TIM_Base_Start+0xa8>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d009      	beq.n	8003af8 <HAL_TIM_Base_Start+0x5c>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	4a17      	ldr	r2, [pc, #92]	; (8003b48 <HAL_TIM_Base_Start+0xac>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d004      	beq.n	8003af8 <HAL_TIM_Base_Start+0x5c>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a16      	ldr	r2, [pc, #88]	; (8003b4c <HAL_TIM_Base_Start+0xb0>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d111      	bne.n	8003b1c <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 0307 	and.w	r3, r3, #7
 8003b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	2b06      	cmp	r3, #6
 8003b08:	d010      	beq.n	8003b2c <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f042 0201 	orr.w	r2, r2, #1
 8003b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b1a:	e007      	b.n	8003b2c <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f042 0201 	orr.w	r2, r2, #1
 8003b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3714      	adds	r7, #20
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr
 8003b3a:	bf00      	nop
 8003b3c:	40010000 	.word	0x40010000
 8003b40:	40000400 	.word	0x40000400
 8003b44:	40000800 	.word	0x40000800
 8003b48:	40000c00 	.word	0x40000c00
 8003b4c:	40014000 	.word	0x40014000

08003b50 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b084      	sub	sp, #16
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
 8003b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b64:	2b01      	cmp	r3, #1
 8003b66:	d101      	bne.n	8003b6c <HAL_TIM_ConfigClockSource+0x1c>
 8003b68:	2302      	movs	r3, #2
 8003b6a:	e0b4      	b.n	8003cd6 <HAL_TIM_ConfigClockSource+0x186>
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2201      	movs	r2, #1
 8003b70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	2202      	movs	r2, #2
 8003b78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003b84:	68bb      	ldr	r3, [r7, #8]
 8003b86:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003b8a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b8c:	68bb      	ldr	r3, [r7, #8]
 8003b8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b92:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003b9c:	683b      	ldr	r3, [r7, #0]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003ba4:	d03e      	beq.n	8003c24 <HAL_TIM_ConfigClockSource+0xd4>
 8003ba6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003baa:	f200 8087 	bhi.w	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
 8003bae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bb2:	f000 8086 	beq.w	8003cc2 <HAL_TIM_ConfigClockSource+0x172>
 8003bb6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003bba:	d87f      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
 8003bbc:	2b70      	cmp	r3, #112	; 0x70
 8003bbe:	d01a      	beq.n	8003bf6 <HAL_TIM_ConfigClockSource+0xa6>
 8003bc0:	2b70      	cmp	r3, #112	; 0x70
 8003bc2:	d87b      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
 8003bc4:	2b60      	cmp	r3, #96	; 0x60
 8003bc6:	d050      	beq.n	8003c6a <HAL_TIM_ConfigClockSource+0x11a>
 8003bc8:	2b60      	cmp	r3, #96	; 0x60
 8003bca:	d877      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
 8003bcc:	2b50      	cmp	r3, #80	; 0x50
 8003bce:	d03c      	beq.n	8003c4a <HAL_TIM_ConfigClockSource+0xfa>
 8003bd0:	2b50      	cmp	r3, #80	; 0x50
 8003bd2:	d873      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
 8003bd4:	2b40      	cmp	r3, #64	; 0x40
 8003bd6:	d058      	beq.n	8003c8a <HAL_TIM_ConfigClockSource+0x13a>
 8003bd8:	2b40      	cmp	r3, #64	; 0x40
 8003bda:	d86f      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
 8003bdc:	2b30      	cmp	r3, #48	; 0x30
 8003bde:	d064      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x15a>
 8003be0:	2b30      	cmp	r3, #48	; 0x30
 8003be2:	d86b      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
 8003be4:	2b20      	cmp	r3, #32
 8003be6:	d060      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x15a>
 8003be8:	2b20      	cmp	r3, #32
 8003bea:	d867      	bhi.n	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d05c      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x15a>
 8003bf0:	2b10      	cmp	r3, #16
 8003bf2:	d05a      	beq.n	8003caa <HAL_TIM_ConfigClockSource+0x15a>
 8003bf4:	e062      	b.n	8003cbc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	6818      	ldr	r0, [r3, #0]
 8003bfa:	683b      	ldr	r3, [r7, #0]
 8003bfc:	6899      	ldr	r1, [r3, #8]
 8003bfe:	683b      	ldr	r3, [r7, #0]
 8003c00:	685a      	ldr	r2, [r3, #4]
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	f000 f965 	bl	8003ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	689b      	ldr	r3, [r3, #8]
 8003c10:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003c12:	68bb      	ldr	r3, [r7, #8]
 8003c14:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003c18:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	68ba      	ldr	r2, [r7, #8]
 8003c20:	609a      	str	r2, [r3, #8]
      break;
 8003c22:	e04f      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	6818      	ldr	r0, [r3, #0]
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	6899      	ldr	r1, [r3, #8]
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	685a      	ldr	r2, [r3, #4]
 8003c30:	683b      	ldr	r3, [r7, #0]
 8003c32:	68db      	ldr	r3, [r3, #12]
 8003c34:	f000 f94e 	bl	8003ed4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	689a      	ldr	r2, [r3, #8]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c46:	609a      	str	r2, [r3, #8]
      break;
 8003c48:	e03c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	6818      	ldr	r0, [r3, #0]
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	6859      	ldr	r1, [r3, #4]
 8003c52:	683b      	ldr	r3, [r7, #0]
 8003c54:	68db      	ldr	r3, [r3, #12]
 8003c56:	461a      	mov	r2, r3
 8003c58:	f000 f8c2 	bl	8003de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	2150      	movs	r1, #80	; 0x50
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 f91b 	bl	8003e9e <TIM_ITRx_SetConfig>
      break;
 8003c68:	e02c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6818      	ldr	r0, [r3, #0]
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	6859      	ldr	r1, [r3, #4]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	68db      	ldr	r3, [r3, #12]
 8003c76:	461a      	mov	r2, r3
 8003c78:	f000 f8e1 	bl	8003e3e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	2160      	movs	r1, #96	; 0x60
 8003c82:	4618      	mov	r0, r3
 8003c84:	f000 f90b 	bl	8003e9e <TIM_ITRx_SetConfig>
      break;
 8003c88:	e01c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6818      	ldr	r0, [r3, #0]
 8003c8e:	683b      	ldr	r3, [r7, #0]
 8003c90:	6859      	ldr	r1, [r3, #4]
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	461a      	mov	r2, r3
 8003c98:	f000 f8a2 	bl	8003de0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	2140      	movs	r1, #64	; 0x40
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 f8fb 	bl	8003e9e <TIM_ITRx_SetConfig>
      break;
 8003ca8:	e00c      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681a      	ldr	r2, [r3, #0]
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4619      	mov	r1, r3
 8003cb4:	4610      	mov	r0, r2
 8003cb6:	f000 f8f2 	bl	8003e9e <TIM_ITRx_SetConfig>
      break;
 8003cba:	e003      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003cbc:	2301      	movs	r3, #1
 8003cbe:	73fb      	strb	r3, [r7, #15]
      break;
 8003cc0:	e000      	b.n	8003cc4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003cc2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2201      	movs	r2, #1
 8003cc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003cd4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3710      	adds	r7, #16
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bd80      	pop	{r7, pc}
	...

08003ce0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003ce0:	b480      	push	{r7}
 8003ce2:	b085      	sub	sp, #20
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	4a34      	ldr	r2, [pc, #208]	; (8003dc4 <TIM_Base_SetConfig+0xe4>)
 8003cf4:	4293      	cmp	r3, r2
 8003cf6:	d00f      	beq.n	8003d18 <TIM_Base_SetConfig+0x38>
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003cfe:	d00b      	beq.n	8003d18 <TIM_Base_SetConfig+0x38>
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	4a31      	ldr	r2, [pc, #196]	; (8003dc8 <TIM_Base_SetConfig+0xe8>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d007      	beq.n	8003d18 <TIM_Base_SetConfig+0x38>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	4a30      	ldr	r2, [pc, #192]	; (8003dcc <TIM_Base_SetConfig+0xec>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d003      	beq.n	8003d18 <TIM_Base_SetConfig+0x38>
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	4a2f      	ldr	r2, [pc, #188]	; (8003dd0 <TIM_Base_SetConfig+0xf0>)
 8003d14:	4293      	cmp	r3, r2
 8003d16:	d108      	bne.n	8003d2a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	68fa      	ldr	r2, [r7, #12]
 8003d26:	4313      	orrs	r3, r2
 8003d28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	4a25      	ldr	r2, [pc, #148]	; (8003dc4 <TIM_Base_SetConfig+0xe4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d01b      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003d38:	d017      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	4a22      	ldr	r2, [pc, #136]	; (8003dc8 <TIM_Base_SetConfig+0xe8>)
 8003d3e:	4293      	cmp	r3, r2
 8003d40:	d013      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	4a21      	ldr	r2, [pc, #132]	; (8003dcc <TIM_Base_SetConfig+0xec>)
 8003d46:	4293      	cmp	r3, r2
 8003d48:	d00f      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	4a20      	ldr	r2, [pc, #128]	; (8003dd0 <TIM_Base_SetConfig+0xf0>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d00b      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	4a1f      	ldr	r2, [pc, #124]	; (8003dd4 <TIM_Base_SetConfig+0xf4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d007      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	4a1e      	ldr	r2, [pc, #120]	; (8003dd8 <TIM_Base_SetConfig+0xf8>)
 8003d5e:	4293      	cmp	r3, r2
 8003d60:	d003      	beq.n	8003d6a <TIM_Base_SetConfig+0x8a>
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	4a1d      	ldr	r2, [pc, #116]	; (8003ddc <TIM_Base_SetConfig+0xfc>)
 8003d66:	4293      	cmp	r3, r2
 8003d68:	d108      	bne.n	8003d7c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003d70:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003d72:	683b      	ldr	r3, [r7, #0]
 8003d74:	68db      	ldr	r3, [r3, #12]
 8003d76:	68fa      	ldr	r2, [r7, #12]
 8003d78:	4313      	orrs	r3, r2
 8003d7a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	695b      	ldr	r3, [r3, #20]
 8003d86:	4313      	orrs	r3, r2
 8003d88:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68fa      	ldr	r2, [r7, #12]
 8003d8e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	4a08      	ldr	r2, [pc, #32]	; (8003dc4 <TIM_Base_SetConfig+0xe4>)
 8003da4:	4293      	cmp	r3, r2
 8003da6:	d103      	bne.n	8003db0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003da8:	683b      	ldr	r3, [r7, #0]
 8003daa:	691a      	ldr	r2, [r3, #16]
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2201      	movs	r2, #1
 8003db4:	615a      	str	r2, [r3, #20]
}
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	40010000 	.word	0x40010000
 8003dc8:	40000400 	.word	0x40000400
 8003dcc:	40000800 	.word	0x40000800
 8003dd0:	40000c00 	.word	0x40000c00
 8003dd4:	40014000 	.word	0x40014000
 8003dd8:	40014400 	.word	0x40014400
 8003ddc:	40014800 	.word	0x40014800

08003de0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003de0:	b480      	push	{r7}
 8003de2:	b087      	sub	sp, #28
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	60b9      	str	r1, [r7, #8]
 8003dea:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6a1b      	ldr	r3, [r3, #32]
 8003df0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	6a1b      	ldr	r3, [r3, #32]
 8003df6:	f023 0201 	bic.w	r2, r3, #1
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003e0a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	011b      	lsls	r3, r3, #4
 8003e10:	693a      	ldr	r2, [r7, #16]
 8003e12:	4313      	orrs	r3, r2
 8003e14:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e16:	697b      	ldr	r3, [r7, #20]
 8003e18:	f023 030a 	bic.w	r3, r3, #10
 8003e1c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4313      	orrs	r3, r2
 8003e24:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	693a      	ldr	r2, [r7, #16]
 8003e2a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	697a      	ldr	r2, [r7, #20]
 8003e30:	621a      	str	r2, [r3, #32]
}
 8003e32:	bf00      	nop
 8003e34:	371c      	adds	r7, #28
 8003e36:	46bd      	mov	sp, r7
 8003e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3c:	4770      	bx	lr

08003e3e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e3e:	b480      	push	{r7}
 8003e40:	b087      	sub	sp, #28
 8003e42:	af00      	add	r7, sp, #0
 8003e44:	60f8      	str	r0, [r7, #12]
 8003e46:	60b9      	str	r1, [r7, #8]
 8003e48:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	6a1b      	ldr	r3, [r3, #32]
 8003e4e:	f023 0210 	bic.w	r2, r3, #16
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	6a1b      	ldr	r3, [r3, #32]
 8003e60:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e62:	697b      	ldr	r3, [r7, #20]
 8003e64:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003e68:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	031b      	lsls	r3, r3, #12
 8003e6e:	697a      	ldr	r2, [r7, #20]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e74:	693b      	ldr	r3, [r7, #16]
 8003e76:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003e7a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	011b      	lsls	r3, r3, #4
 8003e80:	693a      	ldr	r2, [r7, #16]
 8003e82:	4313      	orrs	r3, r2
 8003e84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	697a      	ldr	r2, [r7, #20]
 8003e8a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	693a      	ldr	r2, [r7, #16]
 8003e90:	621a      	str	r2, [r3, #32]
}
 8003e92:	bf00      	nop
 8003e94:	371c      	adds	r7, #28
 8003e96:	46bd      	mov	sp, r7
 8003e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9c:	4770      	bx	lr

08003e9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e9e:	b480      	push	{r7}
 8003ea0:	b085      	sub	sp, #20
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	6078      	str	r0, [r7, #4]
 8003ea6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	689b      	ldr	r3, [r3, #8]
 8003eac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003eb6:	683a      	ldr	r2, [r7, #0]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	f043 0307 	orr.w	r3, r3, #7
 8003ec0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	609a      	str	r2, [r3, #8]
}
 8003ec8:	bf00      	nop
 8003eca:	3714      	adds	r7, #20
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed2:	4770      	bx	lr

08003ed4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b087      	sub	sp, #28
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
 8003ee0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003ee8:	697b      	ldr	r3, [r7, #20]
 8003eea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003eee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	021a      	lsls	r2, r3, #8
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	431a      	orrs	r2, r3
 8003ef8:	68bb      	ldr	r3, [r7, #8]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	697a      	ldr	r2, [r7, #20]
 8003efe:	4313      	orrs	r3, r2
 8003f00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	697a      	ldr	r2, [r7, #20]
 8003f06:	609a      	str	r2, [r3, #8]
}
 8003f08:	bf00      	nop
 8003f0a:	371c      	adds	r7, #28
 8003f0c:	46bd      	mov	sp, r7
 8003f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f12:	4770      	bx	lr

08003f14 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f24:	2b01      	cmp	r3, #1
 8003f26:	d101      	bne.n	8003f2c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f28:	2302      	movs	r3, #2
 8003f2a:	e050      	b.n	8003fce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2201      	movs	r2, #1
 8003f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2202      	movs	r2, #2
 8003f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	685b      	ldr	r3, [r3, #4]
 8003f42:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	689b      	ldr	r3, [r3, #8]
 8003f4a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68fa      	ldr	r2, [r7, #12]
 8003f64:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a1c      	ldr	r2, [pc, #112]	; (8003fdc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d018      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f78:	d013      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a18      	ldr	r2, [pc, #96]	; (8003fe0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d00e      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a16      	ldr	r2, [pc, #88]	; (8003fe4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d009      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a15      	ldr	r2, [pc, #84]	; (8003fe8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d004      	beq.n	8003fa2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	4a13      	ldr	r2, [pc, #76]	; (8003fec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003f9e:	4293      	cmp	r3, r2
 8003fa0:	d10c      	bne.n	8003fbc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003fa2:	68bb      	ldr	r3, [r7, #8]
 8003fa4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003fa8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003faa:	683b      	ldr	r3, [r7, #0]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	68ba      	ldr	r2, [r7, #8]
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68ba      	ldr	r2, [r7, #8]
 8003fba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2201      	movs	r2, #1
 8003fc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003fcc:	2300      	movs	r3, #0
}
 8003fce:	4618      	mov	r0, r3
 8003fd0:	3714      	adds	r7, #20
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd8:	4770      	bx	lr
 8003fda:	bf00      	nop
 8003fdc:	40010000 	.word	0x40010000
 8003fe0:	40000400 	.word	0x40000400
 8003fe4:	40000800 	.word	0x40000800
 8003fe8:	40000c00 	.word	0x40000c00
 8003fec:	40014000 	.word	0x40014000

08003ff0 <__libc_init_array>:
 8003ff0:	b570      	push	{r4, r5, r6, lr}
 8003ff2:	4d0d      	ldr	r5, [pc, #52]	; (8004028 <__libc_init_array+0x38>)
 8003ff4:	4c0d      	ldr	r4, [pc, #52]	; (800402c <__libc_init_array+0x3c>)
 8003ff6:	1b64      	subs	r4, r4, r5
 8003ff8:	10a4      	asrs	r4, r4, #2
 8003ffa:	2600      	movs	r6, #0
 8003ffc:	42a6      	cmp	r6, r4
 8003ffe:	d109      	bne.n	8004014 <__libc_init_array+0x24>
 8004000:	4d0b      	ldr	r5, [pc, #44]	; (8004030 <__libc_init_array+0x40>)
 8004002:	4c0c      	ldr	r4, [pc, #48]	; (8004034 <__libc_init_array+0x44>)
 8004004:	f001 f8be 	bl	8005184 <_init>
 8004008:	1b64      	subs	r4, r4, r5
 800400a:	10a4      	asrs	r4, r4, #2
 800400c:	2600      	movs	r6, #0
 800400e:	42a6      	cmp	r6, r4
 8004010:	d105      	bne.n	800401e <__libc_init_array+0x2e>
 8004012:	bd70      	pop	{r4, r5, r6, pc}
 8004014:	f855 3b04 	ldr.w	r3, [r5], #4
 8004018:	4798      	blx	r3
 800401a:	3601      	adds	r6, #1
 800401c:	e7ee      	b.n	8003ffc <__libc_init_array+0xc>
 800401e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004022:	4798      	blx	r3
 8004024:	3601      	adds	r6, #1
 8004026:	e7f2      	b.n	800400e <__libc_init_array+0x1e>
 8004028:	08005f48 	.word	0x08005f48
 800402c:	08005f48 	.word	0x08005f48
 8004030:	08005f48 	.word	0x08005f48
 8004034:	08005f4c 	.word	0x08005f4c

08004038 <memset>:
 8004038:	4402      	add	r2, r0
 800403a:	4603      	mov	r3, r0
 800403c:	4293      	cmp	r3, r2
 800403e:	d100      	bne.n	8004042 <memset+0xa>
 8004040:	4770      	bx	lr
 8004042:	f803 1b01 	strb.w	r1, [r3], #1
 8004046:	e7f9      	b.n	800403c <memset+0x4>

08004048 <cos>:
 8004048:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800404a:	ec53 2b10 	vmov	r2, r3, d0
 800404e:	4826      	ldr	r0, [pc, #152]	; (80040e8 <cos+0xa0>)
 8004050:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 8004054:	4281      	cmp	r1, r0
 8004056:	dc06      	bgt.n	8004066 <cos+0x1e>
 8004058:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80040e0 <cos+0x98>
 800405c:	b005      	add	sp, #20
 800405e:	f85d eb04 	ldr.w	lr, [sp], #4
 8004062:	f000 baa9 	b.w	80045b8 <__kernel_cos>
 8004066:	4821      	ldr	r0, [pc, #132]	; (80040ec <cos+0xa4>)
 8004068:	4281      	cmp	r1, r0
 800406a:	dd09      	ble.n	8004080 <cos+0x38>
 800406c:	ee10 0a10 	vmov	r0, s0
 8004070:	4619      	mov	r1, r3
 8004072:	f7fc f8b5 	bl	80001e0 <__aeabi_dsub>
 8004076:	ec41 0b10 	vmov	d0, r0, r1
 800407a:	b005      	add	sp, #20
 800407c:	f85d fb04 	ldr.w	pc, [sp], #4
 8004080:	4668      	mov	r0, sp
 8004082:	f000 f88d 	bl	80041a0 <__ieee754_rem_pio2>
 8004086:	f000 0003 	and.w	r0, r0, #3
 800408a:	2801      	cmp	r0, #1
 800408c:	d00b      	beq.n	80040a6 <cos+0x5e>
 800408e:	2802      	cmp	r0, #2
 8004090:	d016      	beq.n	80040c0 <cos+0x78>
 8004092:	b9e0      	cbnz	r0, 80040ce <cos+0x86>
 8004094:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004098:	ed9d 0b00 	vldr	d0, [sp]
 800409c:	f000 fa8c 	bl	80045b8 <__kernel_cos>
 80040a0:	ec51 0b10 	vmov	r0, r1, d0
 80040a4:	e7e7      	b.n	8004076 <cos+0x2e>
 80040a6:	ed9d 1b02 	vldr	d1, [sp, #8]
 80040aa:	ed9d 0b00 	vldr	d0, [sp]
 80040ae:	f000 fe9b 	bl	8004de8 <__kernel_sin>
 80040b2:	ec53 2b10 	vmov	r2, r3, d0
 80040b6:	ee10 0a10 	vmov	r0, s0
 80040ba:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80040be:	e7da      	b.n	8004076 <cos+0x2e>
 80040c0:	ed9d 1b02 	vldr	d1, [sp, #8]
 80040c4:	ed9d 0b00 	vldr	d0, [sp]
 80040c8:	f000 fa76 	bl	80045b8 <__kernel_cos>
 80040cc:	e7f1      	b.n	80040b2 <cos+0x6a>
 80040ce:	ed9d 1b02 	vldr	d1, [sp, #8]
 80040d2:	ed9d 0b00 	vldr	d0, [sp]
 80040d6:	2001      	movs	r0, #1
 80040d8:	f000 fe86 	bl	8004de8 <__kernel_sin>
 80040dc:	e7e0      	b.n	80040a0 <cos+0x58>
 80040de:	bf00      	nop
	...
 80040e8:	3fe921fb 	.word	0x3fe921fb
 80040ec:	7fefffff 	.word	0x7fefffff

080040f0 <sin>:
 80040f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80040f2:	ec53 2b10 	vmov	r2, r3, d0
 80040f6:	4828      	ldr	r0, [pc, #160]	; (8004198 <sin+0xa8>)
 80040f8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 80040fc:	4281      	cmp	r1, r0
 80040fe:	dc07      	bgt.n	8004110 <sin+0x20>
 8004100:	ed9f 1b23 	vldr	d1, [pc, #140]	; 8004190 <sin+0xa0>
 8004104:	2000      	movs	r0, #0
 8004106:	b005      	add	sp, #20
 8004108:	f85d eb04 	ldr.w	lr, [sp], #4
 800410c:	f000 be6c 	b.w	8004de8 <__kernel_sin>
 8004110:	4822      	ldr	r0, [pc, #136]	; (800419c <sin+0xac>)
 8004112:	4281      	cmp	r1, r0
 8004114:	dd09      	ble.n	800412a <sin+0x3a>
 8004116:	ee10 0a10 	vmov	r0, s0
 800411a:	4619      	mov	r1, r3
 800411c:	f7fc f860 	bl	80001e0 <__aeabi_dsub>
 8004120:	ec41 0b10 	vmov	d0, r0, r1
 8004124:	b005      	add	sp, #20
 8004126:	f85d fb04 	ldr.w	pc, [sp], #4
 800412a:	4668      	mov	r0, sp
 800412c:	f000 f838 	bl	80041a0 <__ieee754_rem_pio2>
 8004130:	f000 0003 	and.w	r0, r0, #3
 8004134:	2801      	cmp	r0, #1
 8004136:	d00c      	beq.n	8004152 <sin+0x62>
 8004138:	2802      	cmp	r0, #2
 800413a:	d011      	beq.n	8004160 <sin+0x70>
 800413c:	b9f0      	cbnz	r0, 800417c <sin+0x8c>
 800413e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004142:	ed9d 0b00 	vldr	d0, [sp]
 8004146:	2001      	movs	r0, #1
 8004148:	f000 fe4e 	bl	8004de8 <__kernel_sin>
 800414c:	ec51 0b10 	vmov	r0, r1, d0
 8004150:	e7e6      	b.n	8004120 <sin+0x30>
 8004152:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004156:	ed9d 0b00 	vldr	d0, [sp]
 800415a:	f000 fa2d 	bl	80045b8 <__kernel_cos>
 800415e:	e7f5      	b.n	800414c <sin+0x5c>
 8004160:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004164:	ed9d 0b00 	vldr	d0, [sp]
 8004168:	2001      	movs	r0, #1
 800416a:	f000 fe3d 	bl	8004de8 <__kernel_sin>
 800416e:	ec53 2b10 	vmov	r2, r3, d0
 8004172:	ee10 0a10 	vmov	r0, s0
 8004176:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800417a:	e7d1      	b.n	8004120 <sin+0x30>
 800417c:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004180:	ed9d 0b00 	vldr	d0, [sp]
 8004184:	f000 fa18 	bl	80045b8 <__kernel_cos>
 8004188:	e7f1      	b.n	800416e <sin+0x7e>
 800418a:	bf00      	nop
 800418c:	f3af 8000 	nop.w
	...
 8004198:	3fe921fb 	.word	0x3fe921fb
 800419c:	7fefffff 	.word	0x7fefffff

080041a0 <__ieee754_rem_pio2>:
 80041a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80041a4:	ed2d 8b02 	vpush	{d8}
 80041a8:	ec55 4b10 	vmov	r4, r5, d0
 80041ac:	4bca      	ldr	r3, [pc, #808]	; (80044d8 <__ieee754_rem_pio2+0x338>)
 80041ae:	b08b      	sub	sp, #44	; 0x2c
 80041b0:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80041b4:	4598      	cmp	r8, r3
 80041b6:	4682      	mov	sl, r0
 80041b8:	9502      	str	r5, [sp, #8]
 80041ba:	dc08      	bgt.n	80041ce <__ieee754_rem_pio2+0x2e>
 80041bc:	2200      	movs	r2, #0
 80041be:	2300      	movs	r3, #0
 80041c0:	ed80 0b00 	vstr	d0, [r0]
 80041c4:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80041c8:	f04f 0b00 	mov.w	fp, #0
 80041cc:	e028      	b.n	8004220 <__ieee754_rem_pio2+0x80>
 80041ce:	4bc3      	ldr	r3, [pc, #780]	; (80044dc <__ieee754_rem_pio2+0x33c>)
 80041d0:	4598      	cmp	r8, r3
 80041d2:	dc78      	bgt.n	80042c6 <__ieee754_rem_pio2+0x126>
 80041d4:	9b02      	ldr	r3, [sp, #8]
 80041d6:	4ec2      	ldr	r6, [pc, #776]	; (80044e0 <__ieee754_rem_pio2+0x340>)
 80041d8:	2b00      	cmp	r3, #0
 80041da:	ee10 0a10 	vmov	r0, s0
 80041de:	a3b0      	add	r3, pc, #704	; (adr r3, 80044a0 <__ieee754_rem_pio2+0x300>)
 80041e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041e4:	4629      	mov	r1, r5
 80041e6:	dd39      	ble.n	800425c <__ieee754_rem_pio2+0xbc>
 80041e8:	f7fb fffa 	bl	80001e0 <__aeabi_dsub>
 80041ec:	45b0      	cmp	r8, r6
 80041ee:	4604      	mov	r4, r0
 80041f0:	460d      	mov	r5, r1
 80041f2:	d01b      	beq.n	800422c <__ieee754_rem_pio2+0x8c>
 80041f4:	a3ac      	add	r3, pc, #688	; (adr r3, 80044a8 <__ieee754_rem_pio2+0x308>)
 80041f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041fa:	f7fb fff1 	bl	80001e0 <__aeabi_dsub>
 80041fe:	4602      	mov	r2, r0
 8004200:	460b      	mov	r3, r1
 8004202:	e9ca 2300 	strd	r2, r3, [sl]
 8004206:	4620      	mov	r0, r4
 8004208:	4629      	mov	r1, r5
 800420a:	f7fb ffe9 	bl	80001e0 <__aeabi_dsub>
 800420e:	a3a6      	add	r3, pc, #664	; (adr r3, 80044a8 <__ieee754_rem_pio2+0x308>)
 8004210:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004214:	f7fb ffe4 	bl	80001e0 <__aeabi_dsub>
 8004218:	e9ca 0102 	strd	r0, r1, [sl, #8]
 800421c:	f04f 0b01 	mov.w	fp, #1
 8004220:	4658      	mov	r0, fp
 8004222:	b00b      	add	sp, #44	; 0x2c
 8004224:	ecbd 8b02 	vpop	{d8}
 8004228:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800422c:	a3a0      	add	r3, pc, #640	; (adr r3, 80044b0 <__ieee754_rem_pio2+0x310>)
 800422e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004232:	f7fb ffd5 	bl	80001e0 <__aeabi_dsub>
 8004236:	a3a0      	add	r3, pc, #640	; (adr r3, 80044b8 <__ieee754_rem_pio2+0x318>)
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	4604      	mov	r4, r0
 800423e:	460d      	mov	r5, r1
 8004240:	f7fb ffce 	bl	80001e0 <__aeabi_dsub>
 8004244:	4602      	mov	r2, r0
 8004246:	460b      	mov	r3, r1
 8004248:	e9ca 2300 	strd	r2, r3, [sl]
 800424c:	4620      	mov	r0, r4
 800424e:	4629      	mov	r1, r5
 8004250:	f7fb ffc6 	bl	80001e0 <__aeabi_dsub>
 8004254:	a398      	add	r3, pc, #608	; (adr r3, 80044b8 <__ieee754_rem_pio2+0x318>)
 8004256:	e9d3 2300 	ldrd	r2, r3, [r3]
 800425a:	e7db      	b.n	8004214 <__ieee754_rem_pio2+0x74>
 800425c:	f7fb ffc2 	bl	80001e4 <__adddf3>
 8004260:	45b0      	cmp	r8, r6
 8004262:	4604      	mov	r4, r0
 8004264:	460d      	mov	r5, r1
 8004266:	d016      	beq.n	8004296 <__ieee754_rem_pio2+0xf6>
 8004268:	a38f      	add	r3, pc, #572	; (adr r3, 80044a8 <__ieee754_rem_pio2+0x308>)
 800426a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800426e:	f7fb ffb9 	bl	80001e4 <__adddf3>
 8004272:	4602      	mov	r2, r0
 8004274:	460b      	mov	r3, r1
 8004276:	e9ca 2300 	strd	r2, r3, [sl]
 800427a:	4620      	mov	r0, r4
 800427c:	4629      	mov	r1, r5
 800427e:	f7fb ffaf 	bl	80001e0 <__aeabi_dsub>
 8004282:	a389      	add	r3, pc, #548	; (adr r3, 80044a8 <__ieee754_rem_pio2+0x308>)
 8004284:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004288:	f7fb ffac 	bl	80001e4 <__adddf3>
 800428c:	f04f 3bff 	mov.w	fp, #4294967295
 8004290:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004294:	e7c4      	b.n	8004220 <__ieee754_rem_pio2+0x80>
 8004296:	a386      	add	r3, pc, #536	; (adr r3, 80044b0 <__ieee754_rem_pio2+0x310>)
 8004298:	e9d3 2300 	ldrd	r2, r3, [r3]
 800429c:	f7fb ffa2 	bl	80001e4 <__adddf3>
 80042a0:	a385      	add	r3, pc, #532	; (adr r3, 80044b8 <__ieee754_rem_pio2+0x318>)
 80042a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042a6:	4604      	mov	r4, r0
 80042a8:	460d      	mov	r5, r1
 80042aa:	f7fb ff9b 	bl	80001e4 <__adddf3>
 80042ae:	4602      	mov	r2, r0
 80042b0:	460b      	mov	r3, r1
 80042b2:	e9ca 2300 	strd	r2, r3, [sl]
 80042b6:	4620      	mov	r0, r4
 80042b8:	4629      	mov	r1, r5
 80042ba:	f7fb ff91 	bl	80001e0 <__aeabi_dsub>
 80042be:	a37e      	add	r3, pc, #504	; (adr r3, 80044b8 <__ieee754_rem_pio2+0x318>)
 80042c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c4:	e7e0      	b.n	8004288 <__ieee754_rem_pio2+0xe8>
 80042c6:	4b87      	ldr	r3, [pc, #540]	; (80044e4 <__ieee754_rem_pio2+0x344>)
 80042c8:	4598      	cmp	r8, r3
 80042ca:	f300 80d9 	bgt.w	8004480 <__ieee754_rem_pio2+0x2e0>
 80042ce:	f000 fe49 	bl	8004f64 <fabs>
 80042d2:	ec55 4b10 	vmov	r4, r5, d0
 80042d6:	ee10 0a10 	vmov	r0, s0
 80042da:	a379      	add	r3, pc, #484	; (adr r3, 80044c0 <__ieee754_rem_pio2+0x320>)
 80042dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042e0:	4629      	mov	r1, r5
 80042e2:	f7fc f935 	bl	8000550 <__aeabi_dmul>
 80042e6:	4b80      	ldr	r3, [pc, #512]	; (80044e8 <__ieee754_rem_pio2+0x348>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	f7fb ff7b 	bl	80001e4 <__adddf3>
 80042ee:	f7fc fbc9 	bl	8000a84 <__aeabi_d2iz>
 80042f2:	4683      	mov	fp, r0
 80042f4:	f7fc f8c2 	bl	800047c <__aeabi_i2d>
 80042f8:	4602      	mov	r2, r0
 80042fa:	460b      	mov	r3, r1
 80042fc:	ec43 2b18 	vmov	d8, r2, r3
 8004300:	a367      	add	r3, pc, #412	; (adr r3, 80044a0 <__ieee754_rem_pio2+0x300>)
 8004302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004306:	f7fc f923 	bl	8000550 <__aeabi_dmul>
 800430a:	4602      	mov	r2, r0
 800430c:	460b      	mov	r3, r1
 800430e:	4620      	mov	r0, r4
 8004310:	4629      	mov	r1, r5
 8004312:	f7fb ff65 	bl	80001e0 <__aeabi_dsub>
 8004316:	a364      	add	r3, pc, #400	; (adr r3, 80044a8 <__ieee754_rem_pio2+0x308>)
 8004318:	e9d3 2300 	ldrd	r2, r3, [r3]
 800431c:	4606      	mov	r6, r0
 800431e:	460f      	mov	r7, r1
 8004320:	ec51 0b18 	vmov	r0, r1, d8
 8004324:	f7fc f914 	bl	8000550 <__aeabi_dmul>
 8004328:	f1bb 0f1f 	cmp.w	fp, #31
 800432c:	4604      	mov	r4, r0
 800432e:	460d      	mov	r5, r1
 8004330:	dc0d      	bgt.n	800434e <__ieee754_rem_pio2+0x1ae>
 8004332:	4b6e      	ldr	r3, [pc, #440]	; (80044ec <__ieee754_rem_pio2+0x34c>)
 8004334:	f10b 32ff 	add.w	r2, fp, #4294967295
 8004338:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800433c:	4543      	cmp	r3, r8
 800433e:	d006      	beq.n	800434e <__ieee754_rem_pio2+0x1ae>
 8004340:	4622      	mov	r2, r4
 8004342:	462b      	mov	r3, r5
 8004344:	4630      	mov	r0, r6
 8004346:	4639      	mov	r1, r7
 8004348:	f7fb ff4a 	bl	80001e0 <__aeabi_dsub>
 800434c:	e00f      	b.n	800436e <__ieee754_rem_pio2+0x1ce>
 800434e:	462b      	mov	r3, r5
 8004350:	4622      	mov	r2, r4
 8004352:	4630      	mov	r0, r6
 8004354:	4639      	mov	r1, r7
 8004356:	f7fb ff43 	bl	80001e0 <__aeabi_dsub>
 800435a:	ea4f 5328 	mov.w	r3, r8, asr #20
 800435e:	9303      	str	r3, [sp, #12]
 8004360:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004364:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8004368:	f1b8 0f10 	cmp.w	r8, #16
 800436c:	dc02      	bgt.n	8004374 <__ieee754_rem_pio2+0x1d4>
 800436e:	e9ca 0100 	strd	r0, r1, [sl]
 8004372:	e039      	b.n	80043e8 <__ieee754_rem_pio2+0x248>
 8004374:	a34e      	add	r3, pc, #312	; (adr r3, 80044b0 <__ieee754_rem_pio2+0x310>)
 8004376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437a:	ec51 0b18 	vmov	r0, r1, d8
 800437e:	f7fc f8e7 	bl	8000550 <__aeabi_dmul>
 8004382:	4604      	mov	r4, r0
 8004384:	460d      	mov	r5, r1
 8004386:	4602      	mov	r2, r0
 8004388:	460b      	mov	r3, r1
 800438a:	4630      	mov	r0, r6
 800438c:	4639      	mov	r1, r7
 800438e:	f7fb ff27 	bl	80001e0 <__aeabi_dsub>
 8004392:	4602      	mov	r2, r0
 8004394:	460b      	mov	r3, r1
 8004396:	4680      	mov	r8, r0
 8004398:	4689      	mov	r9, r1
 800439a:	4630      	mov	r0, r6
 800439c:	4639      	mov	r1, r7
 800439e:	f7fb ff1f 	bl	80001e0 <__aeabi_dsub>
 80043a2:	4622      	mov	r2, r4
 80043a4:	462b      	mov	r3, r5
 80043a6:	f7fb ff1b 	bl	80001e0 <__aeabi_dsub>
 80043aa:	a343      	add	r3, pc, #268	; (adr r3, 80044b8 <__ieee754_rem_pio2+0x318>)
 80043ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043b0:	4604      	mov	r4, r0
 80043b2:	460d      	mov	r5, r1
 80043b4:	ec51 0b18 	vmov	r0, r1, d8
 80043b8:	f7fc f8ca 	bl	8000550 <__aeabi_dmul>
 80043bc:	4622      	mov	r2, r4
 80043be:	462b      	mov	r3, r5
 80043c0:	f7fb ff0e 	bl	80001e0 <__aeabi_dsub>
 80043c4:	4602      	mov	r2, r0
 80043c6:	460b      	mov	r3, r1
 80043c8:	4604      	mov	r4, r0
 80043ca:	460d      	mov	r5, r1
 80043cc:	4640      	mov	r0, r8
 80043ce:	4649      	mov	r1, r9
 80043d0:	f7fb ff06 	bl	80001e0 <__aeabi_dsub>
 80043d4:	9a03      	ldr	r2, [sp, #12]
 80043d6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b31      	cmp	r3, #49	; 0x31
 80043de:	dc24      	bgt.n	800442a <__ieee754_rem_pio2+0x28a>
 80043e0:	e9ca 0100 	strd	r0, r1, [sl]
 80043e4:	4646      	mov	r6, r8
 80043e6:	464f      	mov	r7, r9
 80043e8:	e9da 8900 	ldrd	r8, r9, [sl]
 80043ec:	4630      	mov	r0, r6
 80043ee:	4642      	mov	r2, r8
 80043f0:	464b      	mov	r3, r9
 80043f2:	4639      	mov	r1, r7
 80043f4:	f7fb fef4 	bl	80001e0 <__aeabi_dsub>
 80043f8:	462b      	mov	r3, r5
 80043fa:	4622      	mov	r2, r4
 80043fc:	f7fb fef0 	bl	80001e0 <__aeabi_dsub>
 8004400:	9b02      	ldr	r3, [sp, #8]
 8004402:	2b00      	cmp	r3, #0
 8004404:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004408:	f6bf af0a 	bge.w	8004220 <__ieee754_rem_pio2+0x80>
 800440c:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8004410:	f8ca 3004 	str.w	r3, [sl, #4]
 8004414:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004418:	f8ca 8000 	str.w	r8, [sl]
 800441c:	f8ca 0008 	str.w	r0, [sl, #8]
 8004420:	f8ca 300c 	str.w	r3, [sl, #12]
 8004424:	f1cb 0b00 	rsb	fp, fp, #0
 8004428:	e6fa      	b.n	8004220 <__ieee754_rem_pio2+0x80>
 800442a:	a327      	add	r3, pc, #156	; (adr r3, 80044c8 <__ieee754_rem_pio2+0x328>)
 800442c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004430:	ec51 0b18 	vmov	r0, r1, d8
 8004434:	f7fc f88c 	bl	8000550 <__aeabi_dmul>
 8004438:	4604      	mov	r4, r0
 800443a:	460d      	mov	r5, r1
 800443c:	4602      	mov	r2, r0
 800443e:	460b      	mov	r3, r1
 8004440:	4640      	mov	r0, r8
 8004442:	4649      	mov	r1, r9
 8004444:	f7fb fecc 	bl	80001e0 <__aeabi_dsub>
 8004448:	4602      	mov	r2, r0
 800444a:	460b      	mov	r3, r1
 800444c:	4606      	mov	r6, r0
 800444e:	460f      	mov	r7, r1
 8004450:	4640      	mov	r0, r8
 8004452:	4649      	mov	r1, r9
 8004454:	f7fb fec4 	bl	80001e0 <__aeabi_dsub>
 8004458:	4622      	mov	r2, r4
 800445a:	462b      	mov	r3, r5
 800445c:	f7fb fec0 	bl	80001e0 <__aeabi_dsub>
 8004460:	a31b      	add	r3, pc, #108	; (adr r3, 80044d0 <__ieee754_rem_pio2+0x330>)
 8004462:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004466:	4604      	mov	r4, r0
 8004468:	460d      	mov	r5, r1
 800446a:	ec51 0b18 	vmov	r0, r1, d8
 800446e:	f7fc f86f 	bl	8000550 <__aeabi_dmul>
 8004472:	4622      	mov	r2, r4
 8004474:	462b      	mov	r3, r5
 8004476:	f7fb feb3 	bl	80001e0 <__aeabi_dsub>
 800447a:	4604      	mov	r4, r0
 800447c:	460d      	mov	r5, r1
 800447e:	e75f      	b.n	8004340 <__ieee754_rem_pio2+0x1a0>
 8004480:	4b1b      	ldr	r3, [pc, #108]	; (80044f0 <__ieee754_rem_pio2+0x350>)
 8004482:	4598      	cmp	r8, r3
 8004484:	dd36      	ble.n	80044f4 <__ieee754_rem_pio2+0x354>
 8004486:	ee10 2a10 	vmov	r2, s0
 800448a:	462b      	mov	r3, r5
 800448c:	4620      	mov	r0, r4
 800448e:	4629      	mov	r1, r5
 8004490:	f7fb fea6 	bl	80001e0 <__aeabi_dsub>
 8004494:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004498:	e9ca 0100 	strd	r0, r1, [sl]
 800449c:	e694      	b.n	80041c8 <__ieee754_rem_pio2+0x28>
 800449e:	bf00      	nop
 80044a0:	54400000 	.word	0x54400000
 80044a4:	3ff921fb 	.word	0x3ff921fb
 80044a8:	1a626331 	.word	0x1a626331
 80044ac:	3dd0b461 	.word	0x3dd0b461
 80044b0:	1a600000 	.word	0x1a600000
 80044b4:	3dd0b461 	.word	0x3dd0b461
 80044b8:	2e037073 	.word	0x2e037073
 80044bc:	3ba3198a 	.word	0x3ba3198a
 80044c0:	6dc9c883 	.word	0x6dc9c883
 80044c4:	3fe45f30 	.word	0x3fe45f30
 80044c8:	2e000000 	.word	0x2e000000
 80044cc:	3ba3198a 	.word	0x3ba3198a
 80044d0:	252049c1 	.word	0x252049c1
 80044d4:	397b839a 	.word	0x397b839a
 80044d8:	3fe921fb 	.word	0x3fe921fb
 80044dc:	4002d97b 	.word	0x4002d97b
 80044e0:	3ff921fb 	.word	0x3ff921fb
 80044e4:	413921fb 	.word	0x413921fb
 80044e8:	3fe00000 	.word	0x3fe00000
 80044ec:	08005d64 	.word	0x08005d64
 80044f0:	7fefffff 	.word	0x7fefffff
 80044f4:	ea4f 5428 	mov.w	r4, r8, asr #20
 80044f8:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 80044fc:	ee10 0a10 	vmov	r0, s0
 8004500:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 8004504:	ee10 6a10 	vmov	r6, s0
 8004508:	460f      	mov	r7, r1
 800450a:	f7fc fabb 	bl	8000a84 <__aeabi_d2iz>
 800450e:	f7fb ffb5 	bl	800047c <__aeabi_i2d>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4630      	mov	r0, r6
 8004518:	4639      	mov	r1, r7
 800451a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800451e:	f7fb fe5f 	bl	80001e0 <__aeabi_dsub>
 8004522:	4b23      	ldr	r3, [pc, #140]	; (80045b0 <__ieee754_rem_pio2+0x410>)
 8004524:	2200      	movs	r2, #0
 8004526:	f7fc f813 	bl	8000550 <__aeabi_dmul>
 800452a:	460f      	mov	r7, r1
 800452c:	4606      	mov	r6, r0
 800452e:	f7fc faa9 	bl	8000a84 <__aeabi_d2iz>
 8004532:	f7fb ffa3 	bl	800047c <__aeabi_i2d>
 8004536:	4602      	mov	r2, r0
 8004538:	460b      	mov	r3, r1
 800453a:	4630      	mov	r0, r6
 800453c:	4639      	mov	r1, r7
 800453e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004542:	f7fb fe4d 	bl	80001e0 <__aeabi_dsub>
 8004546:	4b1a      	ldr	r3, [pc, #104]	; (80045b0 <__ieee754_rem_pio2+0x410>)
 8004548:	2200      	movs	r2, #0
 800454a:	f7fc f801 	bl	8000550 <__aeabi_dmul>
 800454e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004552:	ad04      	add	r5, sp, #16
 8004554:	f04f 0803 	mov.w	r8, #3
 8004558:	46a9      	mov	r9, r5
 800455a:	2600      	movs	r6, #0
 800455c:	2700      	movs	r7, #0
 800455e:	4632      	mov	r2, r6
 8004560:	463b      	mov	r3, r7
 8004562:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 8004566:	46c3      	mov	fp, r8
 8004568:	3d08      	subs	r5, #8
 800456a:	f108 38ff 	add.w	r8, r8, #4294967295
 800456e:	f7fc fa57 	bl	8000a20 <__aeabi_dcmpeq>
 8004572:	2800      	cmp	r0, #0
 8004574:	d1f3      	bne.n	800455e <__ieee754_rem_pio2+0x3be>
 8004576:	4b0f      	ldr	r3, [pc, #60]	; (80045b4 <__ieee754_rem_pio2+0x414>)
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	2302      	movs	r3, #2
 800457c:	9300      	str	r3, [sp, #0]
 800457e:	4622      	mov	r2, r4
 8004580:	465b      	mov	r3, fp
 8004582:	4651      	mov	r1, sl
 8004584:	4648      	mov	r0, r9
 8004586:	f000 f8df 	bl	8004748 <__kernel_rem_pio2>
 800458a:	9b02      	ldr	r3, [sp, #8]
 800458c:	2b00      	cmp	r3, #0
 800458e:	4683      	mov	fp, r0
 8004590:	f6bf ae46 	bge.w	8004220 <__ieee754_rem_pio2+0x80>
 8004594:	e9da 2100 	ldrd	r2, r1, [sl]
 8004598:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800459c:	e9ca 2300 	strd	r2, r3, [sl]
 80045a0:	e9da 2102 	ldrd	r2, r1, [sl, #8]
 80045a4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80045a8:	e9ca 2302 	strd	r2, r3, [sl, #8]
 80045ac:	e73a      	b.n	8004424 <__ieee754_rem_pio2+0x284>
 80045ae:	bf00      	nop
 80045b0:	41700000 	.word	0x41700000
 80045b4:	08005de4 	.word	0x08005de4

080045b8 <__kernel_cos>:
 80045b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80045bc:	ec57 6b10 	vmov	r6, r7, d0
 80045c0:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80045c4:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80045c8:	ed8d 1b00 	vstr	d1, [sp]
 80045cc:	da07      	bge.n	80045de <__kernel_cos+0x26>
 80045ce:	ee10 0a10 	vmov	r0, s0
 80045d2:	4639      	mov	r1, r7
 80045d4:	f7fc fa56 	bl	8000a84 <__aeabi_d2iz>
 80045d8:	2800      	cmp	r0, #0
 80045da:	f000 8088 	beq.w	80046ee <__kernel_cos+0x136>
 80045de:	4632      	mov	r2, r6
 80045e0:	463b      	mov	r3, r7
 80045e2:	4630      	mov	r0, r6
 80045e4:	4639      	mov	r1, r7
 80045e6:	f7fb ffb3 	bl	8000550 <__aeabi_dmul>
 80045ea:	4b51      	ldr	r3, [pc, #324]	; (8004730 <__kernel_cos+0x178>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	4604      	mov	r4, r0
 80045f0:	460d      	mov	r5, r1
 80045f2:	f7fb ffad 	bl	8000550 <__aeabi_dmul>
 80045f6:	a340      	add	r3, pc, #256	; (adr r3, 80046f8 <__kernel_cos+0x140>)
 80045f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045fc:	4682      	mov	sl, r0
 80045fe:	468b      	mov	fp, r1
 8004600:	4620      	mov	r0, r4
 8004602:	4629      	mov	r1, r5
 8004604:	f7fb ffa4 	bl	8000550 <__aeabi_dmul>
 8004608:	a33d      	add	r3, pc, #244	; (adr r3, 8004700 <__kernel_cos+0x148>)
 800460a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800460e:	f7fb fde9 	bl	80001e4 <__adddf3>
 8004612:	4622      	mov	r2, r4
 8004614:	462b      	mov	r3, r5
 8004616:	f7fb ff9b 	bl	8000550 <__aeabi_dmul>
 800461a:	a33b      	add	r3, pc, #236	; (adr r3, 8004708 <__kernel_cos+0x150>)
 800461c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004620:	f7fb fdde 	bl	80001e0 <__aeabi_dsub>
 8004624:	4622      	mov	r2, r4
 8004626:	462b      	mov	r3, r5
 8004628:	f7fb ff92 	bl	8000550 <__aeabi_dmul>
 800462c:	a338      	add	r3, pc, #224	; (adr r3, 8004710 <__kernel_cos+0x158>)
 800462e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004632:	f7fb fdd7 	bl	80001e4 <__adddf3>
 8004636:	4622      	mov	r2, r4
 8004638:	462b      	mov	r3, r5
 800463a:	f7fb ff89 	bl	8000550 <__aeabi_dmul>
 800463e:	a336      	add	r3, pc, #216	; (adr r3, 8004718 <__kernel_cos+0x160>)
 8004640:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004644:	f7fb fdcc 	bl	80001e0 <__aeabi_dsub>
 8004648:	4622      	mov	r2, r4
 800464a:	462b      	mov	r3, r5
 800464c:	f7fb ff80 	bl	8000550 <__aeabi_dmul>
 8004650:	a333      	add	r3, pc, #204	; (adr r3, 8004720 <__kernel_cos+0x168>)
 8004652:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004656:	f7fb fdc5 	bl	80001e4 <__adddf3>
 800465a:	4622      	mov	r2, r4
 800465c:	462b      	mov	r3, r5
 800465e:	f7fb ff77 	bl	8000550 <__aeabi_dmul>
 8004662:	4622      	mov	r2, r4
 8004664:	462b      	mov	r3, r5
 8004666:	f7fb ff73 	bl	8000550 <__aeabi_dmul>
 800466a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800466e:	4604      	mov	r4, r0
 8004670:	460d      	mov	r5, r1
 8004672:	4630      	mov	r0, r6
 8004674:	4639      	mov	r1, r7
 8004676:	f7fb ff6b 	bl	8000550 <__aeabi_dmul>
 800467a:	460b      	mov	r3, r1
 800467c:	4602      	mov	r2, r0
 800467e:	4629      	mov	r1, r5
 8004680:	4620      	mov	r0, r4
 8004682:	f7fb fdad 	bl	80001e0 <__aeabi_dsub>
 8004686:	4b2b      	ldr	r3, [pc, #172]	; (8004734 <__kernel_cos+0x17c>)
 8004688:	4598      	cmp	r8, r3
 800468a:	4606      	mov	r6, r0
 800468c:	460f      	mov	r7, r1
 800468e:	dc10      	bgt.n	80046b2 <__kernel_cos+0xfa>
 8004690:	4602      	mov	r2, r0
 8004692:	460b      	mov	r3, r1
 8004694:	4650      	mov	r0, sl
 8004696:	4659      	mov	r1, fp
 8004698:	f7fb fda2 	bl	80001e0 <__aeabi_dsub>
 800469c:	460b      	mov	r3, r1
 800469e:	4926      	ldr	r1, [pc, #152]	; (8004738 <__kernel_cos+0x180>)
 80046a0:	4602      	mov	r2, r0
 80046a2:	2000      	movs	r0, #0
 80046a4:	f7fb fd9c 	bl	80001e0 <__aeabi_dsub>
 80046a8:	ec41 0b10 	vmov	d0, r0, r1
 80046ac:	b003      	add	sp, #12
 80046ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80046b2:	4b22      	ldr	r3, [pc, #136]	; (800473c <__kernel_cos+0x184>)
 80046b4:	4920      	ldr	r1, [pc, #128]	; (8004738 <__kernel_cos+0x180>)
 80046b6:	4598      	cmp	r8, r3
 80046b8:	bfcc      	ite	gt
 80046ba:	4d21      	ldrgt	r5, [pc, #132]	; (8004740 <__kernel_cos+0x188>)
 80046bc:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80046c0:	2400      	movs	r4, #0
 80046c2:	4622      	mov	r2, r4
 80046c4:	462b      	mov	r3, r5
 80046c6:	2000      	movs	r0, #0
 80046c8:	f7fb fd8a 	bl	80001e0 <__aeabi_dsub>
 80046cc:	4622      	mov	r2, r4
 80046ce:	4680      	mov	r8, r0
 80046d0:	4689      	mov	r9, r1
 80046d2:	462b      	mov	r3, r5
 80046d4:	4650      	mov	r0, sl
 80046d6:	4659      	mov	r1, fp
 80046d8:	f7fb fd82 	bl	80001e0 <__aeabi_dsub>
 80046dc:	4632      	mov	r2, r6
 80046de:	463b      	mov	r3, r7
 80046e0:	f7fb fd7e 	bl	80001e0 <__aeabi_dsub>
 80046e4:	4602      	mov	r2, r0
 80046e6:	460b      	mov	r3, r1
 80046e8:	4640      	mov	r0, r8
 80046ea:	4649      	mov	r1, r9
 80046ec:	e7da      	b.n	80046a4 <__kernel_cos+0xec>
 80046ee:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8004728 <__kernel_cos+0x170>
 80046f2:	e7db      	b.n	80046ac <__kernel_cos+0xf4>
 80046f4:	f3af 8000 	nop.w
 80046f8:	be8838d4 	.word	0xbe8838d4
 80046fc:	bda8fae9 	.word	0xbda8fae9
 8004700:	bdb4b1c4 	.word	0xbdb4b1c4
 8004704:	3e21ee9e 	.word	0x3e21ee9e
 8004708:	809c52ad 	.word	0x809c52ad
 800470c:	3e927e4f 	.word	0x3e927e4f
 8004710:	19cb1590 	.word	0x19cb1590
 8004714:	3efa01a0 	.word	0x3efa01a0
 8004718:	16c15177 	.word	0x16c15177
 800471c:	3f56c16c 	.word	0x3f56c16c
 8004720:	5555554c 	.word	0x5555554c
 8004724:	3fa55555 	.word	0x3fa55555
 8004728:	00000000 	.word	0x00000000
 800472c:	3ff00000 	.word	0x3ff00000
 8004730:	3fe00000 	.word	0x3fe00000
 8004734:	3fd33332 	.word	0x3fd33332
 8004738:	3ff00000 	.word	0x3ff00000
 800473c:	3fe90000 	.word	0x3fe90000
 8004740:	3fd20000 	.word	0x3fd20000
 8004744:	00000000 	.word	0x00000000

08004748 <__kernel_rem_pio2>:
 8004748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800474c:	ed2d 8b02 	vpush	{d8}
 8004750:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 8004754:	f112 0f14 	cmn.w	r2, #20
 8004758:	9308      	str	r3, [sp, #32]
 800475a:	9101      	str	r1, [sp, #4]
 800475c:	4bc4      	ldr	r3, [pc, #784]	; (8004a70 <__kernel_rem_pio2+0x328>)
 800475e:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8004760:	900b      	str	r0, [sp, #44]	; 0x2c
 8004762:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004766:	9302      	str	r3, [sp, #8]
 8004768:	9b08      	ldr	r3, [sp, #32]
 800476a:	f103 33ff 	add.w	r3, r3, #4294967295
 800476e:	bfa8      	it	ge
 8004770:	1ed4      	subge	r4, r2, #3
 8004772:	9306      	str	r3, [sp, #24]
 8004774:	bfb2      	itee	lt
 8004776:	2400      	movlt	r4, #0
 8004778:	2318      	movge	r3, #24
 800477a:	fb94 f4f3 	sdivge	r4, r4, r3
 800477e:	f06f 0317 	mvn.w	r3, #23
 8004782:	fb04 3303 	mla	r3, r4, r3, r3
 8004786:	eb03 0a02 	add.w	sl, r3, r2
 800478a:	9b02      	ldr	r3, [sp, #8]
 800478c:	9a06      	ldr	r2, [sp, #24]
 800478e:	ed9f 8bb4 	vldr	d8, [pc, #720]	; 8004a60 <__kernel_rem_pio2+0x318>
 8004792:	eb03 0802 	add.w	r8, r3, r2
 8004796:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8004798:	1aa7      	subs	r7, r4, r2
 800479a:	ae22      	add	r6, sp, #136	; 0x88
 800479c:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80047a0:	2500      	movs	r5, #0
 80047a2:	4545      	cmp	r5, r8
 80047a4:	dd13      	ble.n	80047ce <__kernel_rem_pio2+0x86>
 80047a6:	9b08      	ldr	r3, [sp, #32]
 80047a8:	ed9f 8bad 	vldr	d8, [pc, #692]	; 8004a60 <__kernel_rem_pio2+0x318>
 80047ac:	aa22      	add	r2, sp, #136	; 0x88
 80047ae:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80047b2:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80047b6:	f04f 0800 	mov.w	r8, #0
 80047ba:	9b02      	ldr	r3, [sp, #8]
 80047bc:	4598      	cmp	r8, r3
 80047be:	dc2f      	bgt.n	8004820 <__kernel_rem_pio2+0xd8>
 80047c0:	ed8d 8b04 	vstr	d8, [sp, #16]
 80047c4:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 80047c8:	462f      	mov	r7, r5
 80047ca:	2600      	movs	r6, #0
 80047cc:	e01b      	b.n	8004806 <__kernel_rem_pio2+0xbe>
 80047ce:	42ef      	cmn	r7, r5
 80047d0:	d407      	bmi.n	80047e2 <__kernel_rem_pio2+0x9a>
 80047d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80047d6:	f7fb fe51 	bl	800047c <__aeabi_i2d>
 80047da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80047de:	3501      	adds	r5, #1
 80047e0:	e7df      	b.n	80047a2 <__kernel_rem_pio2+0x5a>
 80047e2:	ec51 0b18 	vmov	r0, r1, d8
 80047e6:	e7f8      	b.n	80047da <__kernel_rem_pio2+0x92>
 80047e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047ec:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 80047f0:	f7fb feae 	bl	8000550 <__aeabi_dmul>
 80047f4:	4602      	mov	r2, r0
 80047f6:	460b      	mov	r3, r1
 80047f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80047fc:	f7fb fcf2 	bl	80001e4 <__adddf3>
 8004800:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004804:	3601      	adds	r6, #1
 8004806:	9b06      	ldr	r3, [sp, #24]
 8004808:	429e      	cmp	r6, r3
 800480a:	f1a7 0708 	sub.w	r7, r7, #8
 800480e:	ddeb      	ble.n	80047e8 <__kernel_rem_pio2+0xa0>
 8004810:	ed9d 7b04 	vldr	d7, [sp, #16]
 8004814:	f108 0801 	add.w	r8, r8, #1
 8004818:	ecab 7b02 	vstmia	fp!, {d7}
 800481c:	3508      	adds	r5, #8
 800481e:	e7cc      	b.n	80047ba <__kernel_rem_pio2+0x72>
 8004820:	9b02      	ldr	r3, [sp, #8]
 8004822:	aa0e      	add	r2, sp, #56	; 0x38
 8004824:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004828:	930d      	str	r3, [sp, #52]	; 0x34
 800482a:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 800482c:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004830:	9c02      	ldr	r4, [sp, #8]
 8004832:	930c      	str	r3, [sp, #48]	; 0x30
 8004834:	00e3      	lsls	r3, r4, #3
 8004836:	930a      	str	r3, [sp, #40]	; 0x28
 8004838:	ab9a      	add	r3, sp, #616	; 0x268
 800483a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800483e:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8004842:	f10d 0838 	add.w	r8, sp, #56	; 0x38
 8004846:	ab72      	add	r3, sp, #456	; 0x1c8
 8004848:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
 800484c:	46c3      	mov	fp, r8
 800484e:	46a1      	mov	r9, r4
 8004850:	f1b9 0f00 	cmp.w	r9, #0
 8004854:	f1a5 0508 	sub.w	r5, r5, #8
 8004858:	dc77      	bgt.n	800494a <__kernel_rem_pio2+0x202>
 800485a:	ec47 6b10 	vmov	d0, r6, r7
 800485e:	4650      	mov	r0, sl
 8004860:	f000 fc0a 	bl	8005078 <scalbn>
 8004864:	ec57 6b10 	vmov	r6, r7, d0
 8004868:	2200      	movs	r2, #0
 800486a:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800486e:	ee10 0a10 	vmov	r0, s0
 8004872:	4639      	mov	r1, r7
 8004874:	f7fb fe6c 	bl	8000550 <__aeabi_dmul>
 8004878:	ec41 0b10 	vmov	d0, r0, r1
 800487c:	f000 fb7c 	bl	8004f78 <floor>
 8004880:	4b7c      	ldr	r3, [pc, #496]	; (8004a74 <__kernel_rem_pio2+0x32c>)
 8004882:	ec51 0b10 	vmov	r0, r1, d0
 8004886:	2200      	movs	r2, #0
 8004888:	f7fb fe62 	bl	8000550 <__aeabi_dmul>
 800488c:	4602      	mov	r2, r0
 800488e:	460b      	mov	r3, r1
 8004890:	4630      	mov	r0, r6
 8004892:	4639      	mov	r1, r7
 8004894:	f7fb fca4 	bl	80001e0 <__aeabi_dsub>
 8004898:	460f      	mov	r7, r1
 800489a:	4606      	mov	r6, r0
 800489c:	f7fc f8f2 	bl	8000a84 <__aeabi_d2iz>
 80048a0:	9004      	str	r0, [sp, #16]
 80048a2:	f7fb fdeb 	bl	800047c <__aeabi_i2d>
 80048a6:	4602      	mov	r2, r0
 80048a8:	460b      	mov	r3, r1
 80048aa:	4630      	mov	r0, r6
 80048ac:	4639      	mov	r1, r7
 80048ae:	f7fb fc97 	bl	80001e0 <__aeabi_dsub>
 80048b2:	f1ba 0f00 	cmp.w	sl, #0
 80048b6:	4606      	mov	r6, r0
 80048b8:	460f      	mov	r7, r1
 80048ba:	dd6d      	ble.n	8004998 <__kernel_rem_pio2+0x250>
 80048bc:	1e62      	subs	r2, r4, #1
 80048be:	ab0e      	add	r3, sp, #56	; 0x38
 80048c0:	9d04      	ldr	r5, [sp, #16]
 80048c2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80048c6:	f1ca 0118 	rsb	r1, sl, #24
 80048ca:	fa40 f301 	asr.w	r3, r0, r1
 80048ce:	441d      	add	r5, r3
 80048d0:	408b      	lsls	r3, r1
 80048d2:	1ac0      	subs	r0, r0, r3
 80048d4:	ab0e      	add	r3, sp, #56	; 0x38
 80048d6:	9504      	str	r5, [sp, #16]
 80048d8:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80048dc:	f1ca 0317 	rsb	r3, sl, #23
 80048e0:	fa40 fb03 	asr.w	fp, r0, r3
 80048e4:	f1bb 0f00 	cmp.w	fp, #0
 80048e8:	dd65      	ble.n	80049b6 <__kernel_rem_pio2+0x26e>
 80048ea:	9b04      	ldr	r3, [sp, #16]
 80048ec:	2200      	movs	r2, #0
 80048ee:	3301      	adds	r3, #1
 80048f0:	9304      	str	r3, [sp, #16]
 80048f2:	4615      	mov	r5, r2
 80048f4:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80048f8:	4294      	cmp	r4, r2
 80048fa:	f300 809c 	bgt.w	8004a36 <__kernel_rem_pio2+0x2ee>
 80048fe:	f1ba 0f00 	cmp.w	sl, #0
 8004902:	dd07      	ble.n	8004914 <__kernel_rem_pio2+0x1cc>
 8004904:	f1ba 0f01 	cmp.w	sl, #1
 8004908:	f000 80c0 	beq.w	8004a8c <__kernel_rem_pio2+0x344>
 800490c:	f1ba 0f02 	cmp.w	sl, #2
 8004910:	f000 80c6 	beq.w	8004aa0 <__kernel_rem_pio2+0x358>
 8004914:	f1bb 0f02 	cmp.w	fp, #2
 8004918:	d14d      	bne.n	80049b6 <__kernel_rem_pio2+0x26e>
 800491a:	4632      	mov	r2, r6
 800491c:	463b      	mov	r3, r7
 800491e:	4956      	ldr	r1, [pc, #344]	; (8004a78 <__kernel_rem_pio2+0x330>)
 8004920:	2000      	movs	r0, #0
 8004922:	f7fb fc5d 	bl	80001e0 <__aeabi_dsub>
 8004926:	4606      	mov	r6, r0
 8004928:	460f      	mov	r7, r1
 800492a:	2d00      	cmp	r5, #0
 800492c:	d043      	beq.n	80049b6 <__kernel_rem_pio2+0x26e>
 800492e:	4650      	mov	r0, sl
 8004930:	ed9f 0b4d 	vldr	d0, [pc, #308]	; 8004a68 <__kernel_rem_pio2+0x320>
 8004934:	f000 fba0 	bl	8005078 <scalbn>
 8004938:	4630      	mov	r0, r6
 800493a:	4639      	mov	r1, r7
 800493c:	ec53 2b10 	vmov	r2, r3, d0
 8004940:	f7fb fc4e 	bl	80001e0 <__aeabi_dsub>
 8004944:	4606      	mov	r6, r0
 8004946:	460f      	mov	r7, r1
 8004948:	e035      	b.n	80049b6 <__kernel_rem_pio2+0x26e>
 800494a:	4b4c      	ldr	r3, [pc, #304]	; (8004a7c <__kernel_rem_pio2+0x334>)
 800494c:	2200      	movs	r2, #0
 800494e:	4630      	mov	r0, r6
 8004950:	4639      	mov	r1, r7
 8004952:	f7fb fdfd 	bl	8000550 <__aeabi_dmul>
 8004956:	f7fc f895 	bl	8000a84 <__aeabi_d2iz>
 800495a:	f7fb fd8f 	bl	800047c <__aeabi_i2d>
 800495e:	4602      	mov	r2, r0
 8004960:	460b      	mov	r3, r1
 8004962:	ec43 2b18 	vmov	d8, r2, r3
 8004966:	4b46      	ldr	r3, [pc, #280]	; (8004a80 <__kernel_rem_pio2+0x338>)
 8004968:	2200      	movs	r2, #0
 800496a:	f7fb fdf1 	bl	8000550 <__aeabi_dmul>
 800496e:	4602      	mov	r2, r0
 8004970:	460b      	mov	r3, r1
 8004972:	4630      	mov	r0, r6
 8004974:	4639      	mov	r1, r7
 8004976:	f7fb fc33 	bl	80001e0 <__aeabi_dsub>
 800497a:	f7fc f883 	bl	8000a84 <__aeabi_d2iz>
 800497e:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004982:	f84b 0b04 	str.w	r0, [fp], #4
 8004986:	ec51 0b18 	vmov	r0, r1, d8
 800498a:	f7fb fc2b 	bl	80001e4 <__adddf3>
 800498e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004992:	4606      	mov	r6, r0
 8004994:	460f      	mov	r7, r1
 8004996:	e75b      	b.n	8004850 <__kernel_rem_pio2+0x108>
 8004998:	d106      	bne.n	80049a8 <__kernel_rem_pio2+0x260>
 800499a:	1e63      	subs	r3, r4, #1
 800499c:	aa0e      	add	r2, sp, #56	; 0x38
 800499e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80049a2:	ea4f 5be0 	mov.w	fp, r0, asr #23
 80049a6:	e79d      	b.n	80048e4 <__kernel_rem_pio2+0x19c>
 80049a8:	4b36      	ldr	r3, [pc, #216]	; (8004a84 <__kernel_rem_pio2+0x33c>)
 80049aa:	2200      	movs	r2, #0
 80049ac:	f7fc f856 	bl	8000a5c <__aeabi_dcmpge>
 80049b0:	2800      	cmp	r0, #0
 80049b2:	d13d      	bne.n	8004a30 <__kernel_rem_pio2+0x2e8>
 80049b4:	4683      	mov	fp, r0
 80049b6:	2200      	movs	r2, #0
 80049b8:	2300      	movs	r3, #0
 80049ba:	4630      	mov	r0, r6
 80049bc:	4639      	mov	r1, r7
 80049be:	f7fc f82f 	bl	8000a20 <__aeabi_dcmpeq>
 80049c2:	2800      	cmp	r0, #0
 80049c4:	f000 80c0 	beq.w	8004b48 <__kernel_rem_pio2+0x400>
 80049c8:	1e65      	subs	r5, r4, #1
 80049ca:	462b      	mov	r3, r5
 80049cc:	2200      	movs	r2, #0
 80049ce:	9902      	ldr	r1, [sp, #8]
 80049d0:	428b      	cmp	r3, r1
 80049d2:	da6c      	bge.n	8004aae <__kernel_rem_pio2+0x366>
 80049d4:	2a00      	cmp	r2, #0
 80049d6:	f000 8089 	beq.w	8004aec <__kernel_rem_pio2+0x3a4>
 80049da:	ab0e      	add	r3, sp, #56	; 0x38
 80049dc:	f1aa 0a18 	sub.w	sl, sl, #24
 80049e0:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	f000 80ad 	beq.w	8004b44 <__kernel_rem_pio2+0x3fc>
 80049ea:	4650      	mov	r0, sl
 80049ec:	ed9f 0b1e 	vldr	d0, [pc, #120]	; 8004a68 <__kernel_rem_pio2+0x320>
 80049f0:	f000 fb42 	bl	8005078 <scalbn>
 80049f4:	ab9a      	add	r3, sp, #616	; 0x268
 80049f6:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80049fa:	ec57 6b10 	vmov	r6, r7, d0
 80049fe:	00ec      	lsls	r4, r5, #3
 8004a00:	f1a3 0898 	sub.w	r8, r3, #152	; 0x98
 8004a04:	46aa      	mov	sl, r5
 8004a06:	f1ba 0f00 	cmp.w	sl, #0
 8004a0a:	f280 80d6 	bge.w	8004bba <__kernel_rem_pio2+0x472>
 8004a0e:	ed9f 8b14 	vldr	d8, [pc, #80]	; 8004a60 <__kernel_rem_pio2+0x318>
 8004a12:	462e      	mov	r6, r5
 8004a14:	2e00      	cmp	r6, #0
 8004a16:	f2c0 8104 	blt.w	8004c22 <__kernel_rem_pio2+0x4da>
 8004a1a:	ab72      	add	r3, sp, #456	; 0x1c8
 8004a1c:	ed8d 8b06 	vstr	d8, [sp, #24]
 8004a20:	f8df a064 	ldr.w	sl, [pc, #100]	; 8004a88 <__kernel_rem_pio2+0x340>
 8004a24:	eb03 09c6 	add.w	r9, r3, r6, lsl #3
 8004a28:	f04f 0800 	mov.w	r8, #0
 8004a2c:	1baf      	subs	r7, r5, r6
 8004a2e:	e0ea      	b.n	8004c06 <__kernel_rem_pio2+0x4be>
 8004a30:	f04f 0b02 	mov.w	fp, #2
 8004a34:	e759      	b.n	80048ea <__kernel_rem_pio2+0x1a2>
 8004a36:	f8d8 3000 	ldr.w	r3, [r8]
 8004a3a:	b955      	cbnz	r5, 8004a52 <__kernel_rem_pio2+0x30a>
 8004a3c:	b123      	cbz	r3, 8004a48 <__kernel_rem_pio2+0x300>
 8004a3e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8004a42:	f8c8 3000 	str.w	r3, [r8]
 8004a46:	2301      	movs	r3, #1
 8004a48:	3201      	adds	r2, #1
 8004a4a:	f108 0804 	add.w	r8, r8, #4
 8004a4e:	461d      	mov	r5, r3
 8004a50:	e752      	b.n	80048f8 <__kernel_rem_pio2+0x1b0>
 8004a52:	1acb      	subs	r3, r1, r3
 8004a54:	f8c8 3000 	str.w	r3, [r8]
 8004a58:	462b      	mov	r3, r5
 8004a5a:	e7f5      	b.n	8004a48 <__kernel_rem_pio2+0x300>
 8004a5c:	f3af 8000 	nop.w
	...
 8004a6c:	3ff00000 	.word	0x3ff00000
 8004a70:	08005f30 	.word	0x08005f30
 8004a74:	40200000 	.word	0x40200000
 8004a78:	3ff00000 	.word	0x3ff00000
 8004a7c:	3e700000 	.word	0x3e700000
 8004a80:	41700000 	.word	0x41700000
 8004a84:	3fe00000 	.word	0x3fe00000
 8004a88:	08005ef0 	.word	0x08005ef0
 8004a8c:	1e62      	subs	r2, r4, #1
 8004a8e:	ab0e      	add	r3, sp, #56	; 0x38
 8004a90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a94:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8004a98:	a90e      	add	r1, sp, #56	; 0x38
 8004a9a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8004a9e:	e739      	b.n	8004914 <__kernel_rem_pio2+0x1cc>
 8004aa0:	1e62      	subs	r2, r4, #1
 8004aa2:	ab0e      	add	r3, sp, #56	; 0x38
 8004aa4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aa8:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8004aac:	e7f4      	b.n	8004a98 <__kernel_rem_pio2+0x350>
 8004aae:	a90e      	add	r1, sp, #56	; 0x38
 8004ab0:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8004ab4:	3b01      	subs	r3, #1
 8004ab6:	430a      	orrs	r2, r1
 8004ab8:	e789      	b.n	80049ce <__kernel_rem_pio2+0x286>
 8004aba:	3301      	adds	r3, #1
 8004abc:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8004ac0:	2900      	cmp	r1, #0
 8004ac2:	d0fa      	beq.n	8004aba <__kernel_rem_pio2+0x372>
 8004ac4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8004ac6:	f502 721a 	add.w	r2, r2, #616	; 0x268
 8004aca:	446a      	add	r2, sp
 8004acc:	3a98      	subs	r2, #152	; 0x98
 8004ace:	920a      	str	r2, [sp, #40]	; 0x28
 8004ad0:	9a08      	ldr	r2, [sp, #32]
 8004ad2:	18e3      	adds	r3, r4, r3
 8004ad4:	18a5      	adds	r5, r4, r2
 8004ad6:	aa22      	add	r2, sp, #136	; 0x88
 8004ad8:	f104 0801 	add.w	r8, r4, #1
 8004adc:	eb02 05c5 	add.w	r5, r2, r5, lsl #3
 8004ae0:	9304      	str	r3, [sp, #16]
 8004ae2:	9b04      	ldr	r3, [sp, #16]
 8004ae4:	4543      	cmp	r3, r8
 8004ae6:	da04      	bge.n	8004af2 <__kernel_rem_pio2+0x3aa>
 8004ae8:	461c      	mov	r4, r3
 8004aea:	e6a3      	b.n	8004834 <__kernel_rem_pio2+0xec>
 8004aec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004aee:	2301      	movs	r3, #1
 8004af0:	e7e4      	b.n	8004abc <__kernel_rem_pio2+0x374>
 8004af2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004af4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004af8:	f7fb fcc0 	bl	800047c <__aeabi_i2d>
 8004afc:	e8e5 0102 	strd	r0, r1, [r5], #8
 8004b00:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b02:	46ab      	mov	fp, r5
 8004b04:	461c      	mov	r4, r3
 8004b06:	f04f 0900 	mov.w	r9, #0
 8004b0a:	2600      	movs	r6, #0
 8004b0c:	2700      	movs	r7, #0
 8004b0e:	9b06      	ldr	r3, [sp, #24]
 8004b10:	4599      	cmp	r9, r3
 8004b12:	dd06      	ble.n	8004b22 <__kernel_rem_pio2+0x3da>
 8004b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b16:	e8e3 6702 	strd	r6, r7, [r3], #8
 8004b1a:	f108 0801 	add.w	r8, r8, #1
 8004b1e:	930a      	str	r3, [sp, #40]	; 0x28
 8004b20:	e7df      	b.n	8004ae2 <__kernel_rem_pio2+0x39a>
 8004b22:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8004b26:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8004b2a:	f7fb fd11 	bl	8000550 <__aeabi_dmul>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	460b      	mov	r3, r1
 8004b32:	4630      	mov	r0, r6
 8004b34:	4639      	mov	r1, r7
 8004b36:	f7fb fb55 	bl	80001e4 <__adddf3>
 8004b3a:	f109 0901 	add.w	r9, r9, #1
 8004b3e:	4606      	mov	r6, r0
 8004b40:	460f      	mov	r7, r1
 8004b42:	e7e4      	b.n	8004b0e <__kernel_rem_pio2+0x3c6>
 8004b44:	3d01      	subs	r5, #1
 8004b46:	e748      	b.n	80049da <__kernel_rem_pio2+0x292>
 8004b48:	ec47 6b10 	vmov	d0, r6, r7
 8004b4c:	f1ca 0000 	rsb	r0, sl, #0
 8004b50:	f000 fa92 	bl	8005078 <scalbn>
 8004b54:	ec57 6b10 	vmov	r6, r7, d0
 8004b58:	4ba0      	ldr	r3, [pc, #640]	; (8004ddc <__kernel_rem_pio2+0x694>)
 8004b5a:	ee10 0a10 	vmov	r0, s0
 8004b5e:	2200      	movs	r2, #0
 8004b60:	4639      	mov	r1, r7
 8004b62:	f7fb ff7b 	bl	8000a5c <__aeabi_dcmpge>
 8004b66:	b1f8      	cbz	r0, 8004ba8 <__kernel_rem_pio2+0x460>
 8004b68:	4b9d      	ldr	r3, [pc, #628]	; (8004de0 <__kernel_rem_pio2+0x698>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	4630      	mov	r0, r6
 8004b6e:	4639      	mov	r1, r7
 8004b70:	f7fb fcee 	bl	8000550 <__aeabi_dmul>
 8004b74:	f7fb ff86 	bl	8000a84 <__aeabi_d2iz>
 8004b78:	4680      	mov	r8, r0
 8004b7a:	f7fb fc7f 	bl	800047c <__aeabi_i2d>
 8004b7e:	4b97      	ldr	r3, [pc, #604]	; (8004ddc <__kernel_rem_pio2+0x694>)
 8004b80:	2200      	movs	r2, #0
 8004b82:	f7fb fce5 	bl	8000550 <__aeabi_dmul>
 8004b86:	460b      	mov	r3, r1
 8004b88:	4602      	mov	r2, r0
 8004b8a:	4639      	mov	r1, r7
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	f7fb fb27 	bl	80001e0 <__aeabi_dsub>
 8004b92:	f7fb ff77 	bl	8000a84 <__aeabi_d2iz>
 8004b96:	1c65      	adds	r5, r4, #1
 8004b98:	ab0e      	add	r3, sp, #56	; 0x38
 8004b9a:	f10a 0a18 	add.w	sl, sl, #24
 8004b9e:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004ba2:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8004ba6:	e720      	b.n	80049ea <__kernel_rem_pio2+0x2a2>
 8004ba8:	4630      	mov	r0, r6
 8004baa:	4639      	mov	r1, r7
 8004bac:	f7fb ff6a 	bl	8000a84 <__aeabi_d2iz>
 8004bb0:	ab0e      	add	r3, sp, #56	; 0x38
 8004bb2:	4625      	mov	r5, r4
 8004bb4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8004bb8:	e717      	b.n	80049ea <__kernel_rem_pio2+0x2a2>
 8004bba:	ab0e      	add	r3, sp, #56	; 0x38
 8004bbc:	f853 002a 	ldr.w	r0, [r3, sl, lsl #2]
 8004bc0:	f7fb fc5c 	bl	800047c <__aeabi_i2d>
 8004bc4:	4632      	mov	r2, r6
 8004bc6:	463b      	mov	r3, r7
 8004bc8:	f7fb fcc2 	bl	8000550 <__aeabi_dmul>
 8004bcc:	4b84      	ldr	r3, [pc, #528]	; (8004de0 <__kernel_rem_pio2+0x698>)
 8004bce:	e968 0102 	strd	r0, r1, [r8, #-8]!
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	4630      	mov	r0, r6
 8004bd6:	4639      	mov	r1, r7
 8004bd8:	f7fb fcba 	bl	8000550 <__aeabi_dmul>
 8004bdc:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004be0:	4606      	mov	r6, r0
 8004be2:	460f      	mov	r7, r1
 8004be4:	e70f      	b.n	8004a06 <__kernel_rem_pio2+0x2be>
 8004be6:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8004bea:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8004bee:	f7fb fcaf 	bl	8000550 <__aeabi_dmul>
 8004bf2:	4602      	mov	r2, r0
 8004bf4:	460b      	mov	r3, r1
 8004bf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004bfa:	f7fb faf3 	bl	80001e4 <__adddf3>
 8004bfe:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c02:	f108 0801 	add.w	r8, r8, #1
 8004c06:	9b02      	ldr	r3, [sp, #8]
 8004c08:	4598      	cmp	r8, r3
 8004c0a:	dc01      	bgt.n	8004c10 <__kernel_rem_pio2+0x4c8>
 8004c0c:	45b8      	cmp	r8, r7
 8004c0e:	ddea      	ble.n	8004be6 <__kernel_rem_pio2+0x49e>
 8004c10:	ed9d 7b06 	vldr	d7, [sp, #24]
 8004c14:	ab4a      	add	r3, sp, #296	; 0x128
 8004c16:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 8004c1a:	ed87 7b00 	vstr	d7, [r7]
 8004c1e:	3e01      	subs	r6, #1
 8004c20:	e6f8      	b.n	8004a14 <__kernel_rem_pio2+0x2cc>
 8004c22:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	dc0b      	bgt.n	8004c40 <__kernel_rem_pio2+0x4f8>
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	dc35      	bgt.n	8004c98 <__kernel_rem_pio2+0x550>
 8004c2c:	d059      	beq.n	8004ce2 <__kernel_rem_pio2+0x59a>
 8004c2e:	9b04      	ldr	r3, [sp, #16]
 8004c30:	f003 0007 	and.w	r0, r3, #7
 8004c34:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8004c38:	ecbd 8b02 	vpop	{d8}
 8004c3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c40:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8004c42:	2b03      	cmp	r3, #3
 8004c44:	d1f3      	bne.n	8004c2e <__kernel_rem_pio2+0x4e6>
 8004c46:	ab4a      	add	r3, sp, #296	; 0x128
 8004c48:	4423      	add	r3, r4
 8004c4a:	9306      	str	r3, [sp, #24]
 8004c4c:	461c      	mov	r4, r3
 8004c4e:	469a      	mov	sl, r3
 8004c50:	9502      	str	r5, [sp, #8]
 8004c52:	9b02      	ldr	r3, [sp, #8]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	f1aa 0a08 	sub.w	sl, sl, #8
 8004c5a:	dc6b      	bgt.n	8004d34 <__kernel_rem_pio2+0x5ec>
 8004c5c:	46aa      	mov	sl, r5
 8004c5e:	f1ba 0f01 	cmp.w	sl, #1
 8004c62:	f1a4 0408 	sub.w	r4, r4, #8
 8004c66:	f300 8085 	bgt.w	8004d74 <__kernel_rem_pio2+0x62c>
 8004c6a:	9c06      	ldr	r4, [sp, #24]
 8004c6c:	2000      	movs	r0, #0
 8004c6e:	3408      	adds	r4, #8
 8004c70:	2100      	movs	r1, #0
 8004c72:	2d01      	cmp	r5, #1
 8004c74:	f300 809d 	bgt.w	8004db2 <__kernel_rem_pio2+0x66a>
 8004c78:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	; 0x128
 8004c7c:	e9dd 784c 	ldrd	r7, r8, [sp, #304]	; 0x130
 8004c80:	f1bb 0f00 	cmp.w	fp, #0
 8004c84:	f040 809b 	bne.w	8004dbe <__kernel_rem_pio2+0x676>
 8004c88:	9b01      	ldr	r3, [sp, #4]
 8004c8a:	e9c3 5600 	strd	r5, r6, [r3]
 8004c8e:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8004c92:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004c96:	e7ca      	b.n	8004c2e <__kernel_rem_pio2+0x4e6>
 8004c98:	3408      	adds	r4, #8
 8004c9a:	ab4a      	add	r3, sp, #296	; 0x128
 8004c9c:	441c      	add	r4, r3
 8004c9e:	462e      	mov	r6, r5
 8004ca0:	2000      	movs	r0, #0
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	2e00      	cmp	r6, #0
 8004ca6:	da36      	bge.n	8004d16 <__kernel_rem_pio2+0x5ce>
 8004ca8:	f1bb 0f00 	cmp.w	fp, #0
 8004cac:	d039      	beq.n	8004d22 <__kernel_rem_pio2+0x5da>
 8004cae:	4602      	mov	r2, r0
 8004cb0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004cb4:	9c01      	ldr	r4, [sp, #4]
 8004cb6:	e9c4 2300 	strd	r2, r3, [r4]
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8004cc2:	f7fb fa8d 	bl	80001e0 <__aeabi_dsub>
 8004cc6:	ae4c      	add	r6, sp, #304	; 0x130
 8004cc8:	2401      	movs	r4, #1
 8004cca:	42a5      	cmp	r5, r4
 8004ccc:	da2c      	bge.n	8004d28 <__kernel_rem_pio2+0x5e0>
 8004cce:	f1bb 0f00 	cmp.w	fp, #0
 8004cd2:	d002      	beq.n	8004cda <__kernel_rem_pio2+0x592>
 8004cd4:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004cd8:	4619      	mov	r1, r3
 8004cda:	9b01      	ldr	r3, [sp, #4]
 8004cdc:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004ce0:	e7a5      	b.n	8004c2e <__kernel_rem_pio2+0x4e6>
 8004ce2:	f504 731a 	add.w	r3, r4, #616	; 0x268
 8004ce6:	eb0d 0403 	add.w	r4, sp, r3
 8004cea:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8004cee:	2000      	movs	r0, #0
 8004cf0:	2100      	movs	r1, #0
 8004cf2:	2d00      	cmp	r5, #0
 8004cf4:	da09      	bge.n	8004d0a <__kernel_rem_pio2+0x5c2>
 8004cf6:	f1bb 0f00 	cmp.w	fp, #0
 8004cfa:	d002      	beq.n	8004d02 <__kernel_rem_pio2+0x5ba>
 8004cfc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d00:	4619      	mov	r1, r3
 8004d02:	9b01      	ldr	r3, [sp, #4]
 8004d04:	e9c3 0100 	strd	r0, r1, [r3]
 8004d08:	e791      	b.n	8004c2e <__kernel_rem_pio2+0x4e6>
 8004d0a:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004d0e:	f7fb fa69 	bl	80001e4 <__adddf3>
 8004d12:	3d01      	subs	r5, #1
 8004d14:	e7ed      	b.n	8004cf2 <__kernel_rem_pio2+0x5aa>
 8004d16:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004d1a:	f7fb fa63 	bl	80001e4 <__adddf3>
 8004d1e:	3e01      	subs	r6, #1
 8004d20:	e7c0      	b.n	8004ca4 <__kernel_rem_pio2+0x55c>
 8004d22:	4602      	mov	r2, r0
 8004d24:	460b      	mov	r3, r1
 8004d26:	e7c5      	b.n	8004cb4 <__kernel_rem_pio2+0x56c>
 8004d28:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8004d2c:	f7fb fa5a 	bl	80001e4 <__adddf3>
 8004d30:	3401      	adds	r4, #1
 8004d32:	e7ca      	b.n	8004cca <__kernel_rem_pio2+0x582>
 8004d34:	e9da 8900 	ldrd	r8, r9, [sl]
 8004d38:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8004d3c:	9b02      	ldr	r3, [sp, #8]
 8004d3e:	3b01      	subs	r3, #1
 8004d40:	9302      	str	r3, [sp, #8]
 8004d42:	4632      	mov	r2, r6
 8004d44:	463b      	mov	r3, r7
 8004d46:	4640      	mov	r0, r8
 8004d48:	4649      	mov	r1, r9
 8004d4a:	f7fb fa4b 	bl	80001e4 <__adddf3>
 8004d4e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4640      	mov	r0, r8
 8004d58:	4649      	mov	r1, r9
 8004d5a:	f7fb fa41 	bl	80001e0 <__aeabi_dsub>
 8004d5e:	4632      	mov	r2, r6
 8004d60:	463b      	mov	r3, r7
 8004d62:	f7fb fa3f 	bl	80001e4 <__adddf3>
 8004d66:	ed9d 7b08 	vldr	d7, [sp, #32]
 8004d6a:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8004d6e:	ed8a 7b00 	vstr	d7, [sl]
 8004d72:	e76e      	b.n	8004c52 <__kernel_rem_pio2+0x50a>
 8004d74:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004d78:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
 8004d7c:	4640      	mov	r0, r8
 8004d7e:	4632      	mov	r2, r6
 8004d80:	463b      	mov	r3, r7
 8004d82:	4649      	mov	r1, r9
 8004d84:	f7fb fa2e 	bl	80001e4 <__adddf3>
 8004d88:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	460b      	mov	r3, r1
 8004d90:	4640      	mov	r0, r8
 8004d92:	4649      	mov	r1, r9
 8004d94:	f7fb fa24 	bl	80001e0 <__aeabi_dsub>
 8004d98:	4632      	mov	r2, r6
 8004d9a:	463b      	mov	r3, r7
 8004d9c:	f7fb fa22 	bl	80001e4 <__adddf3>
 8004da0:	ed9d 7b02 	vldr	d7, [sp, #8]
 8004da4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004da8:	ed84 7b00 	vstr	d7, [r4]
 8004dac:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004db0:	e755      	b.n	8004c5e <__kernel_rem_pio2+0x516>
 8004db2:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8004db6:	f7fb fa15 	bl	80001e4 <__adddf3>
 8004dba:	3d01      	subs	r5, #1
 8004dbc:	e759      	b.n	8004c72 <__kernel_rem_pio2+0x52a>
 8004dbe:	9b01      	ldr	r3, [sp, #4]
 8004dc0:	9a01      	ldr	r2, [sp, #4]
 8004dc2:	601d      	str	r5, [r3, #0]
 8004dc4:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8004dc8:	605c      	str	r4, [r3, #4]
 8004dca:	609f      	str	r7, [r3, #8]
 8004dcc:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8004dd0:	60d3      	str	r3, [r2, #12]
 8004dd2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004dd6:	6110      	str	r0, [r2, #16]
 8004dd8:	6153      	str	r3, [r2, #20]
 8004dda:	e728      	b.n	8004c2e <__kernel_rem_pio2+0x4e6>
 8004ddc:	41700000 	.word	0x41700000
 8004de0:	3e700000 	.word	0x3e700000
 8004de4:	00000000 	.word	0x00000000

08004de8 <__kernel_sin>:
 8004de8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dec:	ed2d 8b04 	vpush	{d8-d9}
 8004df0:	eeb0 8a41 	vmov.f32	s16, s2
 8004df4:	eef0 8a61 	vmov.f32	s17, s3
 8004df8:	ec55 4b10 	vmov	r4, r5, d0
 8004dfc:	b083      	sub	sp, #12
 8004dfe:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8004e02:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8004e06:	9001      	str	r0, [sp, #4]
 8004e08:	da06      	bge.n	8004e18 <__kernel_sin+0x30>
 8004e0a:	ee10 0a10 	vmov	r0, s0
 8004e0e:	4629      	mov	r1, r5
 8004e10:	f7fb fe38 	bl	8000a84 <__aeabi_d2iz>
 8004e14:	2800      	cmp	r0, #0
 8004e16:	d051      	beq.n	8004ebc <__kernel_sin+0xd4>
 8004e18:	4622      	mov	r2, r4
 8004e1a:	462b      	mov	r3, r5
 8004e1c:	4620      	mov	r0, r4
 8004e1e:	4629      	mov	r1, r5
 8004e20:	f7fb fb96 	bl	8000550 <__aeabi_dmul>
 8004e24:	4682      	mov	sl, r0
 8004e26:	468b      	mov	fp, r1
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	4620      	mov	r0, r4
 8004e2e:	4629      	mov	r1, r5
 8004e30:	f7fb fb8e 	bl	8000550 <__aeabi_dmul>
 8004e34:	a341      	add	r3, pc, #260	; (adr r3, 8004f3c <__kernel_sin+0x154>)
 8004e36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e3a:	4680      	mov	r8, r0
 8004e3c:	4689      	mov	r9, r1
 8004e3e:	4650      	mov	r0, sl
 8004e40:	4659      	mov	r1, fp
 8004e42:	f7fb fb85 	bl	8000550 <__aeabi_dmul>
 8004e46:	a33f      	add	r3, pc, #252	; (adr r3, 8004f44 <__kernel_sin+0x15c>)
 8004e48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e4c:	f7fb f9c8 	bl	80001e0 <__aeabi_dsub>
 8004e50:	4652      	mov	r2, sl
 8004e52:	465b      	mov	r3, fp
 8004e54:	f7fb fb7c 	bl	8000550 <__aeabi_dmul>
 8004e58:	a33c      	add	r3, pc, #240	; (adr r3, 8004f4c <__kernel_sin+0x164>)
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	f7fb f9c1 	bl	80001e4 <__adddf3>
 8004e62:	4652      	mov	r2, sl
 8004e64:	465b      	mov	r3, fp
 8004e66:	f7fb fb73 	bl	8000550 <__aeabi_dmul>
 8004e6a:	a33a      	add	r3, pc, #232	; (adr r3, 8004f54 <__kernel_sin+0x16c>)
 8004e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e70:	f7fb f9b6 	bl	80001e0 <__aeabi_dsub>
 8004e74:	4652      	mov	r2, sl
 8004e76:	465b      	mov	r3, fp
 8004e78:	f7fb fb6a 	bl	8000550 <__aeabi_dmul>
 8004e7c:	a337      	add	r3, pc, #220	; (adr r3, 8004f5c <__kernel_sin+0x174>)
 8004e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e82:	f7fb f9af 	bl	80001e4 <__adddf3>
 8004e86:	9b01      	ldr	r3, [sp, #4]
 8004e88:	4606      	mov	r6, r0
 8004e8a:	460f      	mov	r7, r1
 8004e8c:	b9eb      	cbnz	r3, 8004eca <__kernel_sin+0xe2>
 8004e8e:	4602      	mov	r2, r0
 8004e90:	460b      	mov	r3, r1
 8004e92:	4650      	mov	r0, sl
 8004e94:	4659      	mov	r1, fp
 8004e96:	f7fb fb5b 	bl	8000550 <__aeabi_dmul>
 8004e9a:	a325      	add	r3, pc, #148	; (adr r3, 8004f30 <__kernel_sin+0x148>)
 8004e9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea0:	f7fb f99e 	bl	80001e0 <__aeabi_dsub>
 8004ea4:	4642      	mov	r2, r8
 8004ea6:	464b      	mov	r3, r9
 8004ea8:	f7fb fb52 	bl	8000550 <__aeabi_dmul>
 8004eac:	4602      	mov	r2, r0
 8004eae:	460b      	mov	r3, r1
 8004eb0:	4620      	mov	r0, r4
 8004eb2:	4629      	mov	r1, r5
 8004eb4:	f7fb f996 	bl	80001e4 <__adddf3>
 8004eb8:	4604      	mov	r4, r0
 8004eba:	460d      	mov	r5, r1
 8004ebc:	ec45 4b10 	vmov	d0, r4, r5
 8004ec0:	b003      	add	sp, #12
 8004ec2:	ecbd 8b04 	vpop	{d8-d9}
 8004ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eca:	4b1b      	ldr	r3, [pc, #108]	; (8004f38 <__kernel_sin+0x150>)
 8004ecc:	ec51 0b18 	vmov	r0, r1, d8
 8004ed0:	2200      	movs	r2, #0
 8004ed2:	f7fb fb3d 	bl	8000550 <__aeabi_dmul>
 8004ed6:	4632      	mov	r2, r6
 8004ed8:	ec41 0b19 	vmov	d9, r0, r1
 8004edc:	463b      	mov	r3, r7
 8004ede:	4640      	mov	r0, r8
 8004ee0:	4649      	mov	r1, r9
 8004ee2:	f7fb fb35 	bl	8000550 <__aeabi_dmul>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	ec51 0b19 	vmov	r0, r1, d9
 8004eee:	f7fb f977 	bl	80001e0 <__aeabi_dsub>
 8004ef2:	4652      	mov	r2, sl
 8004ef4:	465b      	mov	r3, fp
 8004ef6:	f7fb fb2b 	bl	8000550 <__aeabi_dmul>
 8004efa:	ec53 2b18 	vmov	r2, r3, d8
 8004efe:	f7fb f96f 	bl	80001e0 <__aeabi_dsub>
 8004f02:	a30b      	add	r3, pc, #44	; (adr r3, 8004f30 <__kernel_sin+0x148>)
 8004f04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f08:	4606      	mov	r6, r0
 8004f0a:	460f      	mov	r7, r1
 8004f0c:	4640      	mov	r0, r8
 8004f0e:	4649      	mov	r1, r9
 8004f10:	f7fb fb1e 	bl	8000550 <__aeabi_dmul>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	4630      	mov	r0, r6
 8004f1a:	4639      	mov	r1, r7
 8004f1c:	f7fb f962 	bl	80001e4 <__adddf3>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4620      	mov	r0, r4
 8004f26:	4629      	mov	r1, r5
 8004f28:	f7fb f95a 	bl	80001e0 <__aeabi_dsub>
 8004f2c:	e7c4      	b.n	8004eb8 <__kernel_sin+0xd0>
 8004f2e:	bf00      	nop
 8004f30:	55555549 	.word	0x55555549
 8004f34:	3fc55555 	.word	0x3fc55555
 8004f38:	3fe00000 	.word	0x3fe00000
 8004f3c:	5acfd57c 	.word	0x5acfd57c
 8004f40:	3de5d93a 	.word	0x3de5d93a
 8004f44:	8a2b9ceb 	.word	0x8a2b9ceb
 8004f48:	3e5ae5e6 	.word	0x3e5ae5e6
 8004f4c:	57b1fe7d 	.word	0x57b1fe7d
 8004f50:	3ec71de3 	.word	0x3ec71de3
 8004f54:	19c161d5 	.word	0x19c161d5
 8004f58:	3f2a01a0 	.word	0x3f2a01a0
 8004f5c:	1110f8a6 	.word	0x1110f8a6
 8004f60:	3f811111 	.word	0x3f811111

08004f64 <fabs>:
 8004f64:	ec51 0b10 	vmov	r0, r1, d0
 8004f68:	ee10 2a10 	vmov	r2, s0
 8004f6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004f70:	ec43 2b10 	vmov	d0, r2, r3
 8004f74:	4770      	bx	lr
	...

08004f78 <floor>:
 8004f78:	ec51 0b10 	vmov	r0, r1, d0
 8004f7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004f80:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004f84:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8004f88:	2e13      	cmp	r6, #19
 8004f8a:	ee10 5a10 	vmov	r5, s0
 8004f8e:	ee10 8a10 	vmov	r8, s0
 8004f92:	460c      	mov	r4, r1
 8004f94:	dc32      	bgt.n	8004ffc <floor+0x84>
 8004f96:	2e00      	cmp	r6, #0
 8004f98:	da14      	bge.n	8004fc4 <floor+0x4c>
 8004f9a:	a333      	add	r3, pc, #204	; (adr r3, 8005068 <floor+0xf0>)
 8004f9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fa0:	f7fb f920 	bl	80001e4 <__adddf3>
 8004fa4:	2200      	movs	r2, #0
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	f7fb fd62 	bl	8000a70 <__aeabi_dcmpgt>
 8004fac:	b138      	cbz	r0, 8004fbe <floor+0x46>
 8004fae:	2c00      	cmp	r4, #0
 8004fb0:	da57      	bge.n	8005062 <floor+0xea>
 8004fb2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8004fb6:	431d      	orrs	r5, r3
 8004fb8:	d001      	beq.n	8004fbe <floor+0x46>
 8004fba:	4c2d      	ldr	r4, [pc, #180]	; (8005070 <floor+0xf8>)
 8004fbc:	2500      	movs	r5, #0
 8004fbe:	4621      	mov	r1, r4
 8004fc0:	4628      	mov	r0, r5
 8004fc2:	e025      	b.n	8005010 <floor+0x98>
 8004fc4:	4f2b      	ldr	r7, [pc, #172]	; (8005074 <floor+0xfc>)
 8004fc6:	4137      	asrs	r7, r6
 8004fc8:	ea01 0307 	and.w	r3, r1, r7
 8004fcc:	4303      	orrs	r3, r0
 8004fce:	d01f      	beq.n	8005010 <floor+0x98>
 8004fd0:	a325      	add	r3, pc, #148	; (adr r3, 8005068 <floor+0xf0>)
 8004fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fd6:	f7fb f905 	bl	80001e4 <__adddf3>
 8004fda:	2200      	movs	r2, #0
 8004fdc:	2300      	movs	r3, #0
 8004fde:	f7fb fd47 	bl	8000a70 <__aeabi_dcmpgt>
 8004fe2:	2800      	cmp	r0, #0
 8004fe4:	d0eb      	beq.n	8004fbe <floor+0x46>
 8004fe6:	2c00      	cmp	r4, #0
 8004fe8:	bfbe      	ittt	lt
 8004fea:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8004fee:	fa43 f606 	asrlt.w	r6, r3, r6
 8004ff2:	19a4      	addlt	r4, r4, r6
 8004ff4:	ea24 0407 	bic.w	r4, r4, r7
 8004ff8:	2500      	movs	r5, #0
 8004ffa:	e7e0      	b.n	8004fbe <floor+0x46>
 8004ffc:	2e33      	cmp	r6, #51	; 0x33
 8004ffe:	dd0b      	ble.n	8005018 <floor+0xa0>
 8005000:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005004:	d104      	bne.n	8005010 <floor+0x98>
 8005006:	ee10 2a10 	vmov	r2, s0
 800500a:	460b      	mov	r3, r1
 800500c:	f7fb f8ea 	bl	80001e4 <__adddf3>
 8005010:	ec41 0b10 	vmov	d0, r0, r1
 8005014:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005018:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800501c:	f04f 33ff 	mov.w	r3, #4294967295
 8005020:	fa23 f707 	lsr.w	r7, r3, r7
 8005024:	4207      	tst	r7, r0
 8005026:	d0f3      	beq.n	8005010 <floor+0x98>
 8005028:	a30f      	add	r3, pc, #60	; (adr r3, 8005068 <floor+0xf0>)
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	f7fb f8d9 	bl	80001e4 <__adddf3>
 8005032:	2200      	movs	r2, #0
 8005034:	2300      	movs	r3, #0
 8005036:	f7fb fd1b 	bl	8000a70 <__aeabi_dcmpgt>
 800503a:	2800      	cmp	r0, #0
 800503c:	d0bf      	beq.n	8004fbe <floor+0x46>
 800503e:	2c00      	cmp	r4, #0
 8005040:	da02      	bge.n	8005048 <floor+0xd0>
 8005042:	2e14      	cmp	r6, #20
 8005044:	d103      	bne.n	800504e <floor+0xd6>
 8005046:	3401      	adds	r4, #1
 8005048:	ea25 0507 	bic.w	r5, r5, r7
 800504c:	e7b7      	b.n	8004fbe <floor+0x46>
 800504e:	2301      	movs	r3, #1
 8005050:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8005054:	fa03 f606 	lsl.w	r6, r3, r6
 8005058:	4435      	add	r5, r6
 800505a:	4545      	cmp	r5, r8
 800505c:	bf38      	it	cc
 800505e:	18e4      	addcc	r4, r4, r3
 8005060:	e7f2      	b.n	8005048 <floor+0xd0>
 8005062:	2500      	movs	r5, #0
 8005064:	462c      	mov	r4, r5
 8005066:	e7aa      	b.n	8004fbe <floor+0x46>
 8005068:	8800759c 	.word	0x8800759c
 800506c:	7e37e43c 	.word	0x7e37e43c
 8005070:	bff00000 	.word	0xbff00000
 8005074:	000fffff 	.word	0x000fffff

08005078 <scalbn>:
 8005078:	b570      	push	{r4, r5, r6, lr}
 800507a:	ec55 4b10 	vmov	r4, r5, d0
 800507e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005082:	4606      	mov	r6, r0
 8005084:	462b      	mov	r3, r5
 8005086:	b99a      	cbnz	r2, 80050b0 <scalbn+0x38>
 8005088:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800508c:	4323      	orrs	r3, r4
 800508e:	d036      	beq.n	80050fe <scalbn+0x86>
 8005090:	4b39      	ldr	r3, [pc, #228]	; (8005178 <scalbn+0x100>)
 8005092:	4629      	mov	r1, r5
 8005094:	ee10 0a10 	vmov	r0, s0
 8005098:	2200      	movs	r2, #0
 800509a:	f7fb fa59 	bl	8000550 <__aeabi_dmul>
 800509e:	4b37      	ldr	r3, [pc, #220]	; (800517c <scalbn+0x104>)
 80050a0:	429e      	cmp	r6, r3
 80050a2:	4604      	mov	r4, r0
 80050a4:	460d      	mov	r5, r1
 80050a6:	da10      	bge.n	80050ca <scalbn+0x52>
 80050a8:	a32b      	add	r3, pc, #172	; (adr r3, 8005158 <scalbn+0xe0>)
 80050aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ae:	e03a      	b.n	8005126 <scalbn+0xae>
 80050b0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80050b4:	428a      	cmp	r2, r1
 80050b6:	d10c      	bne.n	80050d2 <scalbn+0x5a>
 80050b8:	ee10 2a10 	vmov	r2, s0
 80050bc:	4620      	mov	r0, r4
 80050be:	4629      	mov	r1, r5
 80050c0:	f7fb f890 	bl	80001e4 <__adddf3>
 80050c4:	4604      	mov	r4, r0
 80050c6:	460d      	mov	r5, r1
 80050c8:	e019      	b.n	80050fe <scalbn+0x86>
 80050ca:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80050ce:	460b      	mov	r3, r1
 80050d0:	3a36      	subs	r2, #54	; 0x36
 80050d2:	4432      	add	r2, r6
 80050d4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80050d8:	428a      	cmp	r2, r1
 80050da:	dd08      	ble.n	80050ee <scalbn+0x76>
 80050dc:	2d00      	cmp	r5, #0
 80050de:	a120      	add	r1, pc, #128	; (adr r1, 8005160 <scalbn+0xe8>)
 80050e0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050e4:	da1c      	bge.n	8005120 <scalbn+0xa8>
 80050e6:	a120      	add	r1, pc, #128	; (adr r1, 8005168 <scalbn+0xf0>)
 80050e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80050ec:	e018      	b.n	8005120 <scalbn+0xa8>
 80050ee:	2a00      	cmp	r2, #0
 80050f0:	dd08      	ble.n	8005104 <scalbn+0x8c>
 80050f2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80050f6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 80050fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80050fe:	ec45 4b10 	vmov	d0, r4, r5
 8005102:	bd70      	pop	{r4, r5, r6, pc}
 8005104:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005108:	da19      	bge.n	800513e <scalbn+0xc6>
 800510a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800510e:	429e      	cmp	r6, r3
 8005110:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005114:	dd0a      	ble.n	800512c <scalbn+0xb4>
 8005116:	a112      	add	r1, pc, #72	; (adr r1, 8005160 <scalbn+0xe8>)
 8005118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800511c:	2b00      	cmp	r3, #0
 800511e:	d1e2      	bne.n	80050e6 <scalbn+0x6e>
 8005120:	a30f      	add	r3, pc, #60	; (adr r3, 8005160 <scalbn+0xe8>)
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	f7fb fa13 	bl	8000550 <__aeabi_dmul>
 800512a:	e7cb      	b.n	80050c4 <scalbn+0x4c>
 800512c:	a10a      	add	r1, pc, #40	; (adr r1, 8005158 <scalbn+0xe0>)
 800512e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005132:	2b00      	cmp	r3, #0
 8005134:	d0b8      	beq.n	80050a8 <scalbn+0x30>
 8005136:	a10e      	add	r1, pc, #56	; (adr r1, 8005170 <scalbn+0xf8>)
 8005138:	e9d1 0100 	ldrd	r0, r1, [r1]
 800513c:	e7b4      	b.n	80050a8 <scalbn+0x30>
 800513e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005142:	3236      	adds	r2, #54	; 0x36
 8005144:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005148:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800514c:	4620      	mov	r0, r4
 800514e:	4b0c      	ldr	r3, [pc, #48]	; (8005180 <scalbn+0x108>)
 8005150:	2200      	movs	r2, #0
 8005152:	e7e8      	b.n	8005126 <scalbn+0xae>
 8005154:	f3af 8000 	nop.w
 8005158:	c2f8f359 	.word	0xc2f8f359
 800515c:	01a56e1f 	.word	0x01a56e1f
 8005160:	8800759c 	.word	0x8800759c
 8005164:	7e37e43c 	.word	0x7e37e43c
 8005168:	8800759c 	.word	0x8800759c
 800516c:	fe37e43c 	.word	0xfe37e43c
 8005170:	c2f8f359 	.word	0xc2f8f359
 8005174:	81a56e1f 	.word	0x81a56e1f
 8005178:	43500000 	.word	0x43500000
 800517c:	ffff3cb0 	.word	0xffff3cb0
 8005180:	3c900000 	.word	0x3c900000

08005184 <_init>:
 8005184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005186:	bf00      	nop
 8005188:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800518a:	bc08      	pop	{r3}
 800518c:	469e      	mov	lr, r3
 800518e:	4770      	bx	lr

08005190 <_fini>:
 8005190:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005192:	bf00      	nop
 8005194:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005196:	bc08      	pop	{r3}
 8005198:	469e      	mov	lr, r3
 800519a:	4770      	bx	lr
